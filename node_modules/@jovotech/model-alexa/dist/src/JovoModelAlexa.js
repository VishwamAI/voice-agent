"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JovoModelAlexa = void 0;
const model_1 = require("@jovotech/model");
const lodash_assign_1 = __importDefault(require("lodash.assign"));
const lodash_get_1 = __importDefault(require("lodash.get"));
const lodash_merge_1 = __importDefault(require("lodash.merge"));
const lodash_set_1 = __importDefault(require("lodash.set"));
const lodash_startswith_1 = __importDefault(require("lodash.startswith"));
const JovoModelAlexaData_json_1 = __importDefault(require("../validators/JovoModelAlexaData.json"));
const BUILTIN_PREFIX = 'AMAZON.';
class JovoModelAlexa extends model_1.JovoModel {
    static toJovoModel(inputFiles) {
        const inputData = inputFiles[0].content;
        const jovoModel = {
            version: '4.0',
            invocation: (0, lodash_get_1.default)(inputData, 'interactionModel.languageModel.invocationName'),
        };
        if ((0, lodash_get_1.default)(inputData, 'interactionModel.prompts')) {
            (0, lodash_set_1.default)(jovoModel, 'alexa.interactionModel.prompts', (0, lodash_get_1.default)(inputData, 'interactionModel.prompts'));
        }
        if ((0, lodash_get_1.default)(inputData, 'interactionModel.dialog')) {
            (0, lodash_set_1.default)(jovoModel, 'alexa.interactionModel.dialog', (0, lodash_get_1.default)(inputData, 'interactionModel.dialog'));
        }
        const alexaIntents = [];
        const jovoIntents = {};
        for (const intent of (0, lodash_get_1.default)(inputData, 'interactionModel.languageModel.intents')) {
            if ((0, lodash_startswith_1.default)(intent.name, BUILTIN_PREFIX)) {
                alexaIntents.push(intent);
            }
            else {
                const jovoIntent = {
                    phrases: intent.samples,
                };
                const entities = {};
                if (intent.slots) {
                    for (const slot of intent.slots) {
                        const entity = {
                            type: slot.type,
                        };
                        if ((0, lodash_startswith_1.default)(slot.type, BUILTIN_PREFIX)) {
                            entity.type = {
                                alexa: slot.type,
                            };
                        }
                        if (slot.samples) {
                            entity.alexa = {
                                samples: slot.samples,
                            };
                        }
                        entities[slot.name] = entity;
                    }
                    jovoIntent.entities = entities;
                }
                jovoIntents[intent.name] = jovoIntent;
            }
        }
        (0, lodash_set_1.default)(jovoModel, 'intents', jovoIntents);
        if ((0, lodash_get_1.default)(inputData, 'interactionModel.languageModel.types')) {
            const entityTypes = {};
            for (const type of (0, lodash_get_1.default)(inputData, 'interactionModel.languageModel.types')) {
                const values = [];
                let tV;
                for (const typeValue of type.values) {
                    tV = {
                        value: typeValue.name.value,
                    };
                    if (typeValue.name.synonyms) {
                        tV.synonyms = typeValue.name.synonyms;
                    }
                    if (typeValue.id) {
                        tV.id = typeValue.id;
                    }
                    values.push(tV);
                }
                entityTypes[type.name] = { values };
            }
            (0, lodash_set_1.default)(jovoModel, 'entityTypes', entityTypes);
        }
        (0, lodash_set_1.default)(jovoModel, 'alexa.interactionModel.languageModel.intents', alexaIntents);
        return jovoModel;
    }
    static fromJovoModel(model, locale) {
        var _a, _b;
        const errorPrefix = '/models/' + locale + '.json - ';
        const alexaModel = {
            interactionModel: {
                languageModel: {
                    invocationName: '',
                },
            },
        };
        let invocationName = model.invocation;
        if (typeof model.invocation === 'object') {
            if (!model.invocation.alexa) {
                throw new Error(`Can\'t find invocation name for locale ${locale}.`);
            }
            invocationName = model.invocation.alexa;
        }
        (0, lodash_set_1.default)(alexaModel, 'interactionModel.languageModel.invocationName', invocationName);
        if (alexaModel.interactionModel.languageModel.invocationName) {
            if (alexaModel.interactionModel.languageModel.invocationName.length < 2 ||
                alexaModel.interactionModel.languageModel.invocationName.length > 50) {
                throw new Error(errorPrefix + 'Invocation name must be between 2 and 50 characters.');
            }
            if (/[A-Z]/.test(alexaModel.interactionModel.languageModel.invocationName)) {
                throw new Error(errorPrefix + 'Invocation name cannot contain upper case characters.');
            }
            if (/\d/.test(alexaModel.interactionModel.languageModel.invocationName)) {
                throw new Error(errorPrefix +
                    'Invocation name may only contain alphabetic characters, apostrophes, periods and spaces.');
            }
        }
        alexaModel.interactionModel.languageModel.types = [];
        const alexaIntents = [];
        if (model.intents) {
            const intents = model_1.JovoModelHelper.getIntents(model);
            for (const [intentKey, intentData] of Object.entries(intents)) {
                const alexaIntentObj = {
                    name: intentKey,
                    samples: intentData.phrases,
                };
                for (const sample of alexaIntentObj.samples) {
                    if (/\d/.test(sample)) {
                        throw new Error(errorPrefix + `Intent "${alexaIntentObj.name}" must not have numbers in sample`);
                    }
                }
                if (model_1.JovoModelHelper.hasEntities(model, intentKey)) {
                    alexaIntentObj.slots = [];
                    const entities = model_1.JovoModelHelper.getEntities(model, intentKey);
                    for (const [entityKey, entityData] of Object.entries(entities)) {
                        const alexaInputObj = {
                            name: entityKey,
                            type: '',
                        };
                        if (typeof entityData.type === 'object') {
                            if (entityData.type.alexa) {
                                alexaInputObj.type = entityData.type.alexa;
                                if ((0, lodash_startswith_1.default)(entityData.type.alexa, BUILTIN_PREFIX)) {
                                    alexaInputObj.type = entityData.type.alexa;
                                }
                            }
                            else {
                                throw new Error(`${errorPrefix} Please add an Alexa property for entity "${entityKey}"`);
                            }
                        }
                        if (!alexaInputObj.type) {
                            if (!entityData.type) {
                                throw new Error(`${errorPrefix} Invalid entity type in intent "${intentKey}"`);
                            }
                            alexaInputObj.type = entityData.type;
                            const matchedEntityType = model_1.JovoModelHelper.getEntityTypeByName(model, alexaInputObj.type);
                            if (!matchedEntityType) {
                                if (model_1.JovoModelHelper.isJovoModelV3(model)) {
                                    throw new Error(`${errorPrefix} Input type "${alexaInputObj.type}" must be defined in inputTypes`);
                                }
                                else {
                                    throw new Error(`${errorPrefix} Entity type "${alexaInputObj.type}" must be defined in entityTypes`);
                                }
                            }
                            if (!alexaModel.interactionModel.languageModel.types) {
                                alexaModel.interactionModel.languageModel.types = [];
                            }
                            const alexaTypeObj = {
                                name: matchedEntityType.alexa || alexaInputObj.type,
                                values: [],
                            };
                            if (!matchedEntityType.values) {
                                throw new Error(`${errorPrefix} Entity type "${alexaInputObj.type}" must have at least one value`);
                            }
                            for (const value of matchedEntityType.values) {
                                if (typeof value === 'string') {
                                    alexaTypeObj.values.push({
                                        name: { value },
                                    });
                                }
                                else {
                                    alexaTypeObj.values.push({
                                        id: (_a = value.id) === null || _a === void 0 ? void 0 : _a.toString(),
                                        name: {
                                            value: value.value,
                                            synonyms: value.synonyms,
                                        },
                                    });
                                }
                            }
                            const existingAlexaTypes = alexaModel.interactionModel.languageModel.types.filter((item) => {
                                return alexaTypeObj.name === item.name;
                            });
                            if (existingAlexaTypes.length === 0) {
                                alexaModel.interactionModel.languageModel.types.push(alexaTypeObj);
                            }
                        }
                        if (entityData.alexa) {
                            (0, lodash_merge_1.default)(alexaInputObj, entityData.alexa);
                        }
                        alexaIntentObj.slots.push(alexaInputObj);
                    }
                }
                if ((0, lodash_get_1.default)(intentData, 'alexa')) {
                    (0, lodash_assign_1.default)(alexaIntentObj, intentData.alexa);
                }
                alexaIntents.push(alexaIntentObj);
            }
        }
        const alexaLanguageModelIntents = (0, lodash_get_1.default)(model, 'alexa.interactionModel.languageModel.intents') || [];
        if (alexaLanguageModelIntents) {
            for (const intent of alexaLanguageModelIntents) {
                alexaIntents.push(intent);
            }
        }
        (0, lodash_set_1.default)(alexaModel, 'interactionModel.languageModel.intents', alexaIntents);
        if ((0, lodash_get_1.default)(model, 'alexa.interactionModel.prompts')) {
            (0, lodash_set_1.default)(alexaModel, 'interactionModel.prompts', (0, lodash_get_1.default)(model, 'alexa.interactionModel.prompts'));
        }
        if ((0, lodash_get_1.default)(model, 'alexa.interactionModel.languageModel.types')) {
            (0, lodash_set_1.default)(alexaModel, 'interactionModel.languageModel.types', (0, lodash_get_1.default)(model, 'alexa.interactionModel.languageModel.types'));
        }
        if ((0, lodash_get_1.default)(model, 'alexa.interactionModel.languageModel.modelConfiguration')) {
            (0, lodash_set_1.default)(alexaModel, 'interactionModel.languageModel.modelConfiguration', (0, lodash_get_1.default)(model, 'alexa.interactionModel.languageModel.modelConfiguration'));
        }
        if ((0, lodash_get_1.default)(model, 'alexa.interactionModel.dialog')) {
            (0, lodash_set_1.default)(alexaModel, 'interactionModel.dialog', (0, lodash_get_1.default)(model, 'alexa.interactionModel.dialog'));
        }
        if ((0, lodash_get_1.default)(model, 'alexa.interactionModel._nameFreeInteraction')) {
            (0, lodash_set_1.default)(alexaModel, 'interactionModel._nameFreeInteraction', (0, lodash_get_1.default)(model, 'alexa.interactionModel._nameFreeInteraction'));
        }
        if (model_1.JovoModelHelper.hasEntityTypes(model)) {
            const entityTypes = model_1.JovoModelHelper.getEntityTypes(model);
            for (const [entityTypeKey, entityTypeData] of Object.entries(entityTypes)) {
                let findings = [];
                if ((0, lodash_get_1.default)(alexaModel, 'interactionModel.languageModel.types')) {
                    findings = alexaModel.interactionModel.languageModel.types.filter((item) => {
                        return entityTypeKey === item.name;
                    });
                }
                if (findings.length > 0) {
                    continue;
                }
                const alexaType = {
                    name: entityTypeKey,
                    values: [],
                };
                if (entityTypeData.values) {
                    for (const value of entityTypeData.values) {
                        if (typeof value === 'string') {
                            alexaType.values.push({
                                name: { value },
                            });
                        }
                        else {
                            alexaType.values.push({
                                id: (_b = value.id) === null || _b === void 0 ? void 0 : _b.toString(),
                                name: {
                                    value: value.value,
                                    synonyms: value.synonyms,
                                },
                            });
                        }
                    }
                }
                alexaModel.interactionModel.languageModel.types.push(alexaType);
            }
        }
        return [
            {
                path: [`${locale}.json`],
                content: alexaModel,
            },
        ];
    }
    static getValidator(model) {
        return (0, lodash_merge_1.default)(super.getValidator(model), JovoModelAlexaData_json_1.default);
    }
}
exports.JovoModelAlexa = JovoModelAlexa;
JovoModelAlexa.MODEL_KEY = 'alexa';
//# sourceMappingURL=JovoModelAlexa.js.map