"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var DeployPlatform_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeployPlatform = void 0;
const fs_1 = require("fs");
const cli_core_1 = require("@jovotech/cli-core");
const lodash_merge_1 = __importDefault(require("lodash.merge"));
let DeployPlatform = DeployPlatform_1 = class DeployPlatform extends cli_core_1.PluginCommand {
    static install(cli, plugin, emitter) {
        // Override PluginCommand.install() to fill options for --platform.
        this.availablePlatforms.push(...cli.getPlatforms());
        super.install(cli, plugin, emitter);
    }
    install() {
        this.middlewareCollection = {
            'before.deploy:platform': [this.checkForPlatformsFolder.bind(this)],
        };
    }
    checkForPlatformsFolder() {
        if (!fs_1.existsSync(this.$cli.project.getBuildPath())) {
            throw new cli_core_1.JovoCliError({
                message: "Couldn't find a platform folder.",
                module: this.$plugin.constructor.name,
                details: 'Please use "jovo build" to create platform-specific files.',
            });
        }
    }
    async run() {
        cli_core_1.Log.spacer();
        cli_core_1.Log.info(`jovo deploy:platform: ${DeployPlatform_1.description}`);
        cli_core_1.Log.info(cli_core_1.printSubHeadline('Learn more: https://jovo.tech/docs/deploy-command#deploy-platform'));
        cli_core_1.Log.spacer();
        const { args, flags } = this.parse(DeployPlatform_1);
        lodash_merge_1.default(this.$context, {
            args,
            flags,
            platforms: args.platform.length ? args.platform : this.$cli.getPlatforms(),
            locales: flags.locale || this.$cli.project.getLocales(),
        });
        await this.$emitter.run('before.deploy:platform');
        await this.$emitter.run('deploy:platform');
        await this.$emitter.run('after.deploy:platform');
        cli_core_1.Log.spacer();
        cli_core_1.Log.info(`${cli_core_1.TADA} Platform deployment completed.`);
        cli_core_1.Log.spacer();
    }
};
DeployPlatform.id = 'deploy:platform';
DeployPlatform.description = "Deploy to the specified platform's developer console";
DeployPlatform.examples = ['jovo deploy:platform', 'jovo deploy:platform alexa'];
DeployPlatform.availablePlatforms = [];
DeployPlatform.flags = Object.assign({ locale: cli_core_1.flags.string({
        char: 'l',
        description: 'The locales to be deployed',
        multiple: true,
    }) }, cli_core_1.PluginCommand.flags);
DeployPlatform.args = [
    {
        name: 'platform',
        description: 'Specify the platform to be deployed to',
        multiple: true,
        options: DeployPlatform_1.availablePlatforms,
    },
];
// Allow multiple arguments by disabling argument length validation
DeployPlatform.strict = false;
DeployPlatform = DeployPlatform_1 = __decorate([
    cli_core_1.ProjectCommand()
], DeployPlatform);
exports.DeployPlatform = DeployPlatform;
//# sourceMappingURL=deploy.platform.js.map