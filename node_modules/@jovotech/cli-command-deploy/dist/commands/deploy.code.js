"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var DeployCode_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeployCode = void 0;
const cli_core_1 = require("@jovotech/cli-core");
const lodash_merge_1 = __importDefault(require("lodash.merge"));
let DeployCode = DeployCode_1 = class DeployCode extends cli_core_1.PluginCommand {
    static install(cli, plugin, emitter) {
        // Override PluginComponent.install() to fill options for --platform.
        this.availableTargets.push(...cli.getPluginsWithType('target').map((plugin) => plugin.id));
        super.install(cli, plugin, emitter);
    }
    async run() {
        cli_core_1.Log.spacer();
        cli_core_1.Log.info(`jovo deploy:code: ${DeployCode_1.description}`);
        cli_core_1.Log.info(cli_core_1.printSubHeadline('Learn more: https://jovo.tech/docs/deploy-command#deploy-code'));
        cli_core_1.Log.spacer();
        const { args, flags } = this.parse(DeployCode_1);
        lodash_merge_1.default(this.$context, {
            args,
            flags,
            target: args.target,
            src: flags.src,
        });
        await this.$emitter.run('before.deploy:code');
        await this.$emitter.run('deploy:code');
        await this.$emitter.run('after.deploy:code');
        cli_core_1.Log.spacer();
        cli_core_1.Log.info(`${cli_core_1.TADA} Code deployment completed.`);
        cli_core_1.Log.spacer();
    }
};
DeployCode.id = 'deploy:code';
DeployCode.description = 'Upload the source code to a cloud provider';
DeployCode.examples = ['jovo deploy:code serverless'];
// Includes all available targets, which will be initialized on install().
DeployCode.availableTargets = [];
DeployCode.flags = Object.assign({ src: cli_core_1.flags.string({
        char: 's',
        description: 'Path to source files',
    }) }, cli_core_1.PluginCommand.flags);
DeployCode.args = [
    {
        name: 'target',
        required: true,
        description: 'Specify the cloud provider to be deployed to',
        multiple: true,
        options: DeployCode_1.availableTargets,
    },
];
// Allow multiple arguments by disabling argument length validation
DeployCode.strict = false;
DeployCode = DeployCode_1 = __decorate([
    cli_core_1.ProjectCommand()
], DeployCode);
exports.DeployCode = DeployCode;
//# sourceMappingURL=deploy.code.js.map