var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { BaseOutput, Output } from '@jovotech/framework';
var NextSceneOutput = /** @class */ (function (_super) {
    __extends(NextSceneOutput, _super);
    function NextSceneOutput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NextSceneOutput.prototype.build = function () {
        var _a, _b;
        return {
            message: this.options.message,
            platforms: {
                googleAssistant: {
                    nativeResponse: {
                        scene: {
                            name: (_b = (_a = this.jovo.$googleAssistant) === null || _a === void 0 ? void 0 : _a.$request.scene) === null || _b === void 0 ? void 0 : _b.name,
                            slots: this.options.slots || {},
                            next: {
                                name: this.options.name,
                            },
                        },
                    },
                },
            },
        };
    };
    NextSceneOutput = __decorate([
        Output()
    ], NextSceneOutput);
    return NextSceneOutput;
}(BaseOutput));
export { NextSceneOutput };
//# sourceMappingURL=NextSceneOutput.js.map