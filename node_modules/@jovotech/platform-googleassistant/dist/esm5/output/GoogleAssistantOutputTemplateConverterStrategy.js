var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { SsmlUtilities } from '@jovotech/common';
import { DynamicEntitiesMode, mergeInstances, SingleResponseOutputTemplateConverterStrategy, } from '@jovotech/output';
import { GoogleAssistantResponse } from '../GoogleAssistantResponse';
import { COLLECTION_MAX_SIZE, COLLECTION_MIN_SIZE, SUGGESTION_TITLE_MAX_LENGTH, SUGGESTIONS_MAX_SIZE, TEXT_MAX_LENGTH, } from './constants';
import { TypeOverrideMode, } from './models';
import { convertMessageToGoogleAssistantSimple } from './utilities';
var GoogleAssistantOutputTemplateConverterStrategy = /** @class */ (function (_super) {
    __extends(GoogleAssistantOutputTemplateConverterStrategy, _super);
    function GoogleAssistantOutputTemplateConverterStrategy() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.platformName = 'googleAssistant';
        _this.responseClass = GoogleAssistantResponse;
        return _this;
    }
    // make sure the (content of) message and reprompt always is an object for Google Assistant
    GoogleAssistantOutputTemplateConverterStrategy.prototype.normalizeOutput = function (output) {
        var makeMessageObj = function (message) {
            return {
                text: SsmlUtilities.removeSSML(message),
                speech: SsmlUtilities.toSSML(message),
            };
        };
        var updateMessage = function (outputTemplate, key) {
            var value = outputTemplate[key];
            if (value && typeof value === 'string') {
                outputTemplate[key] = makeMessageObj(value);
            }
            else if (Array.isArray(value)) {
                outputTemplate[key] = value.map(function (message) {
                    return typeof message === 'string' ? makeMessageObj(message) : message;
                });
            }
        };
        if (Array.isArray(output)) {
            output.forEach(function (outputTemplate) {
                updateMessage(outputTemplate, 'message');
                updateMessage(outputTemplate, 'reprompt');
            });
        }
        else {
            updateMessage(output, 'message');
            updateMessage(output, 'reprompt');
        }
        return _super.prototype.normalizeOutput.call(this, output);
    };
    GoogleAssistantOutputTemplateConverterStrategy.prototype.sanitizeOutput = function (output) {
        if (output.message) {
            output.message = this.sanitizeMessage(output.message, 'message');
        }
        if (output.reprompt) {
            output.reprompt = this.sanitizeMessage(output.reprompt, 'reprompt');
        }
        if (output.quickReplies) {
            output.quickReplies = this.sanitizeQuickReplies(output.quickReplies, 'quickReplies');
        }
        if (output.carousel) {
            output.carousel = this.sanitizeCarousel(output.carousel, 'carousel');
        }
        return output;
    };
    GoogleAssistantOutputTemplateConverterStrategy.prototype.sanitizeMessage = function (message, path, maxLength, offset) {
        if (maxLength === void 0) { maxLength = {
            text: TEXT_MAX_LENGTH,
        }; }
        return _super.prototype.sanitizeMessage.call(this, message, path, maxLength, offset);
    };
    GoogleAssistantOutputTemplateConverterStrategy.prototype.sanitizeQuickReplies = function (quickReplies, path, maxSize, maxLength) {
        if (maxSize === void 0) { maxSize = SUGGESTIONS_MAX_SIZE; }
        if (maxLength === void 0) { maxLength = SUGGESTION_TITLE_MAX_LENGTH; }
        return _super.prototype.sanitizeQuickReplies.call(this, quickReplies, path, maxSize, maxLength);
    };
    GoogleAssistantOutputTemplateConverterStrategy.prototype.sanitizeCarousel = function (carousel, path, minSize, maxSize) {
        if (minSize === void 0) { minSize = COLLECTION_MIN_SIZE; }
        if (maxSize === void 0) { maxSize = COLLECTION_MAX_SIZE; }
        return _super.prototype.sanitizeCarousel.call(this, carousel, path, minSize, maxSize);
    };
    GoogleAssistantOutputTemplateConverterStrategy.prototype.toResponse = function (output) {
        var _this = this;
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        var response = this.normalizeResponse({});
        function getEmptySession() {
            return { id: '', params: {}, languageCode: '' };
        }
        var listen = output.listen;
        if (listen === false) {
            response.scene = {
                name: '',
                slots: {},
                next: {
                    name: 'actions.scene.END_CONVERSATION',
                },
            };
        }
        else if (typeof listen === 'object' && ((_a = listen.entities) === null || _a === void 0 ? void 0 : _a.types)) {
            var typeOverrideMode_1 = listen.entities.mode === DynamicEntitiesMode.Merge
                ? TypeOverrideMode.Merge
                : TypeOverrideMode.Replace;
            if (!response.session) {
                response.session = getEmptySession();
            }
            response.session.typeOverrides = Object.keys(listen.entities.types).map(function (entityName) {
                return _this.convertDynamicEntityToTypeOverride(entityName, listen.entities.types[entityName], typeOverrideMode_1);
            });
        }
        var message = output.message;
        if (message) {
            if (!response.prompt) {
                response.prompt = {};
            }
            response.prompt.firstSimple = convertMessageToGoogleAssistantSimple(message);
        }
        var reprompt = output.reprompt;
        if (reprompt) {
            if (!response.session) {
                response.session = getEmptySession();
            }
            var text = typeof reprompt === 'string' ? reprompt : reprompt.text || reprompt.speech;
            response.session.params._GOOGLE_ASSISTANT_REPROMPTS_ = {
                NO_INPUT_1: text,
                NO_INPUT_2: text,
                NO_INPUT_FINAL: text,
            };
        }
        var quickReplies = output.quickReplies;
        if (quickReplies === null || quickReplies === void 0 ? void 0 : quickReplies.length) {
            if (!response.prompt) {
                response.prompt = {};
            }
            response.prompt.suggestions = quickReplies
                .slice(0, 8)
                .map(this.convertQuickReplyToSuggestion);
        }
        var card = output.card;
        if (card) {
            if (!response.prompt) {
                response.prompt = {};
            }
            if (!response.prompt.content) {
                response.prompt.content = {};
            }
            response.prompt.content.card = (_b = card.toGoogleAssistantCard) === null || _b === void 0 ? void 0 : _b.call(card);
        }
        var carousel = output.carousel;
        // Show a regular card if there is a single item in the carousel
        if (((_c = carousel === null || carousel === void 0 ? void 0 : carousel.selection) === null || _c === void 0 ? void 0 : _c.entityType) &&
            ((_d = carousel === null || carousel === void 0 ? void 0 : carousel.selection) === null || _d === void 0 ? void 0 : _d.intent) &&
            carousel.items.length === 1) {
            if (!response.prompt) {
                response.prompt = {};
            }
            if (!response.prompt.content) {
                response.prompt.content = {};
            }
            response.prompt.content.card = (_e = carousel.toGoogleAssistantCard) === null || _e === void 0 ? void 0 : _e.call(carousel);
        }
        // if a carousel exists and selection.entityType is set for it (otherwise carousel can't be displayed)
        if (((_f = carousel === null || carousel === void 0 ? void 0 : carousel.selection) === null || _f === void 0 ? void 0 : _f.entityType) &&
            ((_g = carousel === null || carousel === void 0 ? void 0 : carousel.selection) === null || _g === void 0 ? void 0 : _g.intent) &&
            carousel.items.length > 1) {
            var collectionData = (_h = carousel.toGoogleAssistantCollectionData) === null || _h === void 0 ? void 0 : _h.call(carousel);
            if (collectionData) {
                if (!response.session) {
                    response.session = getEmptySession();
                }
                if (!response.session.typeOverrides) {
                    response.session.typeOverrides = [];
                }
                response.session.typeOverrides.push(collectionData.typeOverride);
                response.session.params._GOOGLE_ASSISTANT_SELECTION_INTENT_ = carousel.selection.intent;
                if (!response.prompt) {
                    response.prompt = {};
                }
                if (!response.prompt.content) {
                    response.prompt.content = {};
                }
                response.prompt.content.collection = collectionData.collection;
            }
        }
        if ((_k = (_j = output.platforms) === null || _j === void 0 ? void 0 : _j.googleAssistant) === null || _k === void 0 ? void 0 : _k.nativeResponse) {
            mergeInstances(response, output.platforms.googleAssistant.nativeResponse);
        }
        return response;
    };
    GoogleAssistantOutputTemplateConverterStrategy.prototype.fromResponse = function (response) {
        var _this = this;
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
        var output = {};
        var simple = ((_a = response.prompt) === null || _a === void 0 ? void 0 : _a.firstSimple) || ((_b = response.prompt) === null || _b === void 0 ? void 0 : _b.lastSimple);
        if (simple === null || simple === void 0 ? void 0 : simple.toMessage) {
            output.message = simple.toMessage();
        }
        var reprompts = (_d = (_c = response.session) === null || _c === void 0 ? void 0 : _c.params) === null || _d === void 0 ? void 0 : _d._GOOGLE_ASSISTANT_REPROMPTS_;
        var reprompt = (reprompts === null || reprompts === void 0 ? void 0 : reprompts.NO_INPUT_1) || (reprompts === null || reprompts === void 0 ? void 0 : reprompts.NO_INPUT_2) || (reprompts === null || reprompts === void 0 ? void 0 : reprompts.NO_INPUT_FINAL);
        if (reprompt) {
            output.reprompt = reprompt;
        }
        if (((_f = (_e = response.scene) === null || _e === void 0 ? void 0 : _e.next) === null || _f === void 0 ? void 0 : _f.name) === 'actions.scene.END_CONVERSATION') {
            output.listen = false;
        }
        if ((_h = (_g = response.session) === null || _g === void 0 ? void 0 : _g.typeOverrides) === null || _h === void 0 ? void 0 : _h.length) {
            // only the first should be sufficient
            var mode = response.session.typeOverrides[0].typeOverrideMode === TypeOverrideMode.Merge
                ? DynamicEntitiesMode.Merge
                : DynamicEntitiesMode.Replace;
            output.listen = {
                entities: {
                    mode: mode,
                    types: response.session.typeOverrides.reduce(function (map, typeOverride) {
                        map[typeOverride.name] = _this.convertTypeOverrideToDynamicEntity(typeOverride);
                        return map;
                    }, {}),
                },
            };
        }
        var suggestions = (_j = response === null || response === void 0 ? void 0 : response.prompt) === null || _j === void 0 ? void 0 : _j.suggestions;
        if (suggestions === null || suggestions === void 0 ? void 0 : suggestions.length) {
            output.quickReplies = suggestions.map(function (suggestion) {
                return suggestion.toQuickReply();
            });
        }
        var card = (_l = (_k = response.prompt) === null || _k === void 0 ? void 0 : _k.content) === null || _l === void 0 ? void 0 : _l.card;
        if (card === null || card === void 0 ? void 0 : card.toCard) {
            output.card = card.toCard();
        }
        if (((_m = response === null || response === void 0 ? void 0 : response.session) === null || _m === void 0 ? void 0 : _m.typeOverrides) && ((_p = (_o = response === null || response === void 0 ? void 0 : response.prompt) === null || _o === void 0 ? void 0 : _o.content) === null || _p === void 0 ? void 0 : _p.collection)) {
            var carouselTypeOverride = (_r = (_q = response.session) === null || _q === void 0 ? void 0 : _q.typeOverrides) === null || _r === void 0 ? void 0 : _r.find(function (item) {
                return item.name === 'prompt_option';
            });
            if (carouselTypeOverride === null || carouselTypeOverride === void 0 ? void 0 : carouselTypeOverride.synonym) {
                output.carousel = {
                    items: carouselTypeOverride.synonym.entries.map(function (entry) {
                        var _a, _b, _c, _d;
                        return {
                            title: ((_a = entry.display) === null || _a === void 0 ? void 0 : _a.title) || '',
                            subtitle: (_b = entry.display) === null || _b === void 0 ? void 0 : _b.description,
                            imageUrl: (_d = (_c = entry.display) === null || _c === void 0 ? void 0 : _c.image) === null || _d === void 0 ? void 0 : _d.url,
                            key: entry.name,
                        };
                    }),
                };
            }
        }
        return output;
    };
    GoogleAssistantOutputTemplateConverterStrategy.prototype.convertQuickReplyToSuggestion = function (quickReply) {
        var _a;
        return typeof quickReply === 'string'
            ? { title: quickReply }
            : ((_a = quickReply.toGoogleAssistantSuggestion) === null || _a === void 0 ? void 0 : _a.call(quickReply)) || {
                title: quickReply.text,
            };
    };
    GoogleAssistantOutputTemplateConverterStrategy.prototype.convertDynamicEntityToTypeOverride = function (entityName, entity, mode) {
        if (mode === void 0) { mode = TypeOverrideMode.Replace; }
        return {
            name: entityName,
            typeOverrideMode: mode,
            synonym: {
                entries: (entity.values || []).map(function (entityValue) {
                    var _a;
                    return ({
                        name: entityValue.id || entityValue.value,
                        synonyms: ((_a = entityValue.synonyms) === null || _a === void 0 ? void 0 : _a.slice()) || [],
                    });
                }),
            },
        };
    };
    GoogleAssistantOutputTemplateConverterStrategy.prototype.convertTypeOverrideToDynamicEntity = function (typeOverride) {
        var _a;
        return {
            values: (((_a = typeOverride.synonym) === null || _a === void 0 ? void 0 : _a.entries) || []).map(function (entry) {
                var _a;
                return ({
                    id: entry.name,
                    value: entry.name,
                    synonyms: (_a = entry.synonyms) === null || _a === void 0 ? void 0 : _a.slice(),
                });
            }),
        };
    };
    return GoogleAssistantOutputTemplateConverterStrategy;
}(SingleResponseOutputTemplateConverterStrategy));
export { GoogleAssistantOutputTemplateConverterStrategy };
//# sourceMappingURL=GoogleAssistantOutputTemplateConverterStrategy.js.map