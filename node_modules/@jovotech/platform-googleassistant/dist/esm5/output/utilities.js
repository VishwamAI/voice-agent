import { SsmlUtilities } from '@jovotech/common';
import { Card, Carousel, Message, QuickReply, } from '@jovotech/output';
import { TypeOverrideMode, } from './models';
export function convertMessageToGoogleAssistantSimple(message) {
    if (typeof message === 'string') {
        return {
            speech: SsmlUtilities.toSSML(message),
            text: SsmlUtilities.removeSSML(message),
        };
    }
    return {
        speech: SsmlUtilities.toSSML(message.speech || message.text),
        text: SsmlUtilities.removeSSML(message.text || message.speech),
    };
}
export function augmentModelPrototypes() {
    Card.prototype.toGoogleAssistantCard = function () {
        var card = {
            title: this.title,
        };
        if (this.subtitle) {
            card.subtitle = this.subtitle;
        }
        if (this.content) {
            card.text = this.content;
        }
        if (this.imageUrl) {
            card.image = {
                url: this.imageUrl,
                alt: this.title,
            };
        }
        return card;
    };
    Carousel.prototype.toGoogleAssistantCard = function () {
        var _a = this.items[0], title = _a.title, subtitle = _a.subtitle, content = _a.content, imageUrl = _a.imageUrl;
        var card = {
            title: this.title || title,
            subtitle: subtitle,
            text: content,
            image: imageUrl
                ? {
                    url: imageUrl,
                    alt: title,
                }
                : undefined,
        };
        return card;
    };
    Carousel.prototype.toGoogleAssistantCollectionData = function () {
        var _a;
        var typeOverride = {
            name: ((_a = this.selection) === null || _a === void 0 ? void 0 : _a.entityType) || '',
            typeOverrideMode: TypeOverrideMode.Replace,
            synonym: {
                entries: this.items.map(function (item, index) {
                    return {
                        name: item.key || "ITEM_" + (index + 1),
                        synonyms: [],
                        display: {
                            title: item.title,
                            description: item.subtitle || item.content,
                            image: item.imageUrl ? { alt: item.title, url: item.imageUrl } : undefined,
                        },
                    };
                }),
            },
        };
        var collection = {
            items: this.items.map(function (item, index) {
                return {
                    key: item.key || "ITEM_" + (index + 1),
                };
            }),
        };
        return { collection: collection, typeOverride: typeOverride };
    };
    Message.prototype.toGoogleAssistantSimple = function () {
        return convertMessageToGoogleAssistantSimple(this);
    };
    QuickReply.prototype.toGoogleAssistantSuggestion = function () {
        return {
            title: this.text,
        };
    };
}
//# sourceMappingURL=utilities.js.map