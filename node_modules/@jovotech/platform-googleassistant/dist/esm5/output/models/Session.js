var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { IsArray, IsEnum, IsNotEmpty, IsObject, IsOptional, IsString, Type, ValidateNested, } from '@jovotech/output';
import { Image } from './common/Image';
import { OpenUrl } from './common/OpenUrl';
var EntryDisplay = /** @class */ (function () {
    function EntryDisplay() {
    }
    __decorate([
        IsString(),
        IsNotEmpty(),
        __metadata("design:type", String)
    ], EntryDisplay.prototype, "title", void 0);
    __decorate([
        IsOptional(),
        IsString(),
        IsNotEmpty(),
        __metadata("design:type", String)
    ], EntryDisplay.prototype, "description", void 0);
    __decorate([
        IsOptional(),
        ValidateNested(),
        Type(function () { return Image; }),
        __metadata("design:type", Image)
    ], EntryDisplay.prototype, "image", void 0);
    __decorate([
        IsOptional(),
        IsString(),
        IsNotEmpty(),
        __metadata("design:type", String)
    ], EntryDisplay.prototype, "footer", void 0);
    __decorate([
        IsOptional(),
        ValidateNested(),
        Type(function () { return OpenUrl; }),
        __metadata("design:type", OpenUrl)
    ], EntryDisplay.prototype, "openUrl", void 0);
    return EntryDisplay;
}());
export { EntryDisplay };
var Entry = /** @class */ (function () {
    function Entry() {
    }
    __decorate([
        IsString(),
        IsNotEmpty(),
        __metadata("design:type", String)
    ], Entry.prototype, "name", void 0);
    __decorate([
        IsArray(),
        IsString({ each: true }),
        __metadata("design:type", Array)
    ], Entry.prototype, "synonyms", void 0);
    __decorate([
        IsOptional(),
        ValidateNested(),
        Type(function () { return EntryDisplay; }),
        __metadata("design:type", EntryDisplay)
    ], Entry.prototype, "display", void 0);
    return Entry;
}());
export { Entry };
var SynonymType = /** @class */ (function () {
    function SynonymType() {
    }
    __decorate([
        IsArray(),
        ValidateNested({ each: true }),
        Type(function () { return Entry; }),
        __metadata("design:type", Array)
    ], SynonymType.prototype, "entries", void 0);
    return SynonymType;
}());
export { SynonymType };
export var TypeOverrideMode;
(function (TypeOverrideMode) {
    TypeOverrideMode["Unspecified"] = "TYPE_UNSPECIFIED";
    TypeOverrideMode["Replace"] = "TYPE_REPLACE";
    TypeOverrideMode["Merge"] = "TYPE_MERGE";
})(TypeOverrideMode || (TypeOverrideMode = {}));
var SessionParamsReprompts = /** @class */ (function () {
    function SessionParamsReprompts() {
    }
    __decorate([
        IsOptional(),
        IsString(),
        IsNotEmpty(),
        __metadata("design:type", String)
    ], SessionParamsReprompts.prototype, "NO_INPUT_1", void 0);
    __decorate([
        IsOptional(),
        IsString(),
        IsNotEmpty(),
        __metadata("design:type", String)
    ], SessionParamsReprompts.prototype, "NO_INPUT_2", void 0);
    __decorate([
        IsOptional(),
        IsString(),
        IsNotEmpty(),
        __metadata("design:type", String)
    ], SessionParamsReprompts.prototype, "NO_INPUT_FINAL", void 0);
    return SessionParamsReprompts;
}());
export { SessionParamsReprompts };
var SessionParams = /** @class */ (function () {
    function SessionParams() {
    }
    __decorate([
        IsOptional(),
        IsObject(),
        ValidateNested(),
        Type(function () { return SessionParamsReprompts; }),
        __metadata("design:type", SessionParamsReprompts)
    ], SessionParams.prototype, "_GOOGLE_ASSISTANT_REPROMPTS_", void 0);
    __decorate([
        IsOptional(),
        IsString(),
        IsNotEmpty(),
        __metadata("design:type", String)
    ], SessionParams.prototype, "_GOOGLE_ASSISTANT_SELECTION_INTENT_", void 0);
    return SessionParams;
}());
export { SessionParams };
var TypeOverride = /** @class */ (function () {
    function TypeOverride() {
    }
    __decorate([
        IsString(),
        IsNotEmpty(),
        __metadata("design:type", String)
    ], TypeOverride.prototype, "name", void 0);
    __decorate([
        IsEnum(TypeOverrideMode),
        __metadata("design:type", String)
    ], TypeOverride.prototype, "typeOverrideMode", void 0);
    __decorate([
        IsOptional(),
        ValidateNested(),
        Type(function () { return SynonymType; }),
        __metadata("design:type", SynonymType)
    ], TypeOverride.prototype, "synonym", void 0);
    return TypeOverride;
}());
export { TypeOverride };
var Session = /** @class */ (function () {
    function Session() {
    }
    __decorate([
        IsString(),
        __metadata("design:type", String)
    ], Session.prototype, "id", void 0);
    __decorate([
        IsObject(),
        ValidateNested(),
        Type(function () { return SessionParams; }),
        __metadata("design:type", SessionParams)
    ], Session.prototype, "params", void 0);
    __decorate([
        IsOptional(),
        IsArray(),
        ValidateNested({ each: true }),
        Type(function () { return TypeOverride; }),
        __metadata("design:type", Array)
    ], Session.prototype, "typeOverrides", void 0);
    __decorate([
        IsString(),
        __metadata("design:type", String)
    ], Session.prototype, "languageCode", void 0);
    return Session;
}());
export { Session };
//# sourceMappingURL=Session.js.map