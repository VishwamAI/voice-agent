var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { IsArray, IsBoolean, IsEnum, IsNotEmpty, IsOptional, IsString, Type, ValidateIf, ValidateNested, } from '@jovotech/output';
import { Image } from '../common/Image';
import { Link } from '../common/Link';
var Table = /** @class */ (function () {
    function Table() {
    }
    __decorate([
        ValidateIf(function (o) { return o.title || o.subtitle; }),
        IsString(),
        IsNotEmpty(),
        __metadata("design:type", String)
    ], Table.prototype, "title", void 0);
    __decorate([
        IsOptional(),
        IsString(),
        IsNotEmpty(),
        __metadata("design:type", String)
    ], Table.prototype, "subtitle", void 0);
    __decorate([
        ValidateNested(),
        Type(function () { return Image; }),
        __metadata("design:type", Image)
    ], Table.prototype, "image", void 0);
    __decorate([
        IsArray(),
        ValidateNested({ each: true }),
        Type(function () { return TableColumn; }),
        __metadata("design:type", Array)
    ], Table.prototype, "columns", void 0);
    __decorate([
        IsArray(),
        ValidateNested({ each: true }),
        Type(function () { return TableRow; }),
        __metadata("design:type", Array)
    ], Table.prototype, "rows", void 0);
    __decorate([
        ValidateNested(),
        Type(function () { return Link; }),
        IsOptional(),
        __metadata("design:type", Link)
    ], Table.prototype, "button", void 0);
    return Table;
}());
export { Table };
export var HorizontalAlignment;
(function (HorizontalAlignment) {
    HorizontalAlignment["Unspecified"] = "UNSPECIFIED";
    HorizontalAlignment["Leading"] = "LEADING";
    HorizontalAlignment["Center"] = "CENTER";
    HorizontalAlignment["Trailing"] = "TRAILING";
})(HorizontalAlignment || (HorizontalAlignment = {}));
var TableColumn = /** @class */ (function () {
    function TableColumn() {
    }
    __decorate([
        IsString(),
        IsNotEmpty(),
        __metadata("design:type", String)
    ], TableColumn.prototype, "header", void 0);
    __decorate([
        IsOptional(),
        IsEnum(HorizontalAlignment),
        __metadata("design:type", String)
    ], TableColumn.prototype, "align", void 0);
    return TableColumn;
}());
export { TableColumn };
var TableRow = /** @class */ (function () {
    function TableRow() {
    }
    __decorate([
        IsArray(),
        ValidateNested({ each: true }),
        Type(function () { return TableCell; }),
        __metadata("design:type", Array)
    ], TableRow.prototype, "cells", void 0);
    __decorate([
        IsBoolean(),
        __metadata("design:type", Boolean)
    ], TableRow.prototype, "divider", void 0);
    return TableRow;
}());
export { TableRow };
var TableCell = /** @class */ (function () {
    function TableCell() {
    }
    __decorate([
        IsString(),
        IsNotEmpty(),
        __metadata("design:type", String)
    ], TableCell.prototype, "text", void 0);
    return TableCell;
}());
export { TableCell };
//# sourceMappingURL=Table.js.map