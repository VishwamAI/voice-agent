var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { ANSWER_BACKUP, ANSWER_CANCEL, deleteFolderRecursive, DISK, flags, getResolvedLocales, JovoCliError, mergeArrayCustomizer, OK_HAND, PluginHook, printHighlight, printStage, printSubHeadline, promptOverwriteReverseBuild, REVERSE_ARROWS, STATION, Task, wait, } from '@jovotech/cli-core';
import { FileBuilder } from '@jovotech/filebuilder';
import { JovoModelGoogle } from '@jovotech/model-google';
import { existsSync, mkdirSync, readdirSync, readFileSync, statSync, writeFileSync } from 'fs';
import { copySync, removeSync } from 'fs-extra';
import _get from 'lodash.get';
import _has from 'lodash.has';
import _merge from 'lodash.merge';
import _mergeWith from 'lodash.mergewith';
import _set from 'lodash.set';
import { join as joinPaths } from 'path';
import * as yaml from 'yaml';
import DefaultFiles from '../DefaultFiles.json';
import { SupportedLocales, } from '../utilities';
var BuildHook = /** @class */ (function (_super) {
    __extends(BuildHook, _super);
    function BuildHook() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BuildHook.prototype.install = function () {
        this.middlewareCollection = {
            'install': [this.addCliOptions.bind(this)],
            'before.build:platform': [
                this.checkForPlatform.bind(this),
                this.updatePluginContext.bind(this),
                this.checkForCleanBuild.bind(this),
                this.validateLocales.bind(this),
            ],
            'build:platform': [this.validateModels.bind(this), this.build.bind(this)],
            'build:platform.reverse': [this.buildReverse.bind(this)],
        };
    };
    /**
     * Add platform-specific CLI options, including flags and args.
     * @param context - Context providing an access point to command flags and args.
     */
    BuildHook.prototype.addCliOptions = function (context) {
        if (context.command !== 'build:platform') {
            return;
        }
        context.flags['project-id'] = flags.string({
            description: 'Google Cloud Project ID',
        });
    };
    /**
     * Checks if the currently selected platform matches this CLI plugin.
     * @param context - Context containing information after flags and args have been parsed by the CLI.
     */
    BuildHook.prototype.checkForPlatform = function () {
        // Check if this plugin should be used or not.
        if (!this.$context.platforms.includes(this.$plugin.id)) {
            this.uninstall();
        }
    };
    /**
     * Updates the current plugin context with platform-specific values.
     */
    BuildHook.prototype.updatePluginContext = function () {
        if (!this.$context.googleAssistant) {
            this.$context.googleAssistant = {};
        }
        this.$context.googleAssistant.projectId =
            this.$context.flags['project-id'] || _get(this.$plugin.config, 'projectId');
        if (!this.$context.googleAssistant.projectId) {
            throw new JovoCliError({
                message: 'Could not find project ID.',
                module: this.$plugin.name,
                hint: 'Please provide a project ID by using the flag "--project-id" or in your project configuration.',
            });
        }
        // Set default locale.
        this.setDefaultLocale();
    };
    /**
     * Checks, if --clean has been set and deletes the platform folder accordingly.
     */
    BuildHook.prototype.checkForCleanBuild = function () {
        // If --clean has been set, delete the respective platform folders before building.
        if (this.$context.flags.clean) {
            deleteFolderRecursive(this.$plugin.platformPath);
        }
    };
    /**
     * Checks if any provided locale is not supported, thus invalid.
     */
    BuildHook.prototype.validateLocales = function () {
        var _this = this;
        var locales = this.$context.locales.reduce(function (locales, locale) {
            locales.push.apply(locales, getResolvedLocales(locale, SupportedLocales, _this.$plugin.config.locales));
            return locales;
        }, []);
        for (var _i = 0, locales_1 = locales; _i < locales_1.length; _i++) {
            var locale = locales_1[_i];
            var genericLocale = locale.substring(0, 2);
            // For Google Conversational Actions, some locales require a generic locale to be set, e.g. en for en-US.
            if (SupportedLocales.includes(genericLocale) &&
                !locales.includes(genericLocale)) {
                throw new JovoCliError({
                    message: "Locale " + printHighlight(locale) + " requires a generic locale " + printHighlight(genericLocale) + ".",
                    module: this.$plugin.name,
                });
            }
            if (!SupportedLocales.includes(locale)) {
                throw new JovoCliError({
                    message: "Locale " + printHighlight(locale) + " is not supported by Google Conversational Actions.",
                    module: this.$plugin.name,
                    learnMore: 'For more information on multiple language support: https://developers.google.com/assistant/console/languages-locales',
                });
            }
        }
    };
    /**
     * Validates Jovo models with platform-specific validators.
     */
    BuildHook.prototype.validateModels = function () {
        return __awaiter(this, void 0, void 0, function () {
            var validationTask, _loop_1, _i, _a, locale;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        validationTask = new Task(OK_HAND + " Validating Google Assistant model files");
                        _loop_1 = function (locale) {
                            var localeTask = new Task(locale, function () { return __awaiter(_this, void 0, void 0, function () {
                                var model;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.$cli.project.getModel(locale)];
                                        case 1:
                                            model = _a.sent();
                                            return [4 /*yield*/, this.$cli.project.validateModel(locale, model, JovoModelGoogle.getValidator(model), this.$plugin.name)];
                                        case 2:
                                            _a.sent();
                                            return [4 /*yield*/, wait(500)];
                                        case 3:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); });
                            validationTask.add(localeTask);
                        };
                        for (_i = 0, _a = this.$context.locales; _i < _a.length; _i++) {
                            locale = _a[_i];
                            _loop_1(locale);
                        }
                        return [4 /*yield*/, validationTask.run()];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Builds Jovo model files from platform-specific files.
     */
    BuildHook.prototype.buildReverse = function () {
        return __awaiter(this, void 0, void 0, function () {
            var reverseBuildTask, selectedLocales, platformLocales, _i, _a, locale, buildLocaleMap, modelLocale, resolvedLocales, _b, selectedLocales_1, selectedLocale, answer, backupTask, _loop_2, _c, _d, locale, _loop_3, _e, _f, _g, platformLocale, modelLocale;
            var _this = this;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        // Since platform can be prompted for, check if this plugin should actually be executed again.
                        if (!this.$context.platforms.includes(this.$plugin.id)) {
                            return [2 /*return*/];
                        }
                        this.updatePluginContext();
                        reverseBuildTask = new Task(REVERSE_ARROWS + " Reversing model files");
                        if (!(this.$cli.project.config.getParameter('models.enabled') !== false)) return [3 /*break*/, 4];
                        selectedLocales = [];
                        platformLocales = this.getPlatformLocales();
                        if (!this.$context.flags.locale) {
                            selectedLocales.push.apply(selectedLocales, platformLocales);
                        }
                        else {
                            // Otherwise only reverse build from the specified locale if it exists inside the platform folder.
                            for (_i = 0, _a = this.$context.flags.locale; _i < _a.length; _i++) {
                                locale = _a[_i];
                                if (platformLocales.includes(locale)) {
                                    selectedLocales.push(locale);
                                }
                                else {
                                    throw new JovoCliError({
                                        message: "Could not find platform models for locale: " + printHighlight(locale),
                                        module: this.$plugin.name,
                                        hint: "Available locales include: " + platformLocales.join(', '),
                                    });
                                }
                            }
                        }
                        buildLocaleMap = selectedLocales.reduce(function (localeMap, locale) {
                            localeMap[locale] = locale;
                            return localeMap;
                        }, {});
                        for (modelLocale in this.$plugin.config.locales) {
                            resolvedLocales = getResolvedLocales(modelLocale, SupportedLocales, this.$plugin.config.locales);
                            for (_b = 0, selectedLocales_1 = selectedLocales; _b < selectedLocales_1.length; _b++) {
                                selectedLocale = selectedLocales_1[_b];
                                if (resolvedLocales.includes(selectedLocale)) {
                                    buildLocaleMap[selectedLocale] = modelLocale;
                                }
                            }
                        }
                        if (!(this.$cli.project.hasModelFiles(Object.values(buildLocaleMap)) &&
                            !this.$context.flags.clean)) return [3 /*break*/, 3];
                        return [4 /*yield*/, promptOverwriteReverseBuild()];
                    case 1:
                        answer = _h.sent();
                        if (answer.overwrite === ANSWER_CANCEL) {
                            return [2 /*return*/];
                        }
                        if (!(answer.overwrite === ANSWER_BACKUP)) return [3 /*break*/, 3];
                        backupTask = new Task(DISK + " Creating backups");
                        _loop_2 = function (locale) {
                            var localeTask = new Task(locale, function () { return _this.$cli.project.backupModel(locale); });
                            backupTask.add(localeTask);
                        };
                        for (_c = 0, _d = Object.values(buildLocaleMap); _c < _d.length; _c++) {
                            locale = _d[_c];
                            _loop_2(locale);
                        }
                        return [4 /*yield*/, backupTask.run()];
                    case 2:
                        _h.sent();
                        _h.label = 3;
                    case 3:
                        _loop_3 = function (platformLocale, modelLocale) {
                            var taskDetails = platformLocale === modelLocale ? '' : "(" + modelLocale + ")";
                            var localeTask = new Task(platformLocale + " " + taskDetails, function () { return __awaiter(_this, void 0, void 0, function () {
                                var platformFiles, jovoModel, nativeData;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            platformFiles = this.getPlatformModels(platformLocale);
                                            jovoModel = new JovoModelGoogle();
                                            jovoModel.importNative(platformFiles, modelLocale);
                                            nativeData = jovoModel.exportJovoModel();
                                            if (!nativeData) {
                                                throw new JovoCliError({
                                                    message: 'Something went wrong while exporting your Jovo model.',
                                                    module: this.$plugin.name,
                                                });
                                            }
                                            nativeData.invocation = this.getPlatformInvocationName(platformLocale);
                                            this.$cli.project.saveModel(nativeData, modelLocale);
                                            return [4 /*yield*/, wait(500)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); });
                            reverseBuildTask.add(localeTask);
                        };
                        for (_e = 0, _f = Object.entries(buildLocaleMap); _e < _f.length; _e++) {
                            _g = _f[_e], platformLocale = _g[0], modelLocale = _g[1];
                            _loop_3(platformLocale, modelLocale);
                        }
                        _h.label = 4;
                    case 4: return [4 /*yield*/, reverseBuildTask.run()];
                    case 5:
                        _h.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Builds platform-specific models from Jovo language model.
     */
    BuildHook.prototype.build = function () {
        return __awaiter(this, void 0, void 0, function () {
            var buildPath, buildTaskTitle, buildTask, projectFilesTask, buildInteractionModelTask;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        buildPath = "Path: ./" + joinPaths(this.$cli.project.getBuildDirectory(), this.$plugin.platformDirectory);
                        buildTaskTitle = STATION + " Building Google Conversational Action files" + printStage(this.$cli.project.stage) + "\n" + printSubHeadline(buildPath);
                        buildTask = new Task(buildTaskTitle);
                        projectFilesTask = new Task("Project files", this.buildProjectFiles.bind(this));
                        buildInteractionModelTask = new Task("Interaction model", this.buildInteractionModel.bind(this), {
                            enabled: this.$cli.project.config.getParameter('models.enabled') !== false &&
                                this.$cli.project.hasModelFiles(this.$context.locales),
                        });
                        buildTask.add(projectFilesTask, buildInteractionModelTask);
                        return [4 /*yield*/, buildTask.run()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Creates Google Conversational Action specific project files.
     */
    BuildHook.prototype.buildProjectFiles = function () {
        return __awaiter(this, void 0, void 0, function () {
            var files, projectFiles, endpoint, webhookPath, defaultHandler, _i, _a, locale, resolvedLocales, _b, resolvedLocales_1, resolvedLocale, settingsPathArr, settingsPath, localizedSettingsPath, invocationName, copyResourcesTask;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        files = FileBuilder.normalizeFileObject(_get(this.$plugin.config, 'files', {}));
                        projectFiles = this.$cli.project.hasPlatform(this.$plugin.platformDirectory)
                            ? files
                            : _merge(DefaultFiles, files);
                        endpoint = this.getPluginEndpoint();
                        webhookPath = 'webhooks/["ActionsOnGoogleFulfillment.yaml"]';
                        if (endpoint && !_has(projectFiles, webhookPath)) {
                            defaultHandler = {
                                handlers: [
                                    {
                                        name: 'Jovo',
                                    },
                                ],
                                httpsEndpoint: {
                                    baseUrl: this.getPluginEndpoint(),
                                },
                            };
                            _set(projectFiles, webhookPath, defaultHandler);
                        }
                        _i = 0, _a = this.$context.locales;
                        _c.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 6];
                        locale = _a[_i];
                        resolvedLocales = getResolvedLocales(locale, SupportedLocales, this.$plugin.config.locales);
                        _b = 0, resolvedLocales_1 = resolvedLocales;
                        _c.label = 2;
                    case 2:
                        if (!(_b < resolvedLocales_1.length)) return [3 /*break*/, 5];
                        resolvedLocale = resolvedLocales_1[_b];
                        settingsPathArr = ['settings/'];
                        if (resolvedLocale !== this.$context.googleAssistant.defaultLocale) {
                            settingsPathArr.push(resolvedLocale + "/");
                        }
                        settingsPathArr.push('["settings.yaml"]');
                        settingsPath = settingsPathArr.join('.');
                        // Set default settings.
                        if (resolvedLocale === this.$context.googleAssistant.defaultLocale) {
                            if (!_has(projectFiles, settingsPath + ".defaultLocale")) {
                                _set(projectFiles, settingsPath + ".defaultLocale", this.$context.googleAssistant.defaultLocale);
                            }
                            if (!_has(projectFiles, settingsPath + ".projectId")) {
                                _set(projectFiles, settingsPath + ".projectId", this.$context.googleAssistant.projectId);
                            }
                        }
                        localizedSettingsPath = settingsPath + ".localizedSettings";
                        return [4 /*yield*/, this.getInvocationName(locale)];
                    case 3:
                        invocationName = _c.sent();
                        if (!_has(projectFiles, localizedSettingsPath + ".displayName")) {
                            _set(projectFiles, localizedSettingsPath + ".displayName", invocationName);
                        }
                        if (!_has(projectFiles, localizedSettingsPath + ".pronunciation")) {
                            _set(projectFiles, localizedSettingsPath + ".pronunciation", invocationName);
                        }
                        _c.label = 4;
                    case 4:
                        _b++;
                        return [3 /*break*/, 2];
                    case 5:
                        _i++;
                        return [3 /*break*/, 1];
                    case 6:
                        FileBuilder.buildDirectory(projectFiles, this.$plugin.platformPath);
                        if (!existsSync(this.$plugin.config.resourcesDirectory)) return [3 /*break*/, 8];
                        copyResourcesTask = new Task("Copying resources from " + this.$plugin.config.resourcesDirectory, function () {
                            var src = joinPaths(_this.$cli.projectPath, _this.$plugin.config.resourcesDirectory);
                            var dest = joinPaths(_this.$plugin.platformPath, 'resources');
                            // Delete existing resources folder before copying data
                            removeSync(dest);
                            copySync(src, dest);
                        }, { indentation: 2 });
                        return [4 /*yield*/, copyResourcesTask.run()];
                    case 7:
                        _c.sent();
                        _c.label = 8;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Creates and returns tasks for each locale to build the interaction model for Alexa.
     */
    BuildHook.prototype.buildInteractionModel = function () {
        return __awaiter(this, void 0, void 0, function () {
            var output, _i, _a, locale, resolvedLocales, resolvedLocalesOutput, taskDetails;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        output = [];
                        _i = 0, _a = this.$context.locales;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 5];
                        locale = _a[_i];
                        resolvedLocales = getResolvedLocales(locale, SupportedLocales, this.$plugin.config.locales);
                        resolvedLocalesOutput = resolvedLocales.join(', ');
                        taskDetails = resolvedLocalesOutput === locale ? '' : "(" + resolvedLocalesOutput + ")";
                        return [4 /*yield*/, this.buildLanguageModel(locale, resolvedLocales)];
                    case 2:
                        _b.sent();
                        return [4 /*yield*/, wait(500)];
                    case 3:
                        _b.sent();
                        output.push(locale + " " + taskDetails);
                        _b.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 1];
                    case 5: return [2 /*return*/, output];
                }
            });
        });
    };
    /**
     * Builds and saves a Google Conversational Action model from a Jovo model.
     * @param modelLocale - Locale of the Jovo model.
     * @param resolvedLocales - Locales to which to resolve the modelLocale.
     */
    BuildHook.prototype.buildLanguageModel = function (modelLocale, resolvedLocales) {
        return __awaiter(this, void 0, void 0, function () {
            var model, _a, _i, resolvedLocales_2, locale, jovoModel, modelFiles, actions, _b, modelFiles_1, file, fileName, modelPath, actionsPath;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = _merge;
                        return [4 /*yield*/, this.getJovoModel(modelLocale)];
                    case 1:
                        model = _a.apply(void 0, [_c.sent(), this.$cli.project.config.getParameter("models.override." + modelLocale)]);
                        for (_i = 0, resolvedLocales_2 = resolvedLocales; _i < resolvedLocales_2.length; _i++) {
                            locale = resolvedLocales_2[_i];
                            jovoModel = new JovoModelGoogle(model, locale, this.$context.googleAssistant.defaultLocale);
                            modelFiles = jovoModel.exportNative();
                            actions = {
                                custom: {
                                    'actions.intent.MAIN': {},
                                },
                            };
                            for (_b = 0, modelFiles_1 = modelFiles; _b < modelFiles_1.length; _b++) {
                                file = modelFiles_1[_b];
                                fileName = file.path.pop();
                                modelPath = joinPaths.apply(void 0, __spreadArray([this.$plugin.platformPath], file.path, false));
                                // Check if the path for the current model type (e.g. intent, types, ...) exists.
                                if (!existsSync(modelPath)) {
                                    mkdirSync(modelPath, { recursive: true });
                                }
                                // Register actions.
                                if (file.path.includes('global')) {
                                    actions.custom[fileName.replace('.yaml', '')] = {};
                                }
                                writeFileSync(joinPaths(modelPath, fileName), file.content);
                            }
                            // Merge existing actions file with configuration in project.js.
                            _merge(actions, this.getProjectActions());
                            actionsPath = joinPaths(this.$plugin.platformPath, 'actions');
                            if (!existsSync(actionsPath)) {
                                mkdirSync(actionsPath, { recursive: true });
                            }
                            writeFileSync(joinPaths(actionsPath, 'actions.yaml'), yaml.stringify(actions));
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gets configured actions from config.
     */
    BuildHook.prototype.getProjectActions = function () {
        return _get(this.$plugin.config, 'files.["actions/"]');
    };
    /**
     * Sets the default locale for the current Conversational Action.
     */
    BuildHook.prototype.setDefaultLocale = function () {
        var _this = this;
        var resolvedLocales = this.$context.locales.reduce(function (locales, locale) {
            locales.push.apply(locales, getResolvedLocales(locale, SupportedLocales, _this.$plugin.config.locales));
            return locales;
        }, []);
        var defaultLocale = _get(this.$plugin.config, 'files.settings/["settings.yaml"].defaultLocale') ||
            _get(this.$plugin.config, 'defaultLocale');
        // Try to get default locale from platform-specific settings.
        var settingsPath = joinPaths(this.$plugin.platformPath, 'settings', 'settings.yaml');
        if (existsSync(settingsPath)) {
            var settingsFile = readFileSync(joinPaths(this.$plugin.platformPath, 'settings', 'settings.yaml'), 'utf-8');
            var settings = yaml.parse(settingsFile);
            defaultLocale = _get(settings, 'defaultLocale');
        }
        if (!defaultLocale && resolvedLocales) {
            // If locales includes an english model, take english as default automatically.
            for (var _i = 0, resolvedLocales_3 = resolvedLocales; _i < resolvedLocales_3.length; _i++) {
                var locale = resolvedLocales_3[_i];
                if (locale === 'en') {
                    this.$context.googleAssistant.defaultLocale = locale;
                }
            }
            // Otherwise take the first locale in the array as the default one.
            this.$context.googleAssistant.defaultLocale = resolvedLocales[0];
            return;
        }
        if (!defaultLocale) {
            throw new JovoCliError({
                message: 'Could not find a default locale.',
                module: this.$plugin.name,
                hint: 'Try adding the property "defaultLocale" to your project.js.',
            });
        }
        this.$context.googleAssistant.defaultLocale = defaultLocale;
    };
    /**
     * Try to get locale resolution (en -> en-US) from project configuration.
     * @param locale - The locale to get the resolution from.
     */
    BuildHook.prototype.getProjectLocales = function (locale) {
        return _get(this.$plugin.config, "options.locales." + locale);
    };
    /**
     * Get plugin-specific endpoint.
     */
    BuildHook.prototype.getPluginEndpoint = function () {
        var endpoint = _get(this.$plugin.config, 'endpoint') ||
            this.$cli.project.config.getParameter('endpoint');
        return this.$cli.resolveEndpoint(endpoint);
    };
    /**
     * Gets the invocation name for the specified locale.
     * @param locale - The locale of the Jovo model to fetch the invocation name from.
     */
    BuildHook.prototype.getInvocationName = function (locale) {
        return __awaiter(this, void 0, void 0, function () {
            var invocation, _a, platformInvocation;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = _merge;
                        return [4 /*yield*/, this.getJovoModel(locale)];
                    case 1:
                        invocation = _a.apply(void 0, [_b.sent(), this.$cli.project.config.getParameter("models.override." + locale)]).invocation;
                        if (typeof invocation === 'object') {
                            platformInvocation = invocation[this.$plugin.id];
                            if (!platformInvocation) {
                                throw new JovoCliError({
                                    message: "Can't find invocation name for locale " + locale + ".",
                                    module: this.$plugin.name,
                                });
                            }
                            return [2 /*return*/, platformInvocation];
                        }
                        return [2 /*return*/, invocation];
                }
            });
        });
    };
    /**
     * Parses and returns platform-specific intents and entities.
     * @param locale - Locale for which to return the model data.
     */
    BuildHook.prototype.getPlatformModels = function (locale) {
        var platformModels = [];
        var modelPath = joinPaths(this.$plugin.platformPath, 'custom');
        // Go through a predefined set of folders to extract intent and type information.
        var foldersToInclude = ['intents', 'types', 'scenes', 'global'];
        for (var _i = 0, foldersToInclude_1 = foldersToInclude; _i < foldersToInclude_1.length; _i++) {
            var folder = foldersToInclude_1[_i];
            var path = [modelPath, folder];
            if (locale !== this.$context.googleAssistant.defaultLocale) {
                path.push(locale);
            }
            var folderPath = joinPaths.apply(void 0, path);
            if (!existsSync(folderPath)) {
                continue;
            }
            var files = readdirSync(joinPaths.apply(void 0, path));
            if (folder === 'global') {
                files = files.filter(function (file) { return file.includes('actions.intent'); });
            }
            var yamlRegex = /.*\.yaml/;
            for (var _a = 0, files_1 = files; _a < files_1.length; _a++) {
                var file = files_1[_a];
                if (yamlRegex.test(file)) {
                    var fileContent = readFileSync(joinPaths.apply(void 0, __spreadArray(__spreadArray([], path, false), [file], false)), 'utf-8');
                    platformModels.push({
                        path: __spreadArray(__spreadArray([], path, true), [file], false),
                        content: yaml.parse(fileContent),
                    });
                }
            }
        }
        return platformModels;
    };
    /**
     * Parses platform-specific settings and returns the localized invocation name.
     * @param locale - Locale for which to parse the invocation name.
     */
    BuildHook.prototype.getPlatformInvocationName = function (locale) {
        var path = [this.$plugin.platformPath, 'settings'];
        if (locale !== this.$context.googleAssistant.defaultLocale) {
            path.push(locale);
        }
        var settingsPath = joinPaths.apply(void 0, __spreadArray(__spreadArray([], path, false), ['settings.yaml'], false));
        var settingsFile = readFileSync(settingsPath, 'utf-8');
        var settings = yaml.parse(settingsFile);
        return settings.localizedSettings.displayName;
    };
    /**
     * Returns all locales for the current platform.
     */
    BuildHook.prototype.getPlatformLocales = function () {
        var locales = [];
        var settingsPath = joinPaths(this.$plugin.platformPath, 'settings');
        var files = readdirSync(settingsPath);
        for (var _i = 0, files_2 = files; _i < files_2.length; _i++) {
            var file = files_2[_i];
            if (statSync(joinPaths(settingsPath, file)).isDirectory() &&
                /^[a-z]{2}-?([A-Z]{2})?$/.test(file)) {
                locales.push(file);
            }
            else if (file === 'settings.yaml') {
                var settings = yaml.parse(readFileSync(joinPaths(settingsPath, file), 'utf-8'));
                locales.push(settings.defaultLocale);
            }
        }
        return locales;
    };
    /**
     * Loads a Jovo model specified by a locale and merges it with plugin-specific models.
     * @param locale - The locale that specifies which model to load.
     */
    BuildHook.prototype.getJovoModel = function (locale) {
        return __awaiter(this, void 0, void 0, function () {
            var model;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$cli.project.getModel(locale)];
                    case 1:
                        model = _a.sent();
                        // Merge model with configured language model in project.js.
                        _mergeWith(model, this.$cli.project.config.getParameter("languageModel." + locale) || {}, mergeArrayCustomizer);
                        // Merge model with configured, platform-specific language model in project.js.
                        _mergeWith(model, _get(this.$plugin.config, "languageModel." + locale, {}), mergeArrayCustomizer);
                        return [2 /*return*/, model];
                }
            });
        });
    };
    return BuildHook;
}(PluginHook));
export { BuildHook };
//# sourceMappingURL=BuildHook.js.map