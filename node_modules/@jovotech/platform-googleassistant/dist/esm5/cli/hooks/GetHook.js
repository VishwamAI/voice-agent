var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { ANSWER_CANCEL, execAsync, flags, JovoCliError, PluginHook, printHighlight, promptOverwrite, Task, } from '@jovotech/cli-core';
import { existsSync, mkdirSync } from 'fs';
import _get from 'lodash.get';
import { checkForGactionsCli, getGactionsError } from '../utilities';
var GetHook = /** @class */ (function (_super) {
    __extends(GetHook, _super);
    function GetHook() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GetHook.prototype.install = function () {
        this.middlewareCollection = {
            'install': [this.addCliOptions.bind(this)],
            'before.get:platform': [
                this.checkForPlatform.bind(this),
                checkForGactionsCli,
                this.updatePluginContext.bind(this),
                this.checkForExistingPlatformFiles.bind(this),
            ],
            'get:platform': [this.get.bind(this)],
        };
    };
    /**
     * Add platform-specific CLI options, including flags and args.
     * @param context - Context providing an access point to command flags and args.
     */
    GetHook.prototype.addCliOptions = function (context) {
        if (context.command !== 'get:platform') {
            return;
        }
        context.flags['project-id'] = flags.string({
            description: 'Google Cloud Project ID',
        });
    };
    /**
     * Checks if the currently selected platform matches this CLI plugin.
     * @param context - Context containing information after flags and args have been parsed by the CLI.
     */
    GetHook.prototype.checkForPlatform = function () {
        // Check if this plugin should be used or not.
        if (!this.$context.platforms.includes(this.$plugin.id)) {
            this.uninstall();
        }
    };
    /**
     * Updates the current plugin context with platform-specific values.
     */
    GetHook.prototype.updatePluginContext = function () {
        if (!this.$context.googleAssistant) {
            this.$context.googleAssistant = {};
        }
        this.$context.googleAssistant.projectId =
            this.$context.flags['project-id'] || _get(this.$plugin.config, 'projectId');
        if (!this.$context.googleAssistant.projectId) {
            throw new JovoCliError({
                message: 'Could not find projectId.',
                module: 'GoogleAssistantCli',
                hint: 'Please provide a project id by using the flag "--project-id" or in your project configuration.',
            });
        }
    };
    /**
     * Checks if platform-specific files already exist and prompts for overwriting them.
     */
    GetHook.prototype.checkForExistingPlatformFiles = function () {
        return __awaiter(this, void 0, void 0, function () {
            var answer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(!this.$context.flags.clean && existsSync(this.$plugin.platformPath))) return [3 /*break*/, 2];
                        return [4 /*yield*/, promptOverwrite('Found existing GoogleAssistant project files. How to proceed?')];
                    case 1:
                        answer = _a.sent();
                        if (answer.overwrite === ANSWER_CANCEL) {
                            this.uninstall();
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Fetches platform-specific models, such as intents and entities from the Google Actions Console.
     */
    GetHook.prototype.get = function () {
        return __awaiter(this, void 0, void 0, function () {
            var getTask;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        getTask = new Task("Getting Conversational Actions Project " + printHighlight("(" + this.$context.googleAssistant.projectId + ")"), function () { return __awaiter(_this, void 0, void 0, function () {
                            var platformPath, error_1;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        platformPath = this.$plugin.platformPath;
                                        if (!existsSync(platformPath)) {
                                            mkdirSync(platformPath);
                                        }
                                        _a.label = 1;
                                    case 1:
                                        _a.trys.push([1, 3, , 4]);
                                        return [4 /*yield*/, execAsync("gactions pull --clean --force --project-id " + this.$context.googleAssistant.projectId + " --consumer jovo-cli", { cwd: platformPath })];
                                    case 2:
                                        _a.sent();
                                        return [3 /*break*/, 4];
                                    case 3:
                                        error_1 = _a.sent();
                                        throw getGactionsError(error_1.stderr);
                                    case 4: return [2 /*return*/];
                                }
                            });
                        }); });
                        return [4 /*yield*/, getTask.run()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return GetHook;
}(PluginHook));
export { GetHook };
//# sourceMappingURL=GetHook.js.map