var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { execAsync, JovoCliError, Log, LogLevel, PluginHook, printStage, ROCKET, Task, } from '@jovotech/cli-core';
import { existsSync } from 'fs';
import indent from 'indent-string';
import { checkForGactionsCli, getGactionsError } from '../utilities';
var DeployHook = /** @class */ (function (_super) {
    __extends(DeployHook, _super);
    function DeployHook() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeployHook.prototype.install = function () {
        this.middlewareCollection = {
            'before.deploy:platform': [
                this.checkForPlatform.bind(this),
                checkForGactionsCli,
                this.checkForPlatformsFolder.bind(this),
            ],
            'deploy:platform': [this.deploy.bind(this)],
        };
    };
    /**
     * Checks if the currently selected platform matches this CLI plugin.
     */
    DeployHook.prototype.checkForPlatform = function () {
        // Check if this plugin should be used or not.
        if (!this.$context.platforms.includes(this.$plugin.id)) {
            this.uninstall();
        }
    };
    /**
     * Checks if the platform folder for the current plugin exists.
     */
    DeployHook.prototype.checkForPlatformsFolder = function () {
        if (!existsSync(this.$plugin.platformPath)) {
            throw new JovoCliError({
                message: "Couldn't find the platform folder " + this.$plugin.platformPath + ".",
                module: this.$plugin.name,
                hint: "Please use \"jovo build\" to create platform-specific files.",
            });
        }
    };
    /**
     * Deploys platform-specific files, such as intents and entities to the Google Actions Console.
     */
    DeployHook.prototype.deploy = function () {
        return __awaiter(this, void 0, void 0, function () {
            var deployTask, pushProjectFilesTask;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        deployTask = new Task(ROCKET + " Deploying Conversational Action " + printStage(this.$cli.project.stage));
                        pushProjectFilesTask = new Task('Pushing project files', function () { return __awaiter(_this, void 0, void 0, function () {
                            var _a, stdout, stderr, validationErrorString, start, end, validationErrors, output, _i, validationErrors_1, validationError, error_1;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        _b.trys.push([0, 2, , 3]);
                                        return [4 /*yield*/, execAsync("gactions push --consumer jovo-cli", {
                                                cwd: this.$plugin.platformPath,
                                            })];
                                    case 1:
                                        _a = _b.sent(), stdout = _a.stdout, stderr = _a.stderr;
                                        if (stderr) {
                                            validationErrorString = '[WARNING] Server found validation issues';
                                            if (stderr.includes(validationErrorString) && stdout) {
                                                start = stdout.indexOf('Locale');
                                                end = stdout.indexOf('Done') - 3;
                                                validationErrors = stdout
                                                    .substring(start, end)
                                                    .split('\n')
                                                    .map(function (el) { return indent(el.trimEnd(), 2); });
                                                output = [
                                                    Log.warning('Validation errors occured', { dry: true, newLine: false }) || '',
                                                ];
                                                for (_i = 0, validationErrors_1 = validationErrors; _i < validationErrors_1.length; _i++) {
                                                    validationError = validationErrors_1[_i];
                                                    output.push(Log.info(validationError, { logLevel: LogLevel.Warn, dry: true, newLine: false }) ||
                                                        '');
                                                }
                                                return [2 /*return*/, output];
                                            }
                                        }
                                        return [3 /*break*/, 3];
                                    case 2:
                                        error_1 = _b.sent();
                                        throw getGactionsError(error_1.stderr);
                                    case 3: return [2 /*return*/];
                                }
                            });
                        }); });
                        deployTask.add(pushProjectFilesTask);
                        return [4 /*yield*/, deployTask.run()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return DeployHook;
}(PluginHook));
export { DeployHook };
//# sourceMappingURL=DeployHook.js.map