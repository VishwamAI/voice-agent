import { axios, JovoError, JovoUser } from '@jovotech/framework';
import _set from 'lodash.set';
import { AccountLinkingStatus, UserVerificationStatus } from './output';
export class GoogleAssistantUser extends JovoUser {
    get id() {
        var _a, _b;
        return (_b = (_a = this.jovo.$request.user) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b._GOOGLE_ASSISTANT_USER_ID_;
    }
    get accessToken() {
        const headers = this.jovo.$server.getRequestHeaders();
        return headers.authorization;
    }
    isAccountLinked() {
        var _a;
        return ((_a = this.jovo.$request.user) === null || _a === void 0 ? void 0 : _a.accountLinkingStatus) === AccountLinkingStatus.Linked;
    }
    isVerified() {
        var _a;
        return ((_a = this.jovo.$request.user) === null || _a === void 0 ? void 0 : _a.verificationStatus) === UserVerificationStatus.Verified;
    }
    // TODO: determine whether a method or setter is better
    setId(id) {
        _set(this.jovo.$request, 'user.params._GOOGLE_ASSISTANT_USER_ID_', id);
    }
    async getGoogleProfile() {
        const headers = this.jovo.$server.getRequestHeaders();
        const token = headers.authorization;
        if (!token) {
            throw new JovoError({
                message: 'No valid authorization token found.',
                hint: 'Make sure the authorization flow was completed.',
                // TODO: Docs link
                learnMore: '',
            });
        }
        try {
            const response = await axios.get(`https://oauth2.googleapis.com/tokeninfo?id_token=${token}`);
            return response.data;
        }
        catch (error) {
            throw new JovoError({ message: error.message });
        }
    }
}
//# sourceMappingURL=GoogleAssistantUser.js.map