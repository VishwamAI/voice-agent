var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ArrayMaxSize, IsArray, IsBoolean, IsNotEmpty, IsObject, IsOptional, IsString, IsUrl, MaxLength, Type, ValidateNested, } from '@jovotech/output';
import { SUGGESTIONS_MAX_SIZE, TEXT_MAX_LENGTH } from '../constants';
import { IsValidContentObject } from '../decorators/validation/IsValidContentObject';
import { Image } from './common/Image';
import { Link } from './common/Link';
import { Suggestion } from './common/Suggestion';
import { Card } from './content/Card';
import { Collection } from './content/Collection';
import { List } from './content/List';
import { Media } from './content/Media';
import { Table } from './content/Table';
export class Canvas {
}
__decorate([
    IsUrl({ protocols: ['https', 'http'] }),
    __metadata("design:type", String)
], Canvas.prototype, "url", void 0);
__decorate([
    IsOptional(),
    IsArray(),
    __metadata("design:type", Array)
], Canvas.prototype, "data", void 0);
__decorate([
    IsOptional(),
    IsBoolean(),
    __metadata("design:type", Boolean)
], Canvas.prototype, "suppressMic", void 0);
export class Simple {
    toMessage() {
        const message = {};
        if (this.text) {
            message.text = this.text;
        }
        if (this.speech) {
            message.speech = this.speech;
        }
        return message;
    }
}
__decorate([
    IsOptional(),
    IsString(),
    IsNotEmpty(),
    __metadata("design:type", String)
], Simple.prototype, "speech", void 0);
__decorate([
    IsOptional(),
    IsString(),
    IsNotEmpty(),
    MaxLength(TEXT_MAX_LENGTH),
    __metadata("design:type", String)
], Simple.prototype, "text", void 0);
export class Content {
}
__decorate([
    IsValidContentObject(),
    Type(() => Card),
    __metadata("design:type", Card)
], Content.prototype, "card", void 0);
__decorate([
    IsValidContentObject(),
    Type(() => Image),
    __metadata("design:type", Image)
], Content.prototype, "image", void 0);
__decorate([
    IsValidContentObject(),
    Type(() => Table),
    __metadata("design:type", Table)
], Content.prototype, "table", void 0);
__decorate([
    IsValidContentObject(),
    Type(() => Media),
    __metadata("design:type", Media)
], Content.prototype, "media", void 0);
__decorate([
    IsValidContentObject(),
    Type(() => Collection),
    __metadata("design:type", Collection)
], Content.prototype, "collection", void 0);
__decorate([
    IsValidContentObject(),
    Type(() => List),
    __metadata("design:type", List)
], Content.prototype, "list", void 0);
export class Prompt {
}
__decorate([
    IsOptional(),
    IsBoolean(),
    __metadata("design:type", Boolean)
], Prompt.prototype, "override", void 0);
__decorate([
    IsOptional(),
    ValidateNested(),
    Type(() => Simple),
    __metadata("design:type", Simple)
], Prompt.prototype, "firstSimple", void 0);
__decorate([
    IsOptional(),
    ValidateNested(),
    Type(() => Content),
    __metadata("design:type", Content)
], Prompt.prototype, "content", void 0);
__decorate([
    IsOptional(),
    ValidateNested(),
    Type(() => Simple),
    __metadata("design:type", Simple)
], Prompt.prototype, "lastSimple", void 0);
__decorate([
    IsOptional(),
    IsArray(),
    ArrayMaxSize(SUGGESTIONS_MAX_SIZE),
    ValidateNested({ each: true }),
    Type(() => Suggestion),
    __metadata("design:type", Array)
], Prompt.prototype, "suggestions", void 0);
__decorate([
    IsOptional(),
    ValidateNested(),
    Type(() => Link),
    __metadata("design:type", Link)
], Prompt.prototype, "link", void 0);
__decorate([
    IsOptional(),
    ValidateNested(),
    Type(() => Canvas),
    __metadata("design:type", Canvas)
], Prompt.prototype, "canvas", void 0);
__decorate([
    IsOptional(),
    IsObject(),
    __metadata("design:type", Object)
], Prompt.prototype, "orderUpdate", void 0);
//# sourceMappingURL=Prompt.js.map