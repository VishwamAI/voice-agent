var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { IsArray, IsEnum, IsNotEmpty, IsObject, IsOptional, IsString, Type, ValidateNested, } from '@jovotech/output';
import { Image } from './common/Image';
import { OpenUrl } from './common/OpenUrl';
export class EntryDisplay {
}
__decorate([
    IsString(),
    IsNotEmpty(),
    __metadata("design:type", String)
], EntryDisplay.prototype, "title", void 0);
__decorate([
    IsOptional(),
    IsString(),
    IsNotEmpty(),
    __metadata("design:type", String)
], EntryDisplay.prototype, "description", void 0);
__decorate([
    IsOptional(),
    ValidateNested(),
    Type(() => Image),
    __metadata("design:type", Image)
], EntryDisplay.prototype, "image", void 0);
__decorate([
    IsOptional(),
    IsString(),
    IsNotEmpty(),
    __metadata("design:type", String)
], EntryDisplay.prototype, "footer", void 0);
__decorate([
    IsOptional(),
    ValidateNested(),
    Type(() => OpenUrl),
    __metadata("design:type", OpenUrl)
], EntryDisplay.prototype, "openUrl", void 0);
export class Entry {
}
__decorate([
    IsString(),
    IsNotEmpty(),
    __metadata("design:type", String)
], Entry.prototype, "name", void 0);
__decorate([
    IsArray(),
    IsString({ each: true }),
    __metadata("design:type", Array)
], Entry.prototype, "synonyms", void 0);
__decorate([
    IsOptional(),
    ValidateNested(),
    Type(() => EntryDisplay),
    __metadata("design:type", EntryDisplay)
], Entry.prototype, "display", void 0);
export class SynonymType {
}
__decorate([
    IsArray(),
    ValidateNested({ each: true }),
    Type(() => Entry),
    __metadata("design:type", Array)
], SynonymType.prototype, "entries", void 0);
export var TypeOverrideMode;
(function (TypeOverrideMode) {
    TypeOverrideMode["Unspecified"] = "TYPE_UNSPECIFIED";
    TypeOverrideMode["Replace"] = "TYPE_REPLACE";
    TypeOverrideMode["Merge"] = "TYPE_MERGE";
})(TypeOverrideMode || (TypeOverrideMode = {}));
export class SessionParamsReprompts {
}
__decorate([
    IsOptional(),
    IsString(),
    IsNotEmpty(),
    __metadata("design:type", String)
], SessionParamsReprompts.prototype, "NO_INPUT_1", void 0);
__decorate([
    IsOptional(),
    IsString(),
    IsNotEmpty(),
    __metadata("design:type", String)
], SessionParamsReprompts.prototype, "NO_INPUT_2", void 0);
__decorate([
    IsOptional(),
    IsString(),
    IsNotEmpty(),
    __metadata("design:type", String)
], SessionParamsReprompts.prototype, "NO_INPUT_FINAL", void 0);
export class SessionParams {
}
__decorate([
    IsOptional(),
    IsObject(),
    ValidateNested(),
    Type(() => SessionParamsReprompts),
    __metadata("design:type", SessionParamsReprompts)
], SessionParams.prototype, "_GOOGLE_ASSISTANT_REPROMPTS_", void 0);
__decorate([
    IsOptional(),
    IsString(),
    IsNotEmpty(),
    __metadata("design:type", String)
], SessionParams.prototype, "_GOOGLE_ASSISTANT_SELECTION_INTENT_", void 0);
export class TypeOverride {
}
__decorate([
    IsString(),
    IsNotEmpty(),
    __metadata("design:type", String)
], TypeOverride.prototype, "name", void 0);
__decorate([
    IsEnum(TypeOverrideMode),
    __metadata("design:type", String)
], TypeOverride.prototype, "typeOverrideMode", void 0);
__decorate([
    IsOptional(),
    ValidateNested(),
    Type(() => SynonymType),
    __metadata("design:type", SynonymType)
], TypeOverride.prototype, "synonym", void 0);
export class Session {
}
__decorate([
    IsString(),
    __metadata("design:type", String)
], Session.prototype, "id", void 0);
__decorate([
    IsObject(),
    ValidateNested(),
    Type(() => SessionParams),
    __metadata("design:type", SessionParams)
], Session.prototype, "params", void 0);
__decorate([
    IsOptional(),
    IsArray(),
    ValidateNested({ each: true }),
    Type(() => TypeOverride),
    __metadata("design:type", Array)
], Session.prototype, "typeOverrides", void 0);
__decorate([
    IsString(),
    __metadata("design:type", String)
], Session.prototype, "languageCode", void 0);
//# sourceMappingURL=Session.js.map