import { DeployPlatformEvents } from '@jovotech/cli-command-deploy';
import { CliArgs, CliFlags, EventEmitter, flags, JovoCli, PluginCommand, PluginContext } from '@jovotech/cli-core';
import BuildCommand from '..';
export interface BuildPlatformContext extends PluginContext {
    args: CliArgs<typeof BuildPlatform>;
    flags: CliFlags<typeof BuildPlatform>;
    platforms: string[];
    locales: string[];
}
export declare type BuildPlatformEvents = 'before.build:platform' | 'build:platform' | 'build:platform.reverse' | 'after.build:platform';
export declare class BuildPlatform extends PluginCommand<BuildPlatformEvents | DeployPlatformEvents> {
    static id: string;
    static description: string;
    static examples: string[];
    static availablePlatforms: string[];
    static flags: {
        stage: flags.IOptionFlag<string | undefined>;
        debug: import("@oclif/parser/lib/flags").IBooleanFlag<void>;
        clean: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        deploy: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        locale: flags.IOptionFlag<string[]>;
        reverse: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
    };
    static args: {
        readonly name: "platform";
        readonly description: "Specifies a build platform";
        readonly options: string[];
        readonly multiple: true;
    }[];
    static strict: boolean;
    $context: BuildPlatformContext;
    static install(cli: JovoCli, plugin: BuildCommand, emitter: EventEmitter<BuildPlatformEvents>): void;
    install(): void;
    prepareBuild(): Promise<void>;
    run(): Promise<void>;
}
