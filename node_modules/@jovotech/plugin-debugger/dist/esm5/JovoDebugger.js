var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { App, BuiltInHandler, HandleRequest, InvalidParentError, Jovo, Plugin, } from '@jovotech/framework';
import { NlpjsNlu } from '@jovotech/nlu-nlpjs';
import { CorePlatform } from '@jovotech/platform-core';
import { LangDe } from '@nlpjs/lang-de';
import { LangEn } from '@nlpjs/lang-en';
import { LangEs } from '@nlpjs/lang-es';
import { LangFr } from '@nlpjs/lang-fr';
import { LangIt } from '@nlpjs/lang-it';
import isEqual from 'fast-deep-equal/es6';
import { promises } from 'fs';
import { homedir } from 'os';
import { join, resolve } from 'path';
import { cwd } from 'process';
import { connect } from 'socket.io-client';
import { inspect } from 'util';
import { v4 as uuidV4 } from 'uuid';
import { STATE_MUTATING_METHOD_KEYS } from './constants';
import { DebuggerConfig } from './DebuggerConfig';
import { JovoDebuggerEvent } from './enums';
import { LanguageModelDirectoryNotFoundError } from './errors/LanguageModelDirectoryNotFoundError';
import { SocketConnectionFailedError } from './errors/SocketConnectionFailedError';
import { SocketNotConnectedError } from './errors/SocketNotConnectedError';
import { WebhookIdNotFoundError } from './errors/WebhookIdNotFoundError';
import { MockServer } from './MockServer';
import _cloneDeep from 'lodash.clonedeep';
export function getDefaultLanguageMap() {
    return {
        de: LangDe,
        en: LangEn,
        es: LangEs,
        fr: LangFr,
        it: LangIt,
    };
}
export var DEFAULT_INCLUDED_PROPERTIES = [
    '$request',
    '$id',
    '$input',
    '$history',
    '$device',
    '$session',
    '$entities',
    '$cms',
    '$route',
    '$user',
    '$data',
    '$output',
    '$response',
];
var JovoDebuggerPlatform = /** @class */ (function (_super) {
    __extends(JovoDebuggerPlatform, _super);
    function JovoDebuggerPlatform() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return JovoDebuggerPlatform;
}(CorePlatform));
export { JovoDebuggerPlatform };
var JovoDebugger = /** @class */ (function (_super) {
    __extends(JovoDebugger, _super);
    function JovoDebugger(config) {
        var _this = _super.call(this, config) || this;
        _this.hasOverriddenWrite = false;
        _this.hasShownConnectionError = false;
        if ((config === null || config === void 0 ? void 0 : config.includedProperties) && (config === null || config === void 0 ? void 0 : config.ignoredProperties)) {
            throw new Error('You can only use either `includedProperties` or `ignoredProperties`, not both.');
        }
        if (config === null || config === void 0 ? void 0 : config.includedProperties) {
            _this.config.ignoredProperties = [];
        }
        if (config === null || config === void 0 ? void 0 : config.ignoredProperties) {
            _this.config.includedProperties = [];
        }
        return _this;
    }
    JovoDebugger.prototype.getDefaultConfig = function () {
        return {
            skipTests: true,
            nlu: new NlpjsNlu({
                languageMap: getDefaultLanguageMap(),
            }),
            webhookUrl: 'https://webhook.jovo.cloud',
            enabled: (process.argv.includes('--jovo-webhook') || process.argv.includes('--webhook')) &&
                !process.argv.includes('--disable-jovo-debugger'),
            debuggerConfigPath: './jovo.debugger.js',
            modelsPath: './models',
            ignoredProperties: ['$app', '$handleRequest', '$platform'],
            includedProperties: DEFAULT_INCLUDED_PROPERTIES,
            plugins: [],
        };
    };
    JovoDebugger.prototype.install = function (parent) {
        if (!(parent instanceof App)) {
            throw new InvalidParentError(this.name, App);
        }
        this.installDebuggerPlatform(parent);
    };
    JovoDebugger.prototype.installDebuggerPlatform = function (app) {
        var plugins = this.config.plugins || [];
        app.use(new JovoDebuggerPlatform({
            platform: 'jovo-debugger',
            plugins: __spreadArray([this.config.nlu], plugins, true),
        }));
    };
    JovoDebugger.prototype.initialize = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.config.enabled === false)
                            return [2 /*return*/];
                        _a = this;
                        return [4 /*yield*/, this.connectToWebhook()];
                    case 1:
                        _a.socket = _b.sent();
                        this.socket.on(JovoDebuggerEvent.DebuggingAvailable, function () {
                            return _this.onDebuggingAvailable();
                        });
                        this.socket.on(JovoDebuggerEvent.DebuggerRequest, function (requestData) {
                            return _this.onReceiveRequest(app, { data: requestData });
                        });
                        this.socket.on(JovoDebuggerEvent.ServerRequest, function (request) {
                            return _this.onReceiveRequest(app, request);
                        });
                        this.augmentServerForApp(app);
                        this.patchHandleRequestToIncludeUniqueId();
                        this.patchPlatformsToCreateJovoAsProxy(app.platforms);
                        return [2 /*return*/];
                }
            });
        });
    };
    JovoDebugger.prototype.mount = function (parent) {
        var _this = this;
        var _a;
        this.augmentServerForRequest(parent);
        // Because the socket does not work properly after being cloned, the instance from the app plugin has to be used
        this.socket = (_a = parent.app.plugins.JovoDebugger) === null || _a === void 0 ? void 0 : _a.socket;
        parent.middlewareCollection.use('request.start', function (jovo) {
            return _this.onRequest(jovo);
        });
    };
    JovoDebugger.prototype.emitUpdate = function (requestId, data) {
        var _a;
        var payload = {
            requestId: requestId,
            data: data,
        };
        if (this.config.includedProperties.length > 0 && !this.isPathIncluded(data.path)) {
            return;
        }
        (_a = this.socket) === null || _a === void 0 ? void 0 : _a.emit(JovoDebuggerEvent.AppJovoUpdate, payload);
    };
    JovoDebugger.prototype.emitStateMutation = function (requestId, data) {
        var _a;
        var payload = {
            requestId: requestId,
            data: data,
        };
        if (this.config.includedProperties.length > 0 && !this.isPathIncluded(data.key)) {
            return;
        }
        (_a = this.socket) === null || _a === void 0 ? void 0 : _a.emit(JovoDebuggerEvent.AppStateMutation, payload);
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/explicit-module-boundary-types
    JovoDebugger.prototype.emitResponse = function (response, requestId) {
        if (!this.socket) {
            return this.onSocketNotConnected();
        }
        var payload = {
            requestId: requestId,
            data: response,
        };
        this.socket.emit(JovoDebuggerEvent.AppResponse, payload);
    };
    JovoDebugger.prototype.isPathIncluded = function (path) {
        var nKey = path.split('.').length > 0 ? path.split('.')[0] : path;
        return this.config.includedProperties.includes(nKey);
    };
    // Augment the server given in app.handle to emit a response event when setResponse is called
    JovoDebugger.prototype.augmentServerForApp = function (app) {
        var _this = this;
        var handle = app.handle;
        app.handle = function (server) {
            if (!server.__augmented) {
                var setResponse_1 = server.setResponse;
                server.originalSetResponse = setResponse_1;
                server.setResponse = function (response) {
                    _this.emitResponse(response);
                    return setResponse_1.call(server, response);
                };
                server.__augmented = true;
            }
            return handle.call(app, server);
        };
    };
    // Augment the server of HandleRequest to emit a response with a debugger request id if setResponse is called.
    // If the server was already augmented by augmentServerForApp, the original method will be used instead of the already augmented one.
    JovoDebugger.prototype.augmentServerForRequest = function (handleRequest) {
        var _this = this;
        var serverCopy = Object.create(handleRequest.server);
        for (var prop in handleRequest.server) {
            if (handleRequest.server.hasOwnProperty(prop)) {
                serverCopy[prop] = handleRequest.server[prop];
            }
        }
        var setResponse = (serverCopy.__augmented && serverCopy.originalSetResponse) || serverCopy.setResponse;
        serverCopy.setResponse = function (response) {
            _this.emitResponse(response, handleRequest.debuggerRequestId);
            return setResponse.call(serverCopy, response);
        };
        Object.defineProperty(handleRequest, 'server', {
            value: serverCopy,
        });
    };
    JovoDebugger.prototype.patchHandleRequestToIncludeUniqueId = function () {
        // this cannot be done in a middleware-hook because the debuggerRequestId is required when initializing the jovo instance
        // and that happens before the middlewares are executed
        var mount = HandleRequest.prototype.mount;
        HandleRequest.prototype.mount = function () {
            this.debuggerRequestId = uuidV4();
            return mount.call(this);
        };
    };
    JovoDebugger.prototype.patchPlatformsToCreateJovoAsProxy = function (platforms) {
        var _this = this;
        platforms.forEach(function (platform) {
            var createJovoFn = platform.createJovoInstance;
            // overwrite createJovoInstance to create a proxy and propagate all initial changes
            platform.createJovoInstance = function (app, handleRequest) {
                var jovo = createJovoFn.call(platform, app, handleRequest);
                // propagate initial values, might not be required, TBD
                for (var key in jovo) {
                    if (!jovo.hasOwnProperty(key)) {
                        continue;
                    }
                    var value = jovo[key];
                    var isEmptyObject = typeof value === 'object' && !Array.isArray(value) && !Object.keys(value || {}).length;
                    var isEmptyArray = Array.isArray(value) && !(value || []).length;
                    var isInvalid = !value || isEmptyObject || isEmptyArray;
                    if (_this.config.ignoredProperties.includes(key) || isInvalid) {
                        continue;
                    }
                    _this.emitUpdate(handleRequest.debuggerRequestId, {
                        key: key,
                        value: value,
                        path: key,
                    });
                }
                return new Proxy(jovo, _this.createObjectProxyHandler(handleRequest));
            };
        });
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    JovoDebugger.prototype.createObjectProxyHandler = function (handleRequest, currentPath) {
        var _this = this;
        if (currentPath === void 0) { currentPath = ''; }
        function getCompletePropertyPath(key, path) {
            return path ? [path, key].join('.') : key;
        }
        // class Foo { bar: string} -> new Proxy(new Foo(), { get() {...}})
        return {
            get: function (target, key) {
                var stringKey = key.toString();
                // make __isProxy return true for all proxies with this handler
                if (stringKey === '__isProxy') {
                    return true;
                }
                // provide a reference to the original target of the proxy
                if (stringKey === '__target') {
                    return target;
                }
                var value = target[key];
                var completePropertyPath = getCompletePropertyPath(stringKey, currentPath);
                // if the value is a function and a state mutating method
                if (typeof value === 'function' &&
                    Array.from(STATE_MUTATING_METHOD_KEYS).includes(stringKey)) {
                    return new Proxy(target[key], _this.createStateMutationProxyHandler(handleRequest, stringKey));
                }
                var isSupportedObject = value &&
                    typeof value === 'object' &&
                    !(value instanceof Date) &&
                    !(value instanceof Jovo);
                var shouldCreateProxy = value && !value.__isProxy && !_this.config.ignoredProperties.includes(stringKey);
                // if the value is a supported object and not ignored, nor a proxy already
                if (isSupportedObject && shouldCreateProxy) {
                    // create the proxy for the value
                    var proxy = new Proxy(value, _this.createObjectProxyHandler(handleRequest, completePropertyPath));
                    // check if the property is writable, if it's not, return the proxy
                    var propertyDescriptor = Object.getOwnPropertyDescriptor(target, key);
                    if (!(propertyDescriptor === null || propertyDescriptor === void 0 ? void 0 : propertyDescriptor.writable)) {
                        return proxy;
                    }
                    // otherwise overwrite the property and set it to the proxy
                    target[key] = proxy;
                }
                return target[key];
            },
            set: function (target, key, value) {
                var previousValue = target[key];
                target[key] = value;
                var stringKey = key.toString();
                // only emit changes
                if (!isEqual(previousValue, value) && !_this.config.ignoredProperties.includes(stringKey)) {
                    var stringKey_1 = key.toString();
                    _this.emitUpdate(handleRequest.debuggerRequestId, {
                        key: stringKey_1,
                        value: value,
                        previousValue: previousValue,
                        path: getCompletePropertyPath(stringKey_1, currentPath),
                    });
                }
                return true;
            },
            deleteProperty: function (target, key) {
                var stringKey = key.toString();
                var copy = _cloneDeep(target);
                delete copy[key];
                _this.emitUpdate(handleRequest.debuggerRequestId, {
                    key: stringKey,
                    value: copy,
                    previousValue: target,
                    path: currentPath,
                });
                return true;
            },
        };
    };
    JovoDebugger.prototype.createStateMutationProxyHandler = function (handleRequest, key) {
        var _this = this;
        return {
            // Parameters<Jovo[KEY]> sadly only returns the parameters of the method without generics, therefore unknown[] is used
            apply: function (target, thisArg, argArray) {
                var mutationData = _this.getStateMutationData(handleRequest, key, thisArg, argArray);
                if (mutationData) {
                    _this.emitStateMutation(handleRequest.debuggerRequestId, mutationData);
                }
                return target.apply(thisArg, argArray);
            },
        };
    };
    JovoDebugger.prototype.getStateMutationData = function (handleRequest, key, jovo, args) {
        var _a;
        var node;
        var handler = BuiltInHandler.Start;
        if (key === '$redirect' || key === '$delegate') {
            var componentName = typeof args[0] === 'function' && 'name' in args[0] ? args[0].name : args[0];
            node = handleRequest.componentTree.getNodeRelativeTo(componentName, (_a = handleRequest.activeComponentNode) === null || _a === void 0 ? void 0 : _a.path);
            handler = typeof args[1] === 'string' ? args[1] : JSON.stringify(args[1], undefined, 2);
        }
        else if (key === '$resolve') {
            if (!jovo.$state) {
                return;
            }
            var currentStateStackItem = jovo.$state[jovo.$state.length - 1];
            var previousStateStackItem = jovo.$state[jovo.$state.length - 2];
            // make sure the state-stack exists and it long enough
            if (!(currentStateStackItem === null || currentStateStackItem === void 0 ? void 0 : currentStateStackItem.resolve) || !previousStateStackItem) {
                return;
            }
            var previousComponentPath = previousStateStackItem.component.split('.');
            node = handleRequest.componentTree.getNodeAt(previousComponentPath);
            handler = currentStateStackItem.resolve[args[0]];
        }
        if (!node) {
            return;
        }
        return {
            key: key,
            to: {
                path: node.path.join('.'),
                handler: handler,
            },
        };
    };
    JovoDebugger.prototype.onConnected = function () {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var color, blueText, underlineColor, underline, webhookId, debuggerUrl;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        color = (_a = inspect.colors['blue']) !== null && _a !== void 0 ? _a : [0, 0];
                        blueText = function (str) { return "\u001B[" + color[0] + "m" + str + "\u001B[" + color[1] + "m"; };
                        underlineColor = (_b = inspect.colors['underline']) !== null && _b !== void 0 ? _b : [0, 0];
                        underline = function (str) {
                            return "\u001B[" + underlineColor[0] + "m" + str + "\u001B[" + underlineColor[1] + "m";
                        };
                        return [4 /*yield*/, this.retrieveLocalWebhookId()];
                    case 1:
                        webhookId = _c.sent();
                        debuggerUrl = this.config.webhookUrl + "/" + webhookId;
                        // eslint-disable-next-line no-console
                        console.log('\nThis is your webhook url ☁️ ' + underline(blueText(debuggerUrl)));
                        return [2 /*return*/];
                }
            });
        });
    };
    JovoDebugger.prototype.onDebuggingAvailable = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.socket) {
                            return [2 /*return*/, this.onSocketNotConnected()];
                        }
                        return [4 /*yield*/, this.emitDebuggerConfig()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.emitLanguageModelIfEnabled()];
                    case 2:
                        _a.sent();
                        if (!this.hasOverriddenWrite) {
                            // disable logging events for now because they are not shown anyways
                            // propagateStreamAsLog(process.stdout, this.socket);
                            // propagateStreamAsLog(process.stderr, this.socket);
                            this.hasOverriddenWrite = true;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    JovoDebugger.prototype.onReceiveRequest = function (app, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, app.handle(new MockServer(request))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    JovoDebugger.prototype.onRequest = function (jovo) {
        if (!this.socket) {
            return this.onSocketNotConnected();
        }
        var payload = {
            requestId: jovo.$handleRequest.debuggerRequestId,
            data: jovo.$request,
        };
        this.socket.emit(JovoDebuggerEvent.AppRequest, payload);
    };
    JovoDebugger.prototype.emitLanguageModelIfEnabled = function () {
        return __awaiter(this, void 0, void 0, function () {
            var languageModel, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.config.modelsPath) {
                            return [2 /*return*/];
                        }
                        if (!this.socket) {
                            return [2 /*return*/, this.onSocketNotConnected()];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.loadLanguageModel()];
                    case 2:
                        languageModel = _a.sent();
                        if (!languageModel) {
                            return [2 /*return*/];
                        }
                        this.socket.emit(JovoDebuggerEvent.AppLanguageModelResponse, languageModel);
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        return [2 /*return*/];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    // Return the language models found at the configured location
    JovoDebugger.prototype.loadLanguageModel = function () {
        return __awaiter(this, void 0, void 0, function () {
            var languageModel, absoluteModelsPath, files, e_2, isValidFileRegex, i, len, match, locale, absoluteFilePath, fileBuffer, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        languageModel = {};
                        absoluteModelsPath = resolve(cwd(), this.config.modelsPath);
                        files = [];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, promises.readdir(absoluteModelsPath)];
                    case 2:
                        files = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_2 = _a.sent();
                        // eslint-disable-next-line no-console
                        console.warn(new LanguageModelDirectoryNotFoundError(absoluteModelsPath));
                        return [2 /*return*/];
                    case 4:
                        isValidFileRegex = /^.*([.]js(?:on)?)$/;
                        i = 0, len = files.length;
                        _a.label = 5;
                    case 5:
                        if (!(i < len)) return [3 /*break*/, 12];
                        match = isValidFileRegex.exec(files[i]);
                        if (!match) {
                            return [3 /*break*/, 11];
                        }
                        locale = files[i].substring(0, files[i].indexOf(match[1]));
                        absoluteFilePath = join(absoluteModelsPath, files[i]);
                        if (!(match[1] === '.json')) return [3 /*break*/, 10];
                        _a.label = 6;
                    case 6:
                        _a.trys.push([6, 8, , 9]);
                        return [4 /*yield*/, promises.readFile(absoluteFilePath)];
                    case 7:
                        fileBuffer = _a.sent();
                        languageModel[locale] = JSON.parse(fileBuffer.toString());
                        return [3 /*break*/, 9];
                    case 8:
                        e_3 = _a.sent();
                        // eslint-disable-next-line no-console
                        console.error(e_3);
                        return [3 /*break*/, 9];
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        languageModel[locale] = this.requireUncached(absoluteModelsPath);
                        _a.label = 11;
                    case 11:
                        i++;
                        return [3 /*break*/, 5];
                    case 12: return [2 /*return*/, languageModel];
                }
            });
        });
    };
    JovoDebugger.prototype.emitDebuggerConfig = function () {
        return __awaiter(this, void 0, void 0, function () {
            var debuggerConfig, e_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.config.debuggerConfigPath) {
                            return [2 /*return*/];
                        }
                        if (!this.socket) {
                            return [2 /*return*/, this.onSocketNotConnected()];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.loadDebuggerConfig()];
                    case 2:
                        debuggerConfig = _a.sent();
                        this.socket.emit(JovoDebuggerEvent.AppDebuggerConfigResponse, debuggerConfig);
                        return [3 /*break*/, 4];
                    case 3:
                        e_4 = _a.sent();
                        return [2 /*return*/];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    // Return the debugger config at the configured location or return a default config.
    JovoDebugger.prototype.loadDebuggerConfig = function () {
        return __awaiter(this, void 0, void 0, function () {
            var absoluteDebuggerConfigPath;
            return __generator(this, function (_a) {
                try {
                    absoluteDebuggerConfigPath = resolve(cwd(), this.config.debuggerConfigPath);
                    return [2 /*return*/, this.requireUncached(absoluteDebuggerConfigPath)];
                }
                catch (e) {
                    // eslint-disable-next-line no-console
                    console.info('Error occurred while loading debugger-config, using default config.');
                    return [2 /*return*/, new DebuggerConfig()];
                }
                return [2 /*return*/];
            });
        });
    };
    JovoDebugger.prototype.connectToWebhook = function () {
        return __awaiter(this, void 0, void 0, function () {
            var webhookId, socket;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.retrieveLocalWebhookId()];
                    case 1:
                        webhookId = _a.sent();
                        socket = connect(this.config.webhookUrl, {
                            query: {
                                id: webhookId,
                                type: 'app',
                            },
                        });
                        socket.on('connect', function () {
                            _this.hasShownConnectionError = false;
                            _this.onConnected();
                        });
                        socket.on('connect_error', function (error) {
                            if (!_this.hasShownConnectionError) {
                                // eslint-disable-next-line no-console
                                console.warn(new SocketConnectionFailedError(_this.config.webhookUrl, error).message);
                                _this.hasShownConnectionError = true;
                            }
                        });
                        return [2 /*return*/, socket];
                }
            });
        });
    };
    JovoDebugger.prototype.retrieveLocalWebhookId = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var homeConfigPath, homeConfigBuffer, homeConfigData, e_5;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        homeConfigPath = resolve(homedir(), '.jovo/config');
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, promises.readFile(homeConfigPath)];
                    case 2:
                        homeConfigBuffer = _b.sent();
                        homeConfigData = JSON.parse(homeConfigBuffer.toString());
                        if ((_a = homeConfigData === null || homeConfigData === void 0 ? void 0 : homeConfigData.webhook) === null || _a === void 0 ? void 0 : _a.uuid) {
                            return [2 /*return*/, homeConfigData.webhook.uuid];
                        }
                        throw new Error();
                    case 3:
                        e_5 = _b.sent();
                        throw new WebhookIdNotFoundError(homeConfigPath);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    JovoDebugger.prototype.onSocketNotConnected = function () {
        // eslint-disable-next-line no-console
        console.warn(new SocketNotConnectedError(this.config.webhookUrl).message);
    };
    // Require the module and clear cache if there is any
    // This is useful for being able to use changed js-files
    JovoDebugger.prototype.requireUncached = function (module) {
        delete require.cache[require.resolve(module)];
        return require(module);
    };
    return JovoDebugger;
}(Plugin));
export { JovoDebugger };
//# sourceMappingURL=JovoDebugger.js.map