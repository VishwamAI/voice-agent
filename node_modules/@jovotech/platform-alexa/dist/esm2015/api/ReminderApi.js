import { JovoError } from '@jovotech/framework';
import { AlexaApiError, AlexaApiErrorCode, sendApiRequest, } from './AlexaApi';
export async function setReminder(reminder, apiEndpoint, permissionToken) {
    const options = {
        endpoint: apiEndpoint,
        path: '/v1/alerts/reminders',
        permissionToken,
        data: reminder,
        method: 'POST',
    };
    try {
        const response = await sendApiRequest(options);
        return response.data;
    }
    catch (error) {
        handleReminderApiErrors(error);
    }
    throw new Error('Unexpected error.');
}
export async function updateReminder(alertToken, reminder, apiEndpoint, permissionToken) {
    const options = {
        endpoint: apiEndpoint,
        path: `/v1/alerts/reminders/${alertToken}`,
        permissionToken,
        data: reminder,
        method: 'PUT',
    };
    try {
        const response = await sendApiRequest(options);
        return response.data;
    }
    catch (error) {
        handleReminderApiErrors(error);
    }
    throw new Error('Unexpected error.');
}
export async function deleteReminder(alertToken, apiEndpoint, permissionToken) {
    const options = {
        endpoint: apiEndpoint,
        path: `/v1/alerts/reminders/${alertToken}`,
        permissionToken,
        method: 'DELETE',
    };
    try {
        const response = await sendApiRequest(options);
        return response.data;
    }
    catch (error) {
        handleReminderApiErrors(error);
    }
    throw new Error('Unexpected error.');
}
export async function getAllReminders(apiEndpoint, permissionToken) {
    const options = {
        endpoint: apiEndpoint,
        path: '/v1/alerts/reminders',
        permissionToken,
        method: 'GET',
    };
    try {
        const response = await sendApiRequest(options);
        // The value for totalCount from the API is a string.
        return Object.assign(Object.assign({}, response.data), { totalCount: Number(response.data.totalCount) });
    }
    catch (error) {
        handleReminderApiErrors(error);
    }
    throw new Error('Unexpected error.');
}
export async function getReminder(alertToken, apiEndpoint, permissionToken) {
    const options = {
        endpoint: apiEndpoint,
        path: `/v1/alerts/reminders/${alertToken}`,
        permissionToken,
        method: 'GET',
    };
    try {
        const response = await sendApiRequest(options);
        return response.data;
    }
    catch (error) {
        handleReminderApiErrors(error);
    }
    throw new Error('Unexpected error.');
}
// TODO: needs to be refactored after completion of all Alexa APIs
export function handleReminderApiErrors(error) {
    var _a, _b;
    if (error.isAxiosError) {
        const { message, code } = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data;
        let errorCode = AlexaApiErrorCode.ERROR;
        if (((_b = error.response) === null || _b === void 0 ? void 0 : _b.status) === 401) {
            errorCode = AlexaApiErrorCode.NO_USER_PERMISSION;
        }
        if (code === AlexaApiErrorCode.DEVICE_NOT_SUPPORTED ||
            code === AlexaApiErrorCode.ALERT_NOT_FOUND) {
            errorCode = code;
        }
        // User needs to grant access in app
        if (message === 'The authentication token is not valid.' ||
            message === 'Access to this resource has not yet been requested.' ||
            (code === 'ACCESS_DENIED' && message === 'Access denied with reason: ACCESS_NOT_REQUESTED')) {
            errorCode = AlexaApiErrorCode.NO_USER_PERMISSION;
        }
        // Dev needs to set correct permissions in ASK console
        if (message === 'Access to this resource cannot be requested.' ||
            (code === 'ACCESS_DENIED' && message === 'Access denied with reason: FORBIDDEN')) {
            errorCode = AlexaApiErrorCode.NO_SKILL_PERMISSION;
        }
        throw new AlexaApiError({ message, code: errorCode });
    }
    throw new JovoError({ message: error.message });
}
//# sourceMappingURL=ReminderApi.js.map