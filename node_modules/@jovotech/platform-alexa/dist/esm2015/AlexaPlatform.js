import { Platform, } from '@jovotech/framework';
import { Alexa } from './Alexa';
import { AlexaDevice } from './AlexaDevice';
import { AlexaRequest } from './AlexaRequest';
import { AlexaRequestBuilder } from './AlexaRequestBuilder';
import { AlexaUser } from './AlexaUser';
import { AlexaOutputTemplateConverterStrategy } from './output';
export class AlexaPlatform extends Platform {
    constructor() {
        super(...arguments);
        this.id = 'alexa';
        this.outputTemplateConverterStrategy = new AlexaOutputTemplateConverterStrategy();
        this.requestClass = AlexaRequest;
        this.jovoClass = Alexa;
        this.userClass = AlexaUser;
        this.deviceClass = AlexaDevice;
        this.requestBuilder = AlexaRequestBuilder;
    }
    getDefaultConfig() {
        return {
            intentMap: {
                'AMAZON.StopIntent': 'END',
                'AMAZON.CancelIntent': 'END',
            },
            output: {
                genericOutputToApl: true,
            },
        };
    }
    getInitConfig() {
        return {
            intentMap: {
                'AMAZON.StopIntent': 'END',
                'AMAZON.CancelIntent': 'END',
            },
        };
    }
    mount(parent) {
        super.mount(parent);
        this.middlewareCollection.use('request.start', (jovo) => {
            return this.onRequestStart(jovo);
        });
    }
    isRequestRelated(request) {
        return request.version && request.request && request.request.requestId;
    }
    isResponseRelated(response) {
        return response.version && response.response;
    }
    finalizeResponse(response, alexaSkill) {
        response.sessionAttributes = alexaSkill.$session;
        return response;
    }
    onRequestStart(jovo) {
        var _a, _b, _c, _d;
        // Generate generic output to APL if supported and set in config
        this.outputTemplateConverterStrategy.config.genericOutputToApl = !!(((_b = (_a = jovo.$alexa) === null || _a === void 0 ? void 0 : _a.$request) === null || _b === void 0 ? void 0 : _b.isAplSupported()) && ((_c = this.config.output) === null || _c === void 0 ? void 0 : _c.genericOutputToApl));
        this.outputTemplateConverterStrategy.config.aplTemplates = (_d = this.config.output) === null || _d === void 0 ? void 0 : _d.aplTemplates;
    }
}
//# sourceMappingURL=AlexaPlatform.js.map