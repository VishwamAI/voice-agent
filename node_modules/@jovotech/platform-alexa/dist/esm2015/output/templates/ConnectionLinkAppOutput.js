var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { BaseOutput, Output } from '@jovotech/framework';
import { OnCompletion } from '../models/common/OnCompletion';
import { StartConnectionOutput } from './StartConnectionOutput';
export var DirectLaunchDefaultPromptBehavior;
(function (DirectLaunchDefaultPromptBehavior) {
    DirectLaunchDefaultPromptBehavior["Speak"] = "SPEAK";
    DirectLaunchDefaultPromptBehavior["Suppress"] = "SUPPRESS";
})(DirectLaunchDefaultPromptBehavior || (DirectLaunchDefaultPromptBehavior = {}));
let ConnectionLinkAppOutput = class ConnectionLinkAppOutput extends BaseOutput {
    getDefaultOptions() {
        return {
            onCompletion: OnCompletion.ResumeSession,
            topic: '',
            links: {},
            sendToDeviceEnabled: true,
            directLaunchEnabled: true,
        };
    }
    build() {
        return new StartConnectionOutput(this.jovo, {
            taskName: {
                name: 'LinkApp',
            },
            taskVersion: 2,
            shouldEndSession: this.options.shouldEndSession,
            onCompletion: this.options.onCompletion,
            input: {
                links: this.options.links,
                prompt: {
                    topic: this.options.topic,
                    directLaunchDefaultPromptBehavior: this.options.directLaunchDefaultPromptBehavior,
                },
                directLaunch: {
                    enabled: this.options.directLaunchEnabled,
                },
                sendToDevice: {
                    enabled: this.options.sendToDeviceEnabled,
                },
            },
            token: this.options.token,
        }).build();
    }
};
ConnectionLinkAppOutput = __decorate([
    Output()
], ConnectionLinkAppOutput);
export { ConnectionLinkAppOutput };
//# sourceMappingURL=ConnectionLinkAppOutput.js.map