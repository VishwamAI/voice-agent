var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { BaseOutput, Output } from '@jovotech/framework';
import { OnCompletion } from '../models/common/OnCompletion';
import { StartConnectionOutput } from './StartConnectionOutput';
let ConnectionAskForPermissionConsentOutput = class ConnectionAskForPermissionConsentOutput extends BaseOutput {
    getDefaultOptions() {
        return {
            onCompletion: OnCompletion.ResumeSession,
            permissionScopes: [],
        };
    }
    build() {
        return new StartConnectionOutput(this.jovo, {
            taskName: { name: 'AskForPermissionsConsent', amazonPredefinedTask: true },
            taskVersion: 2,
            shouldEndSession: this.options.shouldEndSession,
            onCompletion: this.options.onCompletion,
            input: {
                '@type': 'AskForPermissionsConsentRequest',
                '@version': '2',
                'permissionScopes': this.options.permissionScopes,
            },
            token: this.options.token,
        }).build();
    }
};
ConnectionAskForPermissionConsentOutput = __decorate([
    Output()
], ConnectionAskForPermissionConsentOutput);
export { ConnectionAskForPermissionConsentOutput };
//# sourceMappingURL=ConnectionAskForPermissionConsentOutput.js.map