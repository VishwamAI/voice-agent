import { SsmlUtilities } from '@jovotech/common';
import { Card, Carousel, Message, } from '@jovotech/output';
import AplCardJson from './apl/Card.json';
import AplCarouselJson from './apl/Carousel.json';
import { ALEXA_STRING_MAX_LENGTH } from './constants';
import { CardType, OutputSpeechType, } from './models';
export function validateAlexaString(value) {
    if (typeof value !== 'string') {
        return '$property must be a string';
    }
    if (!value) {
        return '$property should not be empty';
    }
    if (value.length > ALEXA_STRING_MAX_LENGTH) {
        return `$property can not exceed ${ALEXA_STRING_MAX_LENGTH} characters`;
    }
    return;
}
export function convertMessageToOutputSpeech(message) {
    if (typeof message === 'string') {
        return {
            type: OutputSpeechType.Ssml,
            ssml: SsmlUtilities.toSSML(message),
        };
    }
    if (message.speech) {
        return {
            type: OutputSpeechType.Ssml,
            ssml: SsmlUtilities.toSSML(message.speech),
        };
    }
    return {
        type: OutputSpeechType.Plain,
        text: SsmlUtilities.removeSSML(message.text),
    };
}
export function augmentModelPrototypes() {
    Card.prototype.toAlexaCard = function () {
        const card = {
            type: CardType.Standard,
            title: this.title,
            text: this.content,
        };
        if (this.imageUrl) {
            card.image = {
                // TODO: determine whether large should always be set
                largeImageUrl: this.imageUrl,
            };
        }
        return card;
    };
    /* eslint-disable @typescript-eslint/no-explicit-any */
    Card.prototype.toApl = function (cardTemplate) {
        const cardJson = cardTemplate || AplCardJson;
        cardJson.datasources.data.title = this.title;
        if (this.subtitle) {
            cardJson.datasources.data.subtitle = this.subtitle;
        }
        if (this.content) {
            cardJson.datasources.data.content = this.content;
        }
        if (this.imageUrl) {
            cardJson.datasources.data.imageUrl = this.imageUrl;
        }
        if (this.header) {
            cardJson.datasources.data.header = this.header;
        }
        if (this.backgroundImageUrl) {
            cardJson.datasources.data.backgroundImageUrl = this.backgroundImageUrl;
        }
        return Object.assign({ type: 'Alexa.Presentation.APL.RenderDocument', token: 'token' }, cardJson);
    };
    /* eslint-disable @typescript-eslint/no-explicit-any */
    Carousel.prototype.toApl = function (carouselTemplate) {
        const carouselJson = carouselTemplate || AplCarouselJson;
        if (this.title) {
            carouselJson.datasources.data.title = this.title;
        }
        if (this.header) {
            carouselJson.datasources.data.header = this.header;
        }
        if (this.backgroundImageUrl) {
            carouselJson.datasources.data.backgroundImageUrl = this.backgroundImageUrl;
        }
        carouselJson.datasources.data.items = this.items.map((item) => (Object.assign(Object.assign({}, item), { selection: item.selection
                ? Object.assign({ type: 'Selection' }, item.selection) : undefined, 
            // map generic carousel properties to AlexaImageList.listItems properties
            // https://developer.amazon.com/en-US/docs/alexa/alexa-presentation-language/apl-alexa-image-list-layout.html#list-items
            primaryText: item.title, secondaryText: item.subtitle || item.content, imageSource: item.imageUrl })));
        return Object.assign({ type: 'Alexa.Presentation.APL.RenderDocument', token: 'token' }, carouselJson);
    };
    Message.prototype.toAlexaOutputSpeech = function () {
        return convertMessageToOutputSpeech(this);
    };
}
//# sourceMappingURL=utilities.js.map