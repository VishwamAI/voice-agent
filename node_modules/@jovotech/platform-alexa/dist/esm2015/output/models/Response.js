var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { IsBoolean, IsObject, IsOptional, Type, ValidateNested } from '@jovotech/output';
import { IsValidDirectivesArray } from '../decorators/validation/IsValidDirectivesArray';
import { AplExecuteCommandsDirective } from './apl/AplExecuteCommandsDirective';
import { AplLoadIndexListDataDirective } from './apl/AplLoadIndexListDataDirective';
import { AplRenderDocumentDirective } from './apl/AplRenderDocumentDirective';
import { AplSendIndexListDataDirective } from './apl/AplSendIndexListDataDirective';
import { AplUpdateIndexListDirective } from './apl/AplUpdateIndexListDirective';
import { AplaRenderDocumentDirective } from './apla/AplaRenderDocumentDirective';
import { ApltExecuteCommandsDirective } from './aplt/ApltExecuteCommandsDirective';
import { ApltRenderDocumentDirective } from './aplt/ApltRenderDocumentDirective';
import { AudioPlayerClearQueueDirective } from './audio-player/AudioPlayerClearQueueDirective';
import { AudioPlayerPlayDirective } from './audio-player/AudioPlayerPlayDirective';
import { AudioPlayerStopDirective } from './audio-player/AudioPlayerStopDirective';
import { Card } from './card/Card';
import { OutputSpeech } from './common/OutputSpeech';
import { DialogConfirmIntentDirective } from './dialog/DialogConfirmIntentDirective';
import { DialogConfirmSlotDirective } from './dialog/DialogConfirmSlotDirective';
import { DialogDelegateDirective } from './dialog/DialogDelegateDirective';
import { DialogElicitSlotDirective } from './dialog/DialogElicitSlotDirective';
import { DialogUpdateDynamicEntitiesDirective } from './dialog/DialogUpdateDynamicEntitiesDirective';
import { Directive } from './Directive';
import { DisplayRenderTemplateDirective } from './display/DisplayRenderTemplateDirective';
import { HintDirective } from './display/HintDirective';
import { HtmlHandleMessageDirective } from './html/HtmlHandleMessageDirective';
import { HtmlStartDirective } from './html/HtmlStartDirective';
import { Reprompt } from './Reprompt';
import { VideoAppLaunchDirective } from './video-app/VideoAppLaunchDirective';
export class Response {
}
__decorate([
    IsOptional(),
    ValidateNested(),
    Type(() => OutputSpeech),
    __metadata("design:type", OutputSpeech)
], Response.prototype, "outputSpeech", void 0);
__decorate([
    IsOptional(),
    ValidateNested(),
    Type(() => Card),
    __metadata("design:type", Card)
], Response.prototype, "card", void 0);
__decorate([
    IsOptional(),
    ValidateNested(),
    Type(() => Reprompt),
    __metadata("design:type", Reprompt)
], Response.prototype, "reprompt", void 0);
__decorate([
    IsOptional(),
    IsBoolean(),
    __metadata("design:type", Boolean)
], Response.prototype, "shouldEndSession", void 0);
__decorate([
    IsOptional(),
    IsObject(),
    __metadata("design:type", Object)
], Response.prototype, "apiResponse", void 0);
__decorate([
    IsOptional(),
    IsValidDirectivesArray(),
    ValidateNested({
        each: true,
    }),
    Type(() => Directive, {
        keepDiscriminatorProperty: true,
        discriminator: {
            property: 'type',
            subTypes: [
                { value: AplRenderDocumentDirective, name: 'Alexa.Presentation.APL.RenderDocument' },
                { value: AplExecuteCommandsDirective, name: 'Alexa.Presentation.APL.ExecuteCommands' },
                { value: AplSendIndexListDataDirective, name: 'Alexa.Presentation.APL.SendIndexListData' },
                { value: AplUpdateIndexListDirective, name: 'Alexa.Presentation.APL.UpdateIndexListData' },
                { value: AplLoadIndexListDataDirective, name: 'Alexa.Presentation.APL.LoadIndexListData' },
                { value: ApltRenderDocumentDirective, name: 'Alexa.Presentation.APLT.RenderDocument' },
                { value: ApltExecuteCommandsDirective, name: 'Alexa.Presentation.APLT.ExecuteCommands' },
                { value: AplaRenderDocumentDirective, name: 'Alexa.Presentation.APLA.RenderDocument' },
                { value: AudioPlayerPlayDirective, name: 'AudioPlayer.Play' },
                { value: AudioPlayerStopDirective, name: 'AudioPlayer.Stop' },
                { value: AudioPlayerClearQueueDirective, name: 'AudioPlayer.ClearQueue' },
                { value: DialogDelegateDirective, name: 'Dialog.Delegate' },
                { value: DialogElicitSlotDirective, name: 'Dialog.ElicitSlot' },
                { value: DialogConfirmSlotDirective, name: 'Dialog.ConfirmSlot' },
                { value: DialogConfirmIntentDirective, name: 'Dialog.ConfirmIntent' },
                { value: DialogUpdateDynamicEntitiesDirective, name: 'Dialog.UpdateDynamicEntities' },
                { value: DisplayRenderTemplateDirective, name: 'Display.RenderTemplate' },
                { value: HintDirective, name: 'Hint' },
                { value: HtmlStartDirective, name: 'Alexa.Presentation.HTML.Start' },
                { value: HtmlHandleMessageDirective, name: 'Alexa.Presentation.HTML.HandleMessage' },
                { value: VideoAppLaunchDirective, name: 'VideoApp.Launch' },
            ],
        },
    }),
    __metadata("design:type", Array)
], Response.prototype, "directives", void 0);
//# sourceMappingURL=Response.js.map