import { JovoCliError, MAGNIFYING_GLASS, PluginCommand, Task, flags } from '@jovotech/cli-core';
import * as smapi from '../smapi';
import { PublicationMethod } from '../interfaces';
export class CertifyCommand extends PluginCommand {
    async run() {
        const { flags } = this.parse(CertifyCommand);
        const skillId = flags['skill-id'] || this.$plugin.config.skillId;
        const askProfile = flags['ask-profile'] || this.$plugin.config.askProfile || 'default';
        const publicationMethod = flags['publication-method'];
        const certifyTask = new Task(`${MAGNIFYING_GLASS} Submitting Alexa Skill ${skillId} to Certification`, async () => {
            if (!skillId)
                throw new JovoCliError({
                    message: 'Cannot submit Skill to Certification without skillId',
                    hint: 'Either add a skillId to the stage in the project configuration or add the --skill-id flag',
                });
            return smapi.submitSkillForCertification(skillId, publicationMethod, askProfile);
        });
        await certifyTask.run();
    }
}
CertifyCommand.id = 'certify:alexa';
CertifyCommand.description = 'This submits an alexa skill to certification';
CertifyCommand.examples = ['jovo certify:alexa'];
CertifyCommand.flags = Object.assign(Object.assign({}, PluginCommand.flags), { 'skill-id': flags.string({ char: 's', description: 'Alexa Skill ID' }), 'ask-profile': flags.string({
        description: 'Name of used ASK profile',
    }), 'publication-method': flags.string({
        options: Object.values(PublicationMethod),
        default: PublicationMethod.MANUAL_PUBLISHING,
    }) });
CertifyCommand.args = [];
//# sourceMappingURL=CertifyCommand.js.map