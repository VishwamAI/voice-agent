import { JovoCliError, wait } from '@jovotech/cli-core';
import { execAskCommand } from '../utilities';
export async function listSkills(askProfile) {
    const { stdout } = await execAskCommand('smapiListSkillsForVendor', 'ask smapi list-skills-for-vendor', askProfile);
    return JSON.parse(stdout);
}
export async function getSkillStatus(skillId, askProfile) {
    const cmd = ['ask smapi get-skill-status', `-s ${skillId}`];
    const { stdout } = await execAskCommand('smapiGetSkillStatus', cmd, askProfile);
    const response = JSON.parse(stdout);
    if (response.manifest) {
        const { status, errors } = response.manifest.lastUpdateRequest;
        if (status === 'IN_PROGRESS') {
            await wait(500);
            await getSkillStatus(skillId, askProfile);
        }
        else if (status === 'FAILED') {
            throw new JovoCliError({
                message: 'Errors occured while validating your skill package',
                hint: errors.reduce((output, error) => {
                    return output + error.message;
                }, ''),
            });
        }
    }
    if (response.interactionModel) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const values = Object.values(response.interactionModel);
        for (const model of values) {
            const status = model.lastUpdateRequest.status;
            if (status === 'IN_PROGRESS') {
                await wait(1000);
                await getSkillStatus(skillId, askProfile);
            }
        }
    }
}
export async function submitSkillForCertification(skillId, publicationMethod, askProfile) {
    const { stdout } = await execAskCommand('smapiSubmitSkillForCertification', [
        'ask smapi submit-skill-for-certification',
        `-s ${skillId}`,
        `--publication-method ${publicationMethod}`,
    ], askProfile);
    return stdout;
}
export async function submitSkillValidation(skillId, locales, stage, askProfile) {
    const { stdout } = await execAskCommand('smapiSubmitSkillValidation', [
        'ask smapi submit-skill-validation',
        `-s ${skillId}`,
        `--stage ${stage}`,
        `--locales ${locales.join(' ')}`,
    ], askProfile);
    return JSON.parse(stdout);
}
//# sourceMappingURL=SkillManagement.js.map