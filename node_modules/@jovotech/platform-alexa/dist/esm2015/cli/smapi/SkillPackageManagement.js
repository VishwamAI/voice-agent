import { JovoCliError, wait } from '@jovotech/cli-core';
import { execAskCommand } from '../utilities';
export async function createNewUploadUrl(askProfile) {
    const { stdout } = await execAskCommand('smapiCreateUploadUrl', 'ask smapi create-upload-url', askProfile);
    const { uploadUrl } = JSON.parse(stdout);
    return uploadUrl;
}
export async function createSkillPackage(location, askProfile) {
    const { stdout } = await execAskCommand('smapiCreateSkillPackage', ['ask smapi create-skill-package', '--full-response', `--location "${location}"`], askProfile);
    return parseImportUrl(JSON.parse(stdout));
}
export async function importSkillPackage(location, skillId, askProfile) {
    const { stdout } = await execAskCommand('smapiImportSkillPackage', [
        'ask smapi import-skill-package',
        '--full-response',
        `--location "${location}"`,
        `-s ${skillId}`,
    ], askProfile);
    return parseImportUrl(JSON.parse(stdout));
}
export async function exportSkillPackage(skillId, stage, cwd, askProfile) {
    await execAskCommand('smapiExportPackage', ['ask smapi export-package', `-s ${skillId}`, `-g ${stage}`], askProfile, { cwd });
}
export async function getImportStatus(importId, askProfile, isAsync = false) {
    const { stdout } = await execAskCommand('smapiGetImportStatus', ['ask smapi get-import-status', `--import-id "${importId}"`], askProfile);
    const status = JSON.parse(stdout);
    // If --async is passed, return the status and exit, otherwise wait until the import has finished
    if (isAsync) {
        return status;
    }
    if (status.status === 'IN_PROGRESS') {
        await wait(500);
        return await getImportStatus(importId, askProfile);
    }
    else if (status.status === 'FAILED') {
        const errorResource = status.skill.resources.find((r) => r.errors);
        throw new JovoCliError({
            message: 'Errors occured while importing your skill package',
            hint: errorResource
                ? errorResource.errors[0].message
                : JSON.stringify(status.skill.resources, null, 2),
        });
    }
    return status;
}
function parseImportUrl({ headers }) {
    var _a;
    return (_a = headers['location']) === null || _a === void 0 ? void 0 : _a.split('/').pop();
}
//# sourceMappingURL=SkillPackageManagement.js.map