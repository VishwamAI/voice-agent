import { decompileProject, loadProject, loadProjectConfig } from '@alexa/acdl';
import { ANSWER_CANCEL, deleteFolderRecursive, DOWNLOAD, flags, Log, MAGNIFYING_GLASS, printAskProfile, promptOverwrite, Task, } from '@jovotech/cli-core';
import { existsSync, mkdirSync, writeFileSync } from 'fs';
import _get from 'lodash.get';
import _set from 'lodash.set';
import DefaultFiles from '../DefaultFiles.json';
import * as smapi from '../smapi';
import { checkForAskCli, prepareSkillList, promptListForAlexaSkill } from '../utilities';
import { AlexaHook } from './AlexaHook';
export class GetHook extends AlexaHook {
    install() {
        this.middlewareCollection = {
            'install': [this.addCliOptions.bind(this)],
            'before.get:platform': [
                this.checkForPlatform.bind(this),
                checkForAskCli,
                this.updatePluginContext.bind(this),
                this.checkForCleanGet.bind(this),
                this.checkForExistingPlatformFiles.bind(this),
                this.checkForPlatformsFolder.bind(this),
            ],
            'get:platform': [this.get.bind(this)],
        };
    }
    /**
     * Add platform-specific CLI options, including flags and args.
     * @param context - Context providing an access point to command flags and args.
     */
    addCliOptions(context) {
        if (context.command !== 'get:platform') {
            return;
        }
        context.flags['ask-profile'] = flags.string({
            description: 'Name of used ASK profile',
        });
        context.flags['skill-id'] = flags.string({ char: 's', description: 'Alexa Skill ID' });
        context.flags['skill-stage'] = flags.string({
            description: 'Alexa Skill Stage',
            options: ['development', 'live', 'certification'],
            default: 'development',
        });
    }
    /**
     * Checks if the currently selected platform matches this CLI plugin.
     */
    checkForPlatform() {
        // Check if this plugin should be used or not.
        if (!this.$context.platforms.includes(this.$plugin.id)) {
            this.uninstall();
        }
    }
    /**
     * Updates the current plugin context with platform-specific values.
     */
    async updatePluginContext() {
        super.updatePluginContext();
        this.$context.alexa.askProfile =
            this.$context.flags['ask-profile'] ||
                this.$plugin.config.askProfile ||
                (await this.getAskProfile()) ||
                'default';
        this.$context.alexa.skillId =
            this.$context.flags['skill-id'] ||
                _get(this.$plugin.config, `[".ask/"]["ask-states.json"].profiles.${this.$context.alexa.askProfile || 'default'}.skillId`) ||
                _get(this.$plugin.config, 'skillId');
        this.$context.alexa.skillStage = this.$context.flags['skill-stage'];
    }
    /**
     * Checks if --clean has been set and deletes the platform folder accordingly
     */
    checkForCleanGet() {
        // If --clean has been set, delete the respective platform folders before building
        if (this.$context.flags.clean) {
            deleteFolderRecursive(this.$plugin.platformPath);
        }
    }
    /**
     * Checks if platform-specific files already exist and prompts for overwriting them.
     */
    async checkForExistingPlatformFiles() {
        if (existsSync(this.$plugin.skillPackagePath)) {
            const answer = await promptOverwrite('Found existing Alexa skill package. How to proceed?');
            if (answer.overwrite === ANSWER_CANCEL) {
                this.uninstall();
            }
            deleteFolderRecursive(this.$plugin.skillPackagePath);
            Log.spacer();
        }
    }
    /**
     * Checks if the platform folder for the current plugin exists
     */
    checkForPlatformsFolder() {
        if (!existsSync(this.$plugin.platformPath)) {
            mkdirSync(this.$plugin.platformPath);
        }
    }
    /**
     * Fetches platform-specific models from the Alexa Skills Console.
     */
    async get() {
        // If no skill id and thus no specified project can be found, try to prompt for one.
        if (!this.$context.alexa.skillId) {
            let skills = { skills: [] };
            const getSkillListTask = new Task(`${MAGNIFYING_GLASS} Getting a list of all your skills`);
            const searchTask = new Task('Searching', async () => {
                skills = await smapi.listSkills(this.$context.alexa.askProfile);
            });
            getSkillListTask.add(searchTask);
            await getSkillListTask.run();
            Log.spacer();
            const list = prepareSkillList(skills);
            try {
                const { skill } = await promptListForAlexaSkill(list);
                Log.spacer();
                this.$context.alexa.skillId = skill.skillId;
                this.$context.alexa.skillStage = skill.stage;
            }
            catch (error) {
                return;
            }
        }
        const getTask = new Task(`${DOWNLOAD} Getting Alexa skill project ${printAskProfile(this.$context.alexa.askProfile)}`);
        const exportTask = new Task('Exporting skill package', async () => {
            await smapi.exportSkillPackage(this.$context.alexa.skillId, this.$context.alexa.skillStage, this.$plugin.platformPath, this.$context.alexa.askProfile);
        });
        getTask.add(exportTask);
        if (this.$context.alexa.isACSkill) {
            const decompileTask = new Task('Decompiling ACDL files', async () => {
                if (!existsSync(this.$plugin.conversationsDirectory)) {
                    return;
                }
                const projectConfig = await loadProjectConfig(this.$plugin.platformPath, this.$context.alexa.askProfile);
                const project = await loadProject(projectConfig);
                await decompileProject(project);
            });
            getTask.add(decompileTask);
        }
        // Create ask-resources.json
        if (!existsSync(this.$plugin.askResourcesPath)) {
            const askResources = _get(DefaultFiles, 'ask-resources.json');
            _set(askResources, `profiles.${this.$context.alexa.askProfile || 'default'}`, {
                skillMetadata: {
                    src: './skill-package',
                },
            });
            writeFileSync(this.$plugin.askResourcesPath, JSON.stringify(askResources, null, 2));
        }
        // Set skill ID and generate .ask/ask-states.json if it does not yet exist
        this.setSkillId(this.$context.alexa.skillId);
        await getTask.run();
    }
}
//# sourceMappingURL=GetHook.js.map