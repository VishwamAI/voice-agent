"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CertifyCommand = void 0;
const cli_core_1 = require("@jovotech/cli-core");
const smapi = __importStar(require("../smapi"));
const interfaces_1 = require("../interfaces");
class CertifyCommand extends cli_core_1.PluginCommand {
    async run() {
        const { flags } = this.parse(CertifyCommand);
        const skillId = flags['skill-id'] || this.$plugin.config.skillId;
        const askProfile = flags['ask-profile'] || this.$plugin.config.askProfile || 'default';
        const publicationMethod = flags['publication-method'];
        const certifyTask = new cli_core_1.Task(`${cli_core_1.MAGNIFYING_GLASS} Submitting Alexa Skill ${skillId} to Certification`, async () => {
            if (!skillId)
                throw new cli_core_1.JovoCliError({
                    message: 'Cannot submit Skill to Certification without skillId',
                    hint: 'Either add a skillId to the stage in the project configuration or add the --skill-id flag',
                });
            return smapi.submitSkillForCertification(skillId, publicationMethod, askProfile);
        });
        await certifyTask.run();
    }
}
exports.CertifyCommand = CertifyCommand;
CertifyCommand.id = 'certify:alexa';
CertifyCommand.description = 'This submits an alexa skill to certification';
CertifyCommand.examples = ['jovo certify:alexa'];
CertifyCommand.flags = Object.assign(Object.assign({}, cli_core_1.PluginCommand.flags), { 'skill-id': cli_core_1.flags.string({ char: 's', description: 'Alexa Skill ID' }), 'ask-profile': cli_core_1.flags.string({
        description: 'Name of used ASK profile',
    }), 'publication-method': cli_core_1.flags.string({
        options: Object.values(interfaces_1.PublicationMethod),
        default: interfaces_1.PublicationMethod.MANUAL_PUBLISHING,
    }) });
CertifyCommand.args = [];
//# sourceMappingURL=CertifyCommand.js.map