"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidateCommand = void 0;
const cli_core_1 = require("@jovotech/cli-core");
const smapi = __importStar(require("../smapi"));
class ValidateCommand extends cli_core_1.PluginCommand {
    async run() {
        const { flags } = this.parse(ValidateCommand);
        const skillId = flags['skill-id'] || this.$plugin.config.skillId;
        const askProfile = flags['ask-profile'] || this.$plugin.config.askProfile || 'default';
        const locales = flags.locales ||
            Object.values(this.$plugin.config.locales || {}).reduce((prev, curr) => [...prev, ...curr], []);
        const validateTask = new cli_core_1.Task(`${cli_core_1.MAGNIFYING_GLASS} Submitting Alexa Skill ${skillId} to Validation`, async () => {
            if (!skillId)
                throw new cli_core_1.JovoCliError({
                    message: 'Cannot submit Skill Validation without skillId',
                    hint: 'Either add a skillId to the stage in the project configuration or add the --skill-id flag',
                });
            const validationResponse = await smapi.submitSkillValidation(skillId, locales, flags['skill-stage'], askProfile);
            return `Started Validation with id ${validationResponse.id}`;
        });
        await validateTask.run();
    }
}
exports.ValidateCommand = ValidateCommand;
ValidateCommand.id = 'validate:alexa';
ValidateCommand.description = 'This submits a skill validation';
ValidateCommand.examples = ['jovo validate:alexa'];
ValidateCommand.flags = Object.assign({ 'skill-stage': cli_core_1.flags.string({
        description: 'Alexa Skill Stage',
        options: ['development', 'live', 'certification'],
        default: 'development',
    }), 'skill-id': cli_core_1.flags.string({ char: 's', description: 'Alexa Skill ID' }), 'ask-profile': cli_core_1.flags.string({
        description: 'Name of used ASK profile',
    }), 'locales': cli_core_1.flags.string({ multiple: true, char: 'l' }) }, cli_core_1.PluginCommand.flags);
ValidateCommand.args = [];
//# sourceMappingURL=ValidateCommand.js.map