var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { IsNotEmpty, IsObject, IsOptional, IsString, JovoResponse, Type, ValidateNested, } from '@jovotech/output';
import { convertMessageToOutputSpeech, Response } from './output';
var AlexaResponse = /** @class */ (function (_super) {
    __extends(AlexaResponse, _super);
    function AlexaResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AlexaResponse.prototype.hasSessionEnded = function () {
        return !!this.response.shouldEndSession;
    };
    AlexaResponse.prototype.getSpeech = function () {
        var _a;
        return (_a = this.response.outputSpeech) === null || _a === void 0 ? void 0 : _a.ssml;
    };
    AlexaResponse.prototype.getReprompt = function () {
        var _a, _b;
        return (_b = (_a = this.response.reprompt) === null || _a === void 0 ? void 0 : _a.outputSpeech) === null || _b === void 0 ? void 0 : _b.ssml;
    };
    AlexaResponse.prototype.replaceSpeech = function (speech) {
        // For consistency with JovoResponse, this method can also accept a string of arrays
        // However, Alexa responses use only 1 speech element, so the first item is used
        var message = Array.isArray(speech) ? speech[0] : speech;
        this.response.outputSpeech = convertMessageToOutputSpeech(message);
    };
    AlexaResponse.prototype.replaceReprompt = function (reprompt) {
        // For consistency with JovoResponse, this method can also accept a string of arrays
        // However, Alexa responses use only 1 reprompt element, so the first item is used
        var message = Array.isArray(reprompt) ? reprompt[0] : reprompt;
        this.response.reprompt = { outputSpeech: convertMessageToOutputSpeech(message) };
    };
    __decorate([
        IsString(),
        IsNotEmpty(),
        __metadata("design:type", String)
    ], AlexaResponse.prototype, "version", void 0);
    __decorate([
        IsOptional(),
        IsObject(),
        __metadata("design:type", Object)
    ], AlexaResponse.prototype, "sessionAttributes", void 0);
    __decorate([
        ValidateNested(),
        Type(function () { return Response; }),
        __metadata("design:type", Response)
    ], AlexaResponse.prototype, "response", void 0);
    return AlexaResponse;
}(JovoResponse));
export { AlexaResponse };
//# sourceMappingURL=AlexaResponse.js.map