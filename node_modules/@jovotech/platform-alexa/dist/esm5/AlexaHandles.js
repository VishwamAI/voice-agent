import { InputType } from '@jovotech/framework';
export var IspType;
(function (IspType) {
    IspType["Upsell"] = "Upsell";
    IspType["Buy"] = "Buy";
    IspType["Cancel"] = "Cancel";
})(IspType || (IspType = {}));
export var AudioPlayerType;
(function (AudioPlayerType) {
    AudioPlayerType["PlaybackStarted"] = "AudioPlayer.PlaybackStarted";
    AudioPlayerType["PlaybackNearlyFinished"] = "AudioPlayer.PlaybackNearlyFinished";
    AudioPlayerType["PlaybackFinished"] = "AudioPlayer.PlaybackFinished";
    AudioPlayerType["PlaybackStopped"] = "AudioPlayer.PlaybackStopped";
    AudioPlayerType["PlaybackFailed"] = "AudioPlayer.PlaybackFailed";
})(AudioPlayerType || (AudioPlayerType = {}));
export var PlaybackControllerType;
(function (PlaybackControllerType) {
    PlaybackControllerType["NextCommandIssued"] = "PlaybackController.NextCommandIssued";
    PlaybackControllerType["PreviousCommandIssued"] = "PlaybackController.PreviousCommandIssued";
    PlaybackControllerType["PlayCommandIssued"] = "PlaybackController.PlayCommandIssued";
    PlaybackControllerType["PauseCommandIssued"] = "PlaybackController.PauseCommandIssued";
})(PlaybackControllerType || (PlaybackControllerType = {}));
var AlexaHandles = /** @class */ (function () {
    function AlexaHandles() {
    }
    AlexaHandles.onPermission = function (status, type) {
        return {
            global: true,
            types: ['Connections.Response'],
            platforms: ['alexa'],
            if: function (jovo) {
                var _a, _b, _c, _d, _e;
                return ((_a = jovo.$request.request) === null || _a === void 0 ? void 0 : _a.name) === 'AskFor' &&
                    ((_c = (_b = jovo.$request.request) === null || _b === void 0 ? void 0 : _b.payload) === null || _c === void 0 ? void 0 : _c.status) === status &&
                    (type
                        ? ((_e = (_d = jovo.$request.request) === null || _d === void 0 ? void 0 : _d.payload) === null || _e === void 0 ? void 0 : _e.permissionScope) ===
                            "alexa::alerts:" + type + ":skill:readwrite"
                        : true);
            },
        };
    };
    AlexaHandles.onIsp = function (type, purchaseResult) {
        return {
            global: true,
            types: ['Connections.Response'],
            platforms: ['alexa'],
            if: function (jovo) {
                var _a, _b, _c;
                var result = purchaseResult
                    ? ((_b = (_a = jovo.$request.request) === null || _a === void 0 ? void 0 : _a.payload) === null || _b === void 0 ? void 0 : _b.purchaseResult) === purchaseResult
                    : true;
                return ((_c = jovo.$request.request) === null || _c === void 0 ? void 0 : _c.name) === type && result;
            },
        };
    };
    AlexaHandles.onDialogApiInvoked = function (name) {
        return {
            global: true,
            types: ['Dialog.API.Invoked'],
            platforms: ['alexa'],
            if: function (jovo) { var _a, _b; return name ? ((_b = (_a = jovo.$request.request) === null || _a === void 0 ? void 0 : _a.apiRequest) === null || _b === void 0 ? void 0 : _b.name) === name : true; },
        };
    };
    AlexaHandles.onAudioPlayer = function (type) {
        return {
            global: true,
            types: [type],
            platforms: ['alexa'],
        };
    };
    AlexaHandles.onPlaybackController = function (type) {
        return {
            global: true,
            types: [type],
            platforms: ['alexa'],
        };
    };
    AlexaHandles.onCanFulfillIntentRequest = function () {
        return {
            global: true,
            types: ['CanFulfillIntentRequest'],
            platforms: ['alexa'],
        };
    };
    AlexaHandles.onTask = function (taskName, taskVersion) {
        return {
            types: [InputType.Launch],
            global: true,
            if: function (jovo) {
                var _a, _b;
                var task = (_a = jovo.$alexa) === null || _a === void 0 ? void 0 : _a.task.getTask();
                if (!task)
                    return false;
                if (!((_b = jovo.$alexa) === null || _b === void 0 ? void 0 : _b.task.hasTaskName(taskName)))
                    return false;
                if (taskVersion && !jovo.$alexa.task.isVersion(taskVersion))
                    return false;
                return true;
            },
        };
    };
    return AlexaHandles;
}());
export { AlexaHandles };
//# sourceMappingURL=AlexaHandles.js.map