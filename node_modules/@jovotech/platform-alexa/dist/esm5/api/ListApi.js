var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { JovoError } from '@jovotech/framework';
import { AlexaApiError, AlexaApiErrorCode, sendApiRequest, } from './AlexaApi';
export function getLists(apiEndpoint, permissionToken) {
    return __awaiter(this, void 0, void 0, function () {
        var options, response, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    options = {
                        endpoint: apiEndpoint,
                        path: "/v2/householdlists",
                        permissionToken: permissionToken,
                        method: 'GET',
                    };
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, sendApiRequest(options)];
                case 2:
                    response = _a.sent();
                    return [2 /*return*/, response.data.lists];
                case 3:
                    error_1 = _a.sent();
                    handleListApiErrors(error_1);
                    return [3 /*break*/, 4];
                case 4: throw new Error('Unexpected error.');
            }
        });
    });
}
/**
 * Returns the type of the list
 * @param listId List to check
 * @returns the type of the list
 */
export function getTypeOfList(listId) {
    var decodedListId = Buffer.from(listId, 'base64').toString('utf8');
    if (decodedListId.endsWith('-SHOPPING_ITEM')) {
        return 'shopping-list';
    }
    else {
        return 'todo-list';
    }
}
export function getListItems(listId, itemIds, apiEndpoint, permissionToken) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, Promise.all(itemIds.map(function (itemId) { return getListItem(listId, itemId, apiEndpoint, permissionToken); }))];
        });
    });
}
export function getListItem(listId, itemId, apiEndpoint, permissionToken) {
    return __awaiter(this, void 0, void 0, function () {
        var options, response, error_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    options = {
                        endpoint: apiEndpoint,
                        path: "/v2/householdlists/" + listId + "/items/" + itemId,
                        permissionToken: permissionToken,
                        method: 'GET',
                    };
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, sendApiRequest(options)];
                case 2:
                    response = _a.sent();
                    return [2 /*return*/, response.data];
                case 3:
                    error_2 = _a.sent();
                    handleListApiErrors(error_2);
                    return [3 /*break*/, 4];
                case 4: throw new Error('Unexpected error.');
            }
        });
    });
}
/**
 * Meaning of error-codes can be found here: https://developer.amazon.com/en-US/docs/alexa/list-skills/list-management-api-reference.html#get-list-item-http-status-codes
 * @param error Error to handle
 */
function handleListApiErrors(error) {
    var _a, _b;
    if (error.isAxiosError) {
        var message = ((_a = error.response) === null || _a === void 0 ? void 0 : _a.data).message;
        var errorCode = AlexaApiErrorCode.ERROR;
        var status_1 = (_b = error.response) === null || _b === void 0 ? void 0 : _b.status;
        if (status_1 === 401) {
            errorCode = AlexaApiErrorCode.NO_USER_PERMISSION;
        }
        if (status_1 === 404) {
            errorCode = AlexaApiErrorCode.LIST_NOT_FOUND;
        }
        throw new AlexaApiError({ message: message, code: errorCode });
    }
    throw new JovoError({ message: error.message });
}
//# sourceMappingURL=ListApi.js.map