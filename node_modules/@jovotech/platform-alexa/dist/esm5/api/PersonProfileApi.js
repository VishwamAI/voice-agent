var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { JovoError } from '@jovotech/framework';
import { AlexaApiError, AlexaApiErrorCode, sendApiRequest } from './AlexaApi';
export var PersonProfileProperty;
(function (PersonProfileProperty) {
    PersonProfileProperty["NAME"] = "name";
    PersonProfileProperty["GIVEN_NAME"] = "givenName";
    PersonProfileProperty["MOBILE_NUMBER"] = "mobileNumber";
})(PersonProfileProperty || (PersonProfileProperty = {}));
/**
 * Sends a request to Amazon's Person Profile API for getting profile information
 * @param profileProperty - The profile property which determines the final API endpoint url
 * @param apiEndpoint - API endpoint, differs on the geographic location of the skill
 * @param permissionToken - Token to authorize the request
 * @see {@link https://developer.amazon.com/en-US/docs/alexa/custom-skills/request-recognized-speaker-contact-information.html Request Recognized Speaker Contact Information}
 */
export function sendPersonProfileApiRequest(profileProperty, apiEndpoint, permissionToken) {
    return __awaiter(this, void 0, void 0, function () {
        var options, response, error_1, _a, message, code, errorCode;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    options = {
                        endpoint: apiEndpoint,
                        path: "/v2/persons/~current/profile/" + profileProperty,
                        permissionToken: permissionToken,
                    };
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, sendApiRequest(options)];
                case 2:
                    response = _b.sent();
                    return [2 /*return*/, response.data];
                case 3:
                    error_1 = _b.sent();
                    if (error_1.isAxiosError) {
                        _a = error_1.response.data, message = _a.message, code = _a.code;
                        errorCode = AlexaApiErrorCode.ERROR;
                        // User needs to grant access in app
                        if (message === 'The authentication token is not valid.' ||
                            message === 'Access to this resource has not yet been requested.' ||
                            (code === 'ACCESS_DENIED' && message === 'Access denied with reason: ACCESS_NOT_REQUESTED')) {
                            errorCode = AlexaApiErrorCode.NO_USER_PERMISSION;
                        }
                        // Dev needs to set correct permissions in ASK console
                        if (message === 'Access to this resource cannot be requested.' ||
                            (code === 'ACCESS_DENIED' && message === 'Access denied with reason: FORBIDDEN')) {
                            errorCode = AlexaApiErrorCode.NO_SKILL_PERMISSION;
                        }
                        throw new AlexaApiError({ message: message, code: errorCode });
                    }
                    throw new JovoError({ message: error_1.message });
                case 4: return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=PersonProfileApi.js.map