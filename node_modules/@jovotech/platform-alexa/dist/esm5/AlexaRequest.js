var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { Capability, InputType, JovoRequest, } from '@jovotech/framework';
import { AlexaCapability } from './AlexaDevice';
import { DYNAMIC_ENTITY_MATCHES_PREFIX, STATIC_ENTITY_MATCHES_PREFIX, SUPPORTED_APL_ARGUMENT_TYPES, } from './constants';
import { ResolutionPerAuthorityStatusCode } from './output';
import _set from 'lodash.set';
export var ALEXA_REQUEST_TYPE_TO_INPUT_TYPE_MAP = {
    'LaunchRequest': InputType.Launch,
    'IntentRequest': InputType.Intent,
    'SessionEndedRequest': InputType.End,
    'System.ExceptionEncountered': InputType.Error, // @see https://www.jovo.tech/docs/input#error
};
var AlexaRequest = /** @class */ (function (_super) {
    __extends(AlexaRequest, _super);
    function AlexaRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AlexaRequest.prototype.getLocale = function () {
        var _a;
        return (_a = this.request) === null || _a === void 0 ? void 0 : _a.locale;
    };
    // @see https://www.jovo.tech/marketplace/platform-alexa/output#apl-user-events
    AlexaRequest.prototype.getAplUserEventArg = function (key) {
        var _a;
        if (((_a = this === null || this === void 0 ? void 0 : this.request) === null || _a === void 0 ? void 0 : _a.type) === 'Alexa.Presentation.APL.UserEvent') {
            var args = (this === null || this === void 0 ? void 0 : this.request.arguments) || [];
            for (var i = 0; i < args.length; i++) {
                var argument = args[i];
                if (typeof argument === 'object' && SUPPORTED_APL_ARGUMENT_TYPES.includes(argument === null || argument === void 0 ? void 0 : argument.type)) {
                    if (argument[key]) {
                        return argument[key];
                    }
                }
            }
        }
    };
    AlexaRequest.prototype.getIntent = function () {
        var _a, _b;
        return this.getAplUserEventArg('intent') || ((_b = (_a = this.request) === null || _a === void 0 ? void 0 : _a.intent) === null || _b === void 0 ? void 0 : _b.name);
    };
    AlexaRequest.prototype.setIntent = function (intent) {
        if (!this.request) {
            return;
        }
        if (!this.request.intent) {
            this.request.intent = { name: intent };
        }
        else {
            this.request.intent.name = intent;
        }
    };
    AlexaRequest.prototype.getEntities = function () {
        var _this = this;
        var _a, _b, _c, _d;
        var slots = __assign(__assign({}, (((_b = (_a = this.request) === null || _a === void 0 ? void 0 : _a.intent) === null || _b === void 0 ? void 0 : _b.slots) || {})), (((_d = (_c = this.request) === null || _c === void 0 ? void 0 : _c.apiRequest) === null || _d === void 0 ? void 0 : _d.slots) || {}));
        var aplEntities = this.getAplUserEventArg('entities');
        if (aplEntities) {
            return aplEntities;
        }
        if (!Object.keys(slots).length) {
            return;
        }
        return Object.keys(slots).reduce(function (entityMap, slotKey) {
            var entity = {
                native: slots[slotKey],
            };
            if (slots[slotKey].value) {
                entity.value = slots[slotKey].value;
                entity.resolved = slots[slotKey].value;
            }
            var modifyEntityByAuthorityResolutions = function (resolutionsPerAuthority) {
                resolutionsPerAuthority.forEach(function (resolutionPerAuthority) {
                    var _a = resolutionPerAuthority.values[0].value, name = _a.name, id = _a.id;
                    entity.resolved = name;
                    entity.id = id || name;
                });
            };
            // check static entities first
            modifyEntityByAuthorityResolutions(_this.getStaticEntityMatches(slotKey));
            // dynamic entities have a higher priority
            modifyEntityByAuthorityResolutions(_this.getDynamicEntityMatches(slotKey));
            entityMap[slotKey] = entity;
            return entityMap;
        }, {});
    };
    AlexaRequest.prototype.getStaticEntityMatches = function (slotKey) {
        return this.getEntityResolutions(slotKey, STATIC_ENTITY_MATCHES_PREFIX);
    };
    AlexaRequest.prototype.getDynamicEntityMatches = function (slotKey) {
        return this.getEntityResolutions(slotKey, DYNAMIC_ENTITY_MATCHES_PREFIX);
    };
    AlexaRequest.prototype.getEntityResolutions = function (slotKey, prefix) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        return __spreadArray(__spreadArray([], (((_e = (_d = (_c = (_b = (_a = this.request) === null || _a === void 0 ? void 0 : _a.intent) === null || _b === void 0 ? void 0 : _b.slots) === null || _c === void 0 ? void 0 : _c[slotKey]) === null || _d === void 0 ? void 0 : _d.resolutions) === null || _e === void 0 ? void 0 : _e.resolutionsPerAuthority) || []), true), (((_k = (_j = (_h = (_g = (_f = this.request) === null || _f === void 0 ? void 0 : _f.apiRequest) === null || _g === void 0 ? void 0 : _g.slots) === null || _h === void 0 ? void 0 : _h[slotKey]) === null || _j === void 0 ? void 0 : _j.resolutions) === null || _k === void 0 ? void 0 : _k.resolutionsPerAuthority) || []), true).filter(function (authorityResolution) {
            return authorityResolution.status.code === ResolutionPerAuthorityStatusCode.SuccessMatch &&
                authorityResolution.authority.startsWith(prefix);
        });
    };
    AlexaRequest.prototype.getInputType = function () {
        var _a, _b;
        // Transform requests that include an intent to Intent request types
        // Example: 'Alexa.Presentation.APL.UserEvent' requests with APL arguments, @see https://www.jovo.tech/marketplace/platform-alexa/output#apl-user-events
        // Don't convert CanFulfillIntentRequest requests, @see https://github.com/jovotech/jovo-framework/issues/1426
        if (this.getIntent() && ((_a = this.request) === null || _a === void 0 ? void 0 : _a.type) !== 'CanFulfillIntentRequest') {
            return InputType.Intent;
        }
        return ((_b = this.request) === null || _b === void 0 ? void 0 : _b.type)
            ? ALEXA_REQUEST_TYPE_TO_INPUT_TYPE_MAP[this.request.type] || this.request.type
            : undefined;
    };
    AlexaRequest.prototype.setLocale = function (locale) {
        if (!this.request) {
            return;
        }
        this.request.locale = locale;
    };
    AlexaRequest.prototype.getInputText = function () {
        return;
    };
    AlexaRequest.prototype.getInputAudio = function () {
        return;
    };
    AlexaRequest.prototype.getSessionData = function () {
        var _a;
        return (_a = this.session) === null || _a === void 0 ? void 0 : _a.attributes;
    };
    AlexaRequest.prototype.setSessionData = function (session) {
        if (!this.session) {
            return;
        }
        this.session.attributes = session;
    };
    AlexaRequest.prototype.getSessionId = function () {
        var _a;
        return (_a = this.session) === null || _a === void 0 ? void 0 : _a.sessionId;
    };
    AlexaRequest.prototype.isNewSession = function () {
        var _a;
        return (_a = this.session) === null || _a === void 0 ? void 0 : _a.new;
    };
    // platform-specific
    AlexaRequest.prototype.isAplSupported = function () {
        var _a, _b, _c, _d;
        return !!((_d = (_c = (_b = (_a = this.context) === null || _a === void 0 ? void 0 : _a.System) === null || _b === void 0 ? void 0 : _b.device) === null || _c === void 0 ? void 0 : _c.supportedInterfaces) === null || _d === void 0 ? void 0 : _d['Alexa.Presentation.APL']);
    };
    AlexaRequest.prototype.getUserId = function () {
        var _a, _b, _c;
        return (_c = (_b = (_a = this.context) === null || _a === void 0 ? void 0 : _a.System) === null || _b === void 0 ? void 0 : _b.user) === null || _c === void 0 ? void 0 : _c.userId;
    };
    AlexaRequest.prototype.setUserId = function (userId) {
        if (!this.session) {
            // TODO: What to do here?
            return;
        }
        if (!this.session.user) {
            this.session.user = { userId: userId, accessToken: '', permissions: { consentToken: '' } };
        }
        this.session.user.userId = userId;
        _set(this, 'context.System.user.userId', userId);
    };
    AlexaRequest.prototype.getApiEndpoint = function () {
        return this.context.System.apiEndpoint;
    };
    AlexaRequest.prototype.getApiAccessToken = function () {
        return this.context.System.apiAccessToken;
    };
    AlexaRequest.prototype.getUnit = function () {
        return this.context.System.unit;
    };
    AlexaRequest.prototype.getDeviceCapabilities = function () {
        var _a, _b, _c;
        var supportedInterfaces = (_c = (_b = (_a = this.context) === null || _a === void 0 ? void 0 : _a.System) === null || _b === void 0 ? void 0 : _b.device) === null || _c === void 0 ? void 0 : _c.supportedInterfaces;
        if (!supportedInterfaces) {
            return;
        }
        var capabilities = [Capability.Audio];
        if (supportedInterfaces.AudioPlayer) {
            capabilities.push(Capability.LongformAudio);
        }
        if (supportedInterfaces['Alexa.Presentation.APL']) {
            capabilities.push(Capability.Screen, AlexaCapability.Apl);
        }
        if (supportedInterfaces['Alexa.Presentation.HTML']) {
            capabilities.push(Capability.Screen, AlexaCapability.Html);
        }
        if (supportedInterfaces.VideoApp) {
            capabilities.push(Capability.Video);
        }
        // remove duplicates
        return Array.from(new Set(capabilities));
    };
    AlexaRequest.prototype.getDeviceId = function () {
        return this.context.System.device.deviceId;
    };
    AlexaRequest.prototype.getRequestId = function () {
        var _a;
        return (_a = this.request) === null || _a === void 0 ? void 0 : _a.requestId;
    };
    return AlexaRequest;
}(JovoRequest));
export { AlexaRequest };
//# sourceMappingURL=AlexaRequest.js.map