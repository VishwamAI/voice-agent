var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var AlexaTask = /** @class */ (function () {
    function AlexaTask(alexa) {
        this.alexa = alexa;
    }
    AlexaTask.prototype.getTask = function () {
        var _a;
        return (_a = this.alexa.$request.request) === null || _a === void 0 ? void 0 : _a.task;
    };
    Object.defineProperty(AlexaTask.prototype, "version", {
        get: function () {
            var _a;
            return (_a = this.getTask()) === null || _a === void 0 ? void 0 : _a.version;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AlexaTask.prototype, "name", {
        get: function () {
            var _a;
            return (_a = this.getTask()) === null || _a === void 0 ? void 0 : _a.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AlexaTask.prototype, "input", {
        get: function () {
            var _a;
            return (_a = this.getTask()) === null || _a === void 0 ? void 0 : _a.input;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Looks at the task name and checks if it ends with the provided taskName. Ignores skillId prefix
     * @param taskName Task name without skill id
     * @returns true, if task name comes after the skill id
     */
    AlexaTask.prototype.hasTaskName = function (taskName) {
        if (!this.name)
            return false;
        return this.name.endsWith("." + taskName);
    };
    AlexaTask.prototype.isVersion = function (version) {
        if (!this.version)
            return false;
        return this.version === "" + version;
    };
    AlexaTask.prototype.toJSON = function () {
        return __assign(__assign({}, this), { alexa: undefined });
    };
    return AlexaTask;
}());
export { AlexaTask };
//# sourceMappingURL=AlexaTask.js.map