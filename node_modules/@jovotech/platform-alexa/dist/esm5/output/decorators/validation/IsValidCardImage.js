var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { formatValidationErrors, isDefined, registerDecorator, validate, } from '@jovotech/output';
import { CardImage } from '../../models';
export function IsValidCardImage(relatedTypes, options) {
    return function (object, propertyKey) {
        registerDecorator({
            name: 'isValidCardImage',
            target: object.constructor,
            propertyName: propertyKey.toString(),
            constraints: [],
            options: options,
            async: true,
            validator: {
                validate: function (value, args) {
                    return __awaiter(this, void 0, void 0, function () {
                        var type, errors;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    type = args.object.type;
                                    // if there is no type, skip for now because another decorator should take care of that
                                    if (!type) {
                                        return [2 /*return*/, true];
                                    }
                                    if (isDefined(value) && !relatedTypes.includes(type)) {
                                        args.constraints[0] = "$property can not be set when the type is " + type;
                                        return [2 /*return*/, false];
                                    }
                                    if (!isDefined(value)) return [3 /*break*/, 2];
                                    if (!(value instanceof CardImage)) {
                                        args.constraints[0] = '$property must be an instance of CardImage';
                                        return [2 /*return*/, false];
                                    }
                                    return [4 /*yield*/, validate(value)];
                                case 1:
                                    errors = _a.sent();
                                    args.constraints[0] = formatValidationErrors(errors, {
                                        text: '$property is invalid:',
                                        delimiter: '\n  - ',
                                        path: '$property',
                                    });
                                    return [2 /*return*/, !errors.length];
                                case 2: return [2 /*return*/, true];
                            }
                        });
                    });
                },
                defaultMessage: function (args) {
                    return args.constraints[0];
                },
            },
        });
    };
}
//# sourceMappingURL=IsValidCardImage.js.map