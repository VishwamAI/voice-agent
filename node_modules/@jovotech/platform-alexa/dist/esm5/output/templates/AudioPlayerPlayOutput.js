var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { BaseOutput, Output } from '@jovotech/framework';
import { PlayBehavior } from '../models';
var AudioPlayerPlayOutput = /** @class */ (function (_super) {
    __extends(AudioPlayerPlayOutput, _super);
    function AudioPlayerPlayOutput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AudioPlayerPlayOutput_1 = AudioPlayerPlayOutput;
    AudioPlayerPlayOutput.prototype.getDefaultOptions = function () {
        return {
            playBehavior: PlayBehavior.ReplaceAll,
            audioItem: {
                stream: {
                    url: '',
                    token: '',
                    offsetInMilliseconds: 0,
                },
            },
        };
    };
    AudioPlayerPlayOutput.prototype.build = function () {
        // Sets the file name as token, if it's not set in options by the developer.
        // https://example.com/fileXYZ.mp3 => token = fileXYZ.mp3
        this.options.audioItem.stream.token =
            this.options.audioItem.stream.token ||
                AudioPlayerPlayOutput_1.getTokenFromUrl(this.options.audioItem.stream.url);
        return {
            message: this.options.message,
            platforms: {
                alexa: {
                    nativeResponse: {
                        response: {
                            shouldEndSession: true,
                            directives: [
                                {
                                    type: 'AudioPlayer.Play',
                                    playBehavior: this.options.playBehavior,
                                    audioItem: this.options.audioItem,
                                },
                            ],
                        },
                    },
                },
            },
        };
    };
    AudioPlayerPlayOutput.getTokenFromUrl = function (url) {
        return url.substring(url.lastIndexOf('/') + 1);
    };
    var AudioPlayerPlayOutput_1;
    AudioPlayerPlayOutput = AudioPlayerPlayOutput_1 = __decorate([
        Output()
    ], AudioPlayerPlayOutput);
    return AudioPlayerPlayOutput;
}(BaseOutput));
export { AudioPlayerPlayOutput };
//# sourceMappingURL=AudioPlayerPlayOutput.js.map