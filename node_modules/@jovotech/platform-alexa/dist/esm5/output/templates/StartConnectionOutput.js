var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Output, BaseOutput, Jovo } from '@jovotech/framework';
import { JovoError } from '@jovotech/common';
import { OnCompletion } from '../models/common/OnCompletion';
var StartConnectionOutput = /** @class */ (function (_super) {
    __extends(StartConnectionOutput, _super);
    function StartConnectionOutput(jovo, options) {
        return _super.call(this, jovo, options) || this;
    }
    StartConnectionOutput.prototype.getDefaultOptions = function () {
        return {
            taskVersion: 1,
            taskName: { amazonPredefinedTask: true, name: '' },
            input: {},
            onCompletion: OnCompletion.ResumeSession,
        };
    };
    StartConnectionOutput.prototype.build = function () {
        if (!this.options.taskName.amazonPredefinedTask && !this.options.providerSkillId) {
            throw new JovoError({
                message: 'for direct skill connection, providerSkillId must be provided',
                hint: 'to link to a task in a specific skill, provide providerSkillId, to use managed skill connection, set taskName.amazonPredefinedTask to true',
                learnMore: 'https://developer.amazon.com/en-US/docs/alexa/custom-skills/use-skill-connections-to-request-tasks.html#for-direct-skill-connection-1',
            });
        }
        var shouldEndSession = this.options.onCompletion === OnCompletion.SendErrorsOnly
            ? true
            : this.options.shouldEndSession;
        var taskPrefix = this.options.taskName.amazonPredefinedTask
            ? 'AMAZON'
            : this.options.providerSkillId;
        return {
            platforms: {
                alexa: {
                    nativeResponse: {
                        response: {
                            shouldEndSession: shouldEndSession,
                            directives: [
                                {
                                    type: 'Connections.StartConnection',
                                    uri: "connection://" + taskPrefix + "." + this.options.taskName.name + "/" + this.options.taskVersion + (this.options.providerSkillId ? "?provider=" + this.options.providerSkillId : ''),
                                    input: this.options.input,
                                    onCompletion: this.options.onCompletion,
                                    token: this.options.token,
                                },
                            ],
                        },
                    },
                },
            },
        };
    };
    StartConnectionOutput = __decorate([
        Output(),
        __metadata("design:paramtypes", [Jovo, Object])
    ], StartConnectionOutput);
    return StartConnectionOutput;
}(BaseOutput));
export { StartConnectionOutput };
//# sourceMappingURL=StartConnectionOutput.js.map