var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { IsOptional, Type, ValidateNested } from '@jovotech/output';
import { IsValidDirectivesArray } from '../decorators/validation/IsValidDirectivesArray';
import { AplaRenderDocumentDirective } from './apla/AplaRenderDocumentDirective';
import { OutputSpeech } from './common/OutputSpeech';
import { Directive } from './Directive';
var Reprompt = /** @class */ (function () {
    function Reprompt() {
    }
    __decorate([
        IsOptional(),
        ValidateNested(),
        Type(function () { return OutputSpeech; }),
        __metadata("design:type", OutputSpeech)
    ], Reprompt.prototype, "outputSpeech", void 0);
    __decorate([
        IsOptional(),
        IsValidDirectivesArray(),
        ValidateNested({
            each: true,
        }),
        Type(function () { return Directive; }, {
            keepDiscriminatorProperty: true,
            discriminator: {
                property: 'type',
                subTypes: [
                    { value: AplaRenderDocumentDirective, name: 'Alexa.Presentation.APLA.RenderDocument' },
                ],
            },
        }),
        __metadata("design:type", Array)
    ], Reprompt.prototype, "directives", void 0);
    return Reprompt;
}());
export { Reprompt };
//# sourceMappingURL=Reprompt.js.map