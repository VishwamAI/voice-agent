var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ArrayMinSize, IsArray, IsEnum, IsInt, IsNotEmpty, IsNumber, IsOptional, IsString, Max, Min, } from '@jovotech/output';
import { APL_GRADIENT_COLOR_RANGE_MIN_SIZE, APL_GRADIENT_INPUT_RANGE_MAX, APL_GRADIENT_INPUT_RANGE_MIN, } from '../../constants';
export var AplGradientType;
(function (AplGradientType) {
    AplGradientType["Linear"] = "linear";
    AplGradientType["Radial"] = "radial";
})(AplGradientType || (AplGradientType = {}));
var AplGradient = /** @class */ (function () {
    function AplGradient() {
    }
    __decorate([
        IsOptional(),
        IsEnum(AplGradientType),
        __metadata("design:type", String)
    ], AplGradient.prototype, "type", void 0);
    __decorate([
        IsOptional(),
        IsInt(),
        __metadata("design:type", Number)
    ], AplGradient.prototype, "angle", void 0);
    __decorate([
        IsArray(),
        ArrayMinSize(APL_GRADIENT_COLOR_RANGE_MIN_SIZE),
        IsString({ each: true }),
        IsNotEmpty({ each: true }),
        __metadata("design:type", Array)
    ], AplGradient.prototype, "colorRange", void 0);
    __decorate([
        IsOptional(),
        IsString(),
        IsNotEmpty(),
        __metadata("design:type", String)
    ], AplGradient.prototype, "description", void 0);
    __decorate([
        IsOptional(),
        IsArray(),
        IsNumber({}, { each: true }),
        Min(APL_GRADIENT_INPUT_RANGE_MIN, {
            each: true,
        }),
        Max(APL_GRADIENT_INPUT_RANGE_MAX, {
            each: true,
        }),
        __metadata("design:type", Array)
    ], AplGradient.prototype, "inputRange", void 0);
    return AplGradient;
}());
export { AplGradient };
//# sourceMappingURL=AplGradient.js.map