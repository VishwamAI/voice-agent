var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ArrayMinSize, CarouselItem, IsArray, IsOptional, IsString, Type, ValidateNested, } from '@jovotech/output';
import AplListJson from '../../apl/List.json';
import { APL_LIST_MIN_SIZE } from '../../constants';
import { AplHeader } from './AplHeader';
var AplList = /** @class */ (function () {
    function AplList() {
    }
    AplList.prototype.toApl = function () {
        if (this.title) {
            AplListJson.datasources.data.title = this.title;
        }
        if (this.header) {
            AplListJson.datasources.data.header = this.header;
        }
        if (this.backgroundImageUrl) {
            AplListJson.datasources.data.backgroundImageUrl = this.backgroundImageUrl;
        }
        AplListJson.datasources.data.items = this.items.map(function (item) { return (__assign(__assign({}, item), { selection: item.selection
                ? __assign({ type: 'Selection' }, item.selection) : undefined })); });
        return __assign({ type: 'Alexa.Presentation.APL.RenderDocument', token: 'token' }, AplListJson);
    };
    __decorate([
        IsOptional(),
        IsString(),
        __metadata("design:type", String)
    ], AplList.prototype, "title", void 0);
    __decorate([
        IsOptional(),
        IsString(),
        __metadata("design:type", String)
    ], AplList.prototype, "backgroundImageUrl", void 0);
    __decorate([
        IsOptional(),
        ValidateNested(),
        Type(function () { return AplHeader; }),
        __metadata("design:type", AplHeader)
    ], AplList.prototype, "header", void 0);
    __decorate([
        IsArray(),
        ArrayMinSize(APL_LIST_MIN_SIZE),
        ValidateNested({
            each: true,
        }),
        Type(function () { return CarouselItem; }),
        __metadata("design:type", Array)
    ], AplList.prototype, "items", void 0);
    return AplList;
}());
export { AplList };
//# sourceMappingURL=AplList.js.map