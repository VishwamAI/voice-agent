var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { DynamicEntitiesMode, mergeInstances, SingleResponseOutputTemplateConverterStrategy, } from '@jovotech/output';
import { AlexaResponse } from '../AlexaResponse';
import { ALEXA_STRING_MAX_LENGTH, SLOT_TYPE_VALUES_MAX_SIZE, SSML_OFFSET } from './constants';
import { DialogUpdateDynamicEntitiesDirective, DynamicEntitiesUpdateBehavior, } from './models';
import { convertMessageToOutputSpeech } from './utilities';
var AlexaOutputTemplateConverterStrategy = /** @class */ (function (_super) {
    __extends(AlexaOutputTemplateConverterStrategy, _super);
    function AlexaOutputTemplateConverterStrategy() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.platformName = 'alexa';
        _this.responseClass = AlexaResponse;
        return _this;
    }
    AlexaOutputTemplateConverterStrategy.prototype.getDefaultConfig = function () {
        return __assign(__assign({}, _super.prototype.getDefaultConfig.call(this)), { genericOutputToApl: true });
    };
    AlexaOutputTemplateConverterStrategy.prototype.sanitizeOutput = function (output) {
        var _a, _b;
        if (output.message) {
            output.message = this.sanitizeMessage(output.message, 'message');
        }
        if (output.reprompt) {
            output.reprompt = this.sanitizeMessage(output.reprompt, 'reprompt');
        }
        if (output.listen &&
            typeof output.listen === 'object' &&
            ((_b = (_a = output.listen.entities) === null || _a === void 0 ? void 0 : _a.types) === null || _b === void 0 ? void 0 : _b.length)) {
            output.listen.entities = this.sanitizeDynamicEntities(output.listen.entities, 'listen.entities.types');
        }
        return output;
    };
    AlexaOutputTemplateConverterStrategy.prototype.sanitizeMessage = function (message, path, maxLength, offset) {
        if (maxLength === void 0) { maxLength = ALEXA_STRING_MAX_LENGTH; }
        if (offset === void 0) { offset = SSML_OFFSET; }
        return _super.prototype.sanitizeMessage.call(this, message, path, maxLength, offset);
    };
    AlexaOutputTemplateConverterStrategy.prototype.sanitizeDynamicEntities = function (dynamicEntities, path, maxSize) {
        if (maxSize === void 0) { maxSize = SLOT_TYPE_VALUES_MAX_SIZE; }
        return _super.prototype.sanitizeDynamicEntities.call(this, dynamicEntities, path, maxSize);
    };
    AlexaOutputTemplateConverterStrategy.prototype.toResponse = function (output) {
        var _this = this;
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        var response = this.normalizeResponse({ version: '1.0', response: {} });
        var addToDirectives = function () {
            var _a;
            var directives = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                directives[_i] = arguments[_i];
            }
            if (!response.response.directives) {
                response.response.directives = [];
            }
            (_a = response.response.directives).push.apply(_a, directives);
        };
        var listen = (_a = output.listen) !== null && _a !== void 0 ? _a : true;
        response.response.shouldEndSession = !listen;
        if (typeof listen === 'object' && listen.entities) {
            var directive = new DialogUpdateDynamicEntitiesDirective();
            if (listen.entities.mode === DynamicEntitiesMode.Clear) {
                directive.updateBehavior = DynamicEntitiesUpdateBehavior.Clear;
            }
            else if (listen.entities.types) {
                directive.updateBehavior = DynamicEntitiesUpdateBehavior.Replace;
                directive.types = Object.keys(listen.entities.types).map(function (entityName) {
                    return _this.convertDynamicEntityToSlotType(entityName, listen.entities.types[entityName]);
                });
            }
            addToDirectives(directive);
        }
        var message = output.message;
        if (message) {
            response.response.outputSpeech = convertMessageToOutputSpeech(message);
        }
        var reprompt = output.reprompt;
        if (reprompt) {
            response.response.reprompt = {
                outputSpeech: convertMessageToOutputSpeech(reprompt),
            };
        }
        var card = output.card;
        if (card) {
            if (this.config.genericOutputToApl) {
                addToDirectives((_b = card.toApl) === null || _b === void 0 ? void 0 : _b.call(card, (_c = this.config.aplTemplates) === null || _c === void 0 ? void 0 : _c.card));
            }
            else {
                response.response.card = (_d = card.toAlexaCard) === null || _d === void 0 ? void 0 : _d.call(card);
            }
        }
        var carousel = output.carousel;
        if (carousel && this.config.genericOutputToApl) {
            addToDirectives((_e = carousel.toApl) === null || _e === void 0 ? void 0 : _e.call(carousel, (_f = this.config.aplTemplates) === null || _f === void 0 ? void 0 : _f.carousel));
        }
        var quickReplies = output.quickReplies;
        if (quickReplies && this.config.genericOutputToApl) {
            var directive = (_g = response.response.directives) === null || _g === void 0 ? void 0 : _g.find(function (directive) { return directive.type === 'Alexa.Presentation.APL.RenderDocument'; });
            if (directive) {
                if (!((_h = directive.datasources) === null || _h === void 0 ? void 0 : _h.data)) {
                    directive.datasources = {
                        data: {},
                    };
                }
                directive.datasources.data.quickReplies = quickReplies.map(function (quickReply) {
                    if (typeof quickReply === 'string') {
                        return { type: 'QuickReply', intent: quickReply };
                    }
                    else {
                        return __assign({ type: 'QuickReply' }, quickReply);
                    }
                });
            }
        }
        var list = (_k = (_j = output.platforms) === null || _j === void 0 ? void 0 : _j.alexa) === null || _k === void 0 ? void 0 : _k.list;
        if (list && this.config.genericOutputToApl) {
            addToDirectives((_l = list.toApl) === null || _l === void 0 ? void 0 : _l.call(list));
        }
        if ((_o = (_m = output.platforms) === null || _m === void 0 ? void 0 : _m.alexa) === null || _o === void 0 ? void 0 : _o.nativeResponse) {
            mergeInstances(response, output.platforms.alexa.nativeResponse);
        }
        // if the response is an empty response, set shouldEndSession to true, otherwise Alexa returns INVALID_RESPONSE
        var responseProperties = Object.keys(response.response);
        if (responseProperties.length === 1 && responseProperties.includes('shouldEndSession')) {
            response.response.shouldEndSession = true;
        }
        return response;
    };
    AlexaOutputTemplateConverterStrategy.prototype.fromResponse = function (response) {
        var _this = this;
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        var output = {};
        // abort early if there is not response-object because all data depends on that
        if (!response.response) {
            return output;
        }
        if ((((_a = response.response.outputSpeech) === null || _a === void 0 ? void 0 : _a.text) || ((_b = response.response.outputSpeech) === null || _b === void 0 ? void 0 : _b.ssml)) &&
            ((_c = response.response.outputSpeech) === null || _c === void 0 ? void 0 : _c.toMessage)) {
            output.message = response.response.outputSpeech.toMessage();
        }
        if ((((_e = (_d = response.response.reprompt) === null || _d === void 0 ? void 0 : _d.outputSpeech) === null || _e === void 0 ? void 0 : _e.text) ||
            ((_g = (_f = response.response.reprompt) === null || _f === void 0 ? void 0 : _f.outputSpeech) === null || _g === void 0 ? void 0 : _g.ssml)) &&
            ((_j = (_h = response.response.reprompt) === null || _h === void 0 ? void 0 : _h.outputSpeech) === null || _j === void 0 ? void 0 : _j.toMessage)) {
            output.reprompt = response.response.reprompt.outputSpeech.toMessage();
        }
        if (typeof response.response.shouldEndSession === 'boolean') {
            output.listen = !response.response.shouldEndSession;
        }
        if ((_k = response.response.card) === null || _k === void 0 ? void 0 : _k.toCard) {
            output.card = response.response.card.toCard();
        }
        // use reversed directives to actually get the last match instead of the first
        var reversedDirectives = (((_l = response.response.directives) === null || _l === void 0 ? void 0 : _l.slice()) || []).reverse();
        var lastDialogUpdateDirective = reversedDirectives.find(function (directive) { return directive.type === 'Dialog.UpdateDynamicEntities'; });
        if (lastDialogUpdateDirective) {
            output.listen = {
                entities: {
                    mode: lastDialogUpdateDirective.updateBehavior,
                    types: lastDialogUpdateDirective.types.reduce(function (map, type) {
                        map[type.name] = _this.convertSlotTypeToDynamicEntity(type);
                        return map;
                    }, {}),
                },
            };
        }
        return output;
    };
    AlexaOutputTemplateConverterStrategy.prototype.convertDynamicEntityToSlotType = function (name, entity) {
        return {
            name: name,
            values: (entity.values || []).slice(0, SLOT_TYPE_VALUES_MAX_SIZE).map(function (value) {
                var _a;
                return ({
                    id: value.id,
                    name: {
                        value: value.value,
                        synonyms: (_a = value.synonyms) === null || _a === void 0 ? void 0 : _a.slice(),
                    },
                });
            }),
        };
    };
    AlexaOutputTemplateConverterStrategy.prototype.convertSlotTypeToDynamicEntity = function (slotType) {
        return {
            values: slotType.values.map(function (value) {
                var _a;
                return ({
                    id: value.id || value.name.value,
                    value: value.name.value,
                    synonyms: (_a = value.name.synonyms) === null || _a === void 0 ? void 0 : _a.slice(),
                });
            }),
        };
    };
    return AlexaOutputTemplateConverterStrategy;
}(SingleResponseOutputTemplateConverterStrategy));
export { AlexaOutputTemplateConverterStrategy };
//# sourceMappingURL=AlexaOutputTemplateConverterStrategy.js.map