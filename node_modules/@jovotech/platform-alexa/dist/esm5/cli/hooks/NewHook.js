var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { readdirSync, readFileSync, writeFileSync } from 'fs';
import { join as joinPaths } from 'path';
import AlexaModel from '../boilerplate/AlexaModel.json';
import { AlexaHook } from './AlexaHook';
var NewHook = /** @class */ (function (_super) {
    __extends(NewHook, _super);
    function NewHook() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NewHook.prototype.install = function () {
        this.middlewareCollection = {
            new: [this.addSystemIntents.bind(this)],
        };
    };
    NewHook.prototype.addSystemIntents = function () {
        var modelsPath = joinPaths(this.$cli.projectPath, this.$context.projectName, 'models');
        var modelFiles = readdirSync(modelsPath);
        for (var _i = 0, modelFiles_1 = modelFiles; _i < modelFiles_1.length; _i++) {
            var modelFile = modelFiles_1[_i];
            var modelPath = joinPaths(modelsPath, modelFile);
            var rawModelData = readFileSync(modelPath, 'utf-8');
            var model = JSON.parse(rawModelData);
            var updatedModel = __assign(__assign({}, model), AlexaModel);
            writeFileSync(modelPath, JSON.stringify(updatedModel, null, 2));
        }
    };
    return NewHook;
}(AlexaHook));
export { NewHook };
//# sourceMappingURL=NewHook.js.map