var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { bundleProject, loadProject, loadProjectConfig, validateProject, } from '@alexa/acdl';
import { chalk, flags, isJovoCliError, JovoCliError, Log, printStage, ROCKET, Task, wait, } from '@jovotech/cli-core';
import { axios } from '@jovotech/framework';
import AdmZip from 'adm-zip';
import { existsSync } from 'fs';
import _get from 'lodash.get';
import { join as joinPaths } from 'path';
import * as smapi from '../smapi';
import { checkForAskCli, getACValidationErrorHint } from '../utilities';
import { AlexaHook } from './AlexaHook';
var DeployHook = /** @class */ (function (_super) {
    __extends(DeployHook, _super);
    function DeployHook() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeployHook.prototype.install = function () {
        this.middlewareCollection = {
            'install': [this.addCliOptions.bind(this)],
            'before.deploy:platform': [
                this.checkForPlatform.bind(this),
                checkForAskCli,
                this.updatePluginContext.bind(this),
                this.checkForPlatformsFolder.bind(this),
                this.updatePluginContext.bind(this),
            ],
            'deploy:platform': [this.deploy.bind(this)],
        };
    };
    /**
     * Add platform-specific CLI options, including flags and args.
     * @param context - Context providing an access point to command flags and args.
     */
    DeployHook.prototype.addCliOptions = function (context) {
        if (context.command !== 'deploy:platform') {
            return;
        }
        context.flags['ask-profile'] = flags.string({
            description: 'Name of used ASK profile',
        });
        context.flags['skill-id'] = flags.string({ char: 's', description: 'Alexa skill ID' });
        context.flags.async = flags.boolean({ description: 'Deploys Alexa skill asynchronously' });
        context.flags['skip-validation'] = flags.boolean({
            description: 'Skips validation of Alexa Conversations files',
        });
    };
    /**
     * Checks if the currently selected platform matches this CLI plugin.
     */
    DeployHook.prototype.checkForPlatform = function () {
        // Check if this plugin should be used or not.
        if (!this.$context.platforms.includes(this.$plugin.id)) {
            this.uninstall();
        }
    };
    /**
     * Updates the current plugin context with platform-specific values.
     */
    DeployHook.prototype.updatePluginContext = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _super.prototype.updatePluginContext.call(this);
                        _b = this.$context.alexa;
                        _c = this.$context.flags['ask-profile'] ||
                            this.$plugin.config.askProfile;
                        if (_c) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getAskProfile()];
                    case 1:
                        _c = (_d.sent());
                        _d.label = 2;
                    case 2:
                        _b.askProfile =
                            _c ||
                                'default';
                        this.$context.alexa.skillId = this.$context.flags['skill-id'] || this.getSkillId();
                        // TODO: this.$plugin.config.convertsations.enabled enough?
                        this.$context.alexa.isACSkill =
                            ((_a = this.$plugin.config.conversations) === null || _a === void 0 ? void 0 : _a.enabled) && existsSync(this.$plugin.conversationsDirectory);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Checks if the platform folder for the current plugin exists.
     */
    DeployHook.prototype.checkForPlatformsFolder = function () {
        if (!existsSync(this.$plugin.platformPath)) {
            throw new JovoCliError({
                message: "Couldn't find the platform folder \"" + this.$plugin.platformDirectory + "/\".",
                module: this.$plugin.name,
                hint: "Please use \"jovo build\" to create platform-specific files.",
            });
        }
    };
    /**
     * Deploys platform-specific models to the Alexa Skills Console.
     */
    DeployHook.prototype.deploy = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var deployTask, projectConfig, project_1, validationTask, compileTask, uploadTask, validateUploadTask;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        deployTask = new Task(ROCKET + " Deploying Alexa Skill " + printStage(this.$cli.project.stage));
                        if (!this.$context.alexa.isACSkill) return [3 /*break*/, 3];
                        return [4 /*yield*/, loadProjectConfig(this.$plugin.platformPath, this.$context.alexa.askProfile)];
                    case 1:
                        projectConfig = _b.sent();
                        return [4 /*yield*/, loadProject(projectConfig)];
                    case 2:
                        project_1 = _b.sent();
                        if (!this.$context.flags['skip-validation'] &&
                            !((_a = this.$plugin.config.conversations) === null || _a === void 0 ? void 0 : _a.skipValidation)) {
                            validationTask = new Task('Validating ACDL files', function () { return __awaiter(_this, void 0, void 0, function () {
                                var errors;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            errors = validateProject(project_1, true);
                                            if (errors.length) {
                                                throw new JovoCliError({
                                                    message: 'Validation failed for Alexa Conversations',
                                                    module: this.$plugin.name,
                                                    hint: getACValidationErrorHint(errors),
                                                });
                                            }
                                            return [4 /*yield*/, wait(500)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); });
                            deployTask.add(validationTask);
                        }
                        compileTask = new Task('Compiling ACDL files', function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, bundleProject(project_1, { outDir: joinPaths(this.$plugin.skillPackagePath, 'build') })];
                                    case 1:
                                        _a.sent();
                                        return [4 /*yield*/, wait(1000)];
                                    case 2:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        deployTask.add(compileTask);
                        _b.label = 3;
                    case 3:
                        uploadTask = new Task('Uploading skill package', function () { return __awaiter(_this, void 0, void 0, function () {
                            var zipPath, zip, uploadUrl, importId, _a, status, skillId;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        zipPath = this.$context.alexa.isACSkill
                                            ? joinPaths(this.$plugin.skillPackagePath, 'build', 'skill-package')
                                            : this.$plugin.skillPackagePath;
                                        zip = new AdmZip();
                                        zip.addLocalFolder(zipPath);
                                        return [4 /*yield*/, smapi.createNewUploadUrl(this.$context.alexa.askProfile)];
                                    case 1:
                                        uploadUrl = _b.sent();
                                        return [4 /*yield*/, axios({ url: uploadUrl, method: 'PUT', data: zip.toBuffer() })];
                                    case 2:
                                        _b.sent();
                                        if (!this.$context.alexa.skillId) return [3 /*break*/, 4];
                                        return [4 /*yield*/, smapi.importSkillPackage(uploadUrl, this.$context.alexa.skillId, this.$context.alexa.askProfile)];
                                    case 3:
                                        _a = _b.sent();
                                        return [3 /*break*/, 6];
                                    case 4: return [4 /*yield*/, smapi.createSkillPackage(uploadUrl, this.$context.alexa.askProfile)];
                                    case 5:
                                        _a = _b.sent();
                                        _b.label = 6;
                                    case 6:
                                        importId = _a;
                                        if (!importId) {
                                            throw new JovoCliError({
                                                message: 'Something went wrong while importing your skill package',
                                                // TODO: Command!
                                                hint: 'Try importing your skill package manually using the ASK CLI and copy the resulting skill ID into your project configuration',
                                            });
                                        }
                                        this.$context.alexa.importId = importId;
                                        if (!this.$context.flags.async) return [3 /*break*/, 8];
                                        return [4 /*yield*/, wait(3000)];
                                    case 7:
                                        _b.sent();
                                        _b.label = 8;
                                    case 8: return [4 /*yield*/, smapi.getImportStatus(importId, this.$context.alexa.askProfile, this.$context.flags.async)];
                                    case 9:
                                        status = _b.sent();
                                        skillId = status.skill.skillId;
                                        this.$context.alexa.skillId = skillId;
                                        this.setSkillId(skillId);
                                        return [2 /*return*/, "Skill ID: " + skillId];
                                }
                            });
                        }); });
                        deployTask.add(uploadTask);
                        if (!this.$context.flags.async) {
                            validateUploadTask = new Task('Validating upload', function () { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, smapi.getSkillStatus(this.$context.alexa.skillId, this.$context.alexa.askProfile)];
                                        case 1:
                                            _a.sent();
                                            return [4 /*yield*/, smapi.enableSkill(this.$context.alexa.skillId, 'development', this.$context.alexa.askProfile)];
                                        case 2:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); });
                            deployTask.add(validateUploadTask);
                        }
                        return [4 /*yield*/, deployTask.run()];
                    case 4:
                        _b.sent();
                        if (this.$context.flags.async) {
                            Log.spacer();
                            Log.warning('This is an asynchronous process. You can check the status of your skill package import using the following command:');
                            Log.info(chalk.dim("$ ask smapi get-import-status --import-id " + this.$context.alexa.importId), {
                                indent: 2,
                            });
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns Alexa Skill ID from .ask/config.
     */
    DeployHook.prototype.getSkillId = function () {
        try {
            var askConfig = this.getAskConfig();
            var askProfile = this.$context.alexa.askProfile || 'default';
            var skillId = _get(askConfig, "profiles." + askProfile + ".skillId", '');
            if (skillId && skillId.length > 0) {
                return skillId;
            }
        }
        catch (error) {
            if (!isJovoCliError(error)) {
                throw new JovoCliError({ message: error.message, module: this.$plugin.name });
            }
            throw error;
        }
    };
    /**
     * Returns skill information.
     */
    DeployHook.prototype.getSkillInformation = function () {
        try {
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            var skillJson = require(this.$plugin.skillJsonPath);
            var info = {
                name: '',
                skillId: this.getSkillId(),
            };
            var locales = _get(skillJson, 'manifest.publishingInformation.locales', []);
            for (var _i = 0, _a = Object.keys(locales); _i < _a.length; _i++) {
                var locale = _a[_i];
                info.name += locales[locale].name + ' (' + locale + ') ';
            }
            return info;
        }
        catch (err) {
            throw new JovoCliError({ message: err.message, module: this.$plugin.name });
        }
    };
    /**
     * Returns the skill's invocation name.
     * @param locale - The locale for which to get the invocation name.
     */
    DeployHook.prototype.getInvocationName = function (locale) {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        var alexaModel = require(this.$plugin.getModelPath(locale));
        return _get(alexaModel, 'interactionModel.languageModel.invocationName');
    };
    return DeployHook;
}(AlexaHook));
export { DeployHook };
//# sourceMappingURL=DeployHook.js.map