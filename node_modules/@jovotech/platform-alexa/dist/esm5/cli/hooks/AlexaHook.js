var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { JovoCliError, PluginHook, printUserInput, prompt, } from '@jovotech/cli-core';
import { existsSync, mkdirSync, readFileSync, writeFileSync } from 'fs';
import _get from 'lodash.get';
import _set from 'lodash.set';
import DefaultFiles from '../DefaultFiles.json';
var AlexaHook = /** @class */ (function (_super) {
    __extends(AlexaHook, _super);
    function AlexaHook() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AlexaHook.prototype.updatePluginContext = function () {
        var _a;
        if (!this.$context.alexa) {
            this.$context.alexa = {};
        }
        this.$context.alexa.isACSkill = (_a = this.$plugin.config.conversations) === null || _a === void 0 ? void 0 : _a.enabled;
    };
    /**
     * Saves Alexa Skill ID to .ask/config.
     * @param skillId
     */
    AlexaHook.prototype.setSkillId = function (skillId) {
        var askConfigFolderPath = this.$plugin.askConfigFolderPath;
        if (!existsSync(askConfigFolderPath)) {
            mkdirSync(askConfigFolderPath);
        }
        // Check if ask-states.json exists, if not, create it.
        if (!existsSync(this.$plugin.askConfigPath)) {
            this.createEmptyAskConfig();
        }
        var askConfig = JSON.parse(readFileSync(this.$plugin.askConfigPath, 'utf-8'));
        var askProfile = this.$context.alexa.askProfile || 'default';
        _set(askConfig, "profiles." + askProfile + ".skillId", skillId);
        writeFileSync(this.$plugin.askConfigPath, JSON.stringify(askConfig, null, 2));
    };
    /**
     * Creates an empty ask config file.
     */
    AlexaHook.prototype.createEmptyAskConfig = function () {
        var config = _get(DefaultFiles, '[".ask/"]["ask-states.json"]');
        if (config) {
            writeFileSync(this.$plugin.askConfigPath, JSON.stringify(config, null, 2));
        }
    };
    /**
     * Tries to get the ask profile from the "ask-resources.json" file
     */
    AlexaHook.prototype.getAskProfile = function () {
        return __awaiter(this, void 0, void 0, function () {
            var askResources, profiles, askProfile;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        askResources = this.getAskResources();
                        profiles = Object.keys(askResources.profiles);
                        if (!profiles.length) {
                            return [2 /*return*/];
                        }
                        if (!(profiles.length === 1)) return [3 /*break*/, 1];
                        return [2 /*return*/, profiles[0]];
                    case 1: return [4 /*yield*/, prompt({
                            name: 'askProfile',
                            type: 'select',
                            message: "Found multiple ASK profiles in ask-resources.json. Which one do you want to use?",
                            choices: profiles.map(function (profile) { return ({ title: printUserInput(profile), value: profile }); }),
                        }, {
                            onCancel: function () {
                                process.exit();
                            },
                        })];
                    case 2:
                        askProfile = (_a.sent()).askProfile;
                        return [2 /*return*/, askProfile];
                }
            });
        });
    };
    /**
     * Returns Alexa resources file
     */
    AlexaHook.prototype.getAskResources = function () {
        try {
            return JSON.parse(readFileSync(this.$plugin.askResourcesPath, 'utf-8'));
        }
        catch (err) {
            throw new JovoCliError({
                message: 'Could not read ask resources file.',
                module: this.$plugin.name,
            });
        }
    };
    /**
     * Returns Alexa Config
     */
    AlexaHook.prototype.getAskConfig = function () {
        if (existsSync(this.$plugin.askConfigPath)) {
            try {
                return JSON.parse(readFileSync(this.$plugin.askConfigPath, 'utf-8'));
            }
            catch (err) {
                throw new JovoCliError({
                    message: 'Could not read ask configuration file.',
                    module: this.$plugin.name,
                });
            }
        }
    };
    return AlexaHook;
}(PluginHook));
export { AlexaHook };
//# sourceMappingURL=AlexaHook.js.map