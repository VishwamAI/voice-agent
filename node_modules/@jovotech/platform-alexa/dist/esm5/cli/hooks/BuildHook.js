var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { ANSWER_BACKUP, ANSWER_CANCEL, deleteFolderRecursive, DISK, flags, getResolvedLocales, isJovoCliError, JovoCliError, Log, mergeArrayCustomizer, OK_HAND, printHighlight, printStage, printSubHeadline, promptOverwriteReverseBuild, REVERSE_ARROWS, STATION, Task, wait, } from '@jovotech/cli-core';
import { FileBuilder } from '@jovotech/filebuilder';
import { JovoModelAlexa } from '@jovotech/model-alexa';
import { existsSync, mkdirSync, readdirSync, readFileSync, writeFileSync } from 'fs';
import { copySync, moveSync } from 'fs-extra';
import _get from 'lodash.get';
import _has from 'lodash.has';
import _merge from 'lodash.merge';
import _mergeWith from 'lodash.mergewith';
import _set from 'lodash.set';
import { join as joinPaths } from 'path';
import { SupportedLocales } from '../constants';
import DefaultFiles from '../DefaultFiles.json';
import { AlexaHook } from './AlexaHook';
var BuildHook = /** @class */ (function (_super) {
    __extends(BuildHook, _super);
    function BuildHook() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BuildHook.prototype.install = function () {
        this.middlewareCollection = {
            'install': [this.addCliOptions.bind(this)],
            'before.build:platform': [
                this.updatePluginContext.bind(this),
                this.checkForPlatform.bind(this),
                this.checkForCleanBuild.bind(this),
                this.validateLocales.bind(this),
            ],
            'build:platform': [this.validateModels.bind(this), this.build.bind(this)],
            'build:platform.reverse': [this.buildReverse.bind(this)],
        };
    };
    /**
     * Add platform-specific CLI options, including flags and args.
     * @param context - Context providing an access point to command flags and args.
     */
    BuildHook.prototype.addCliOptions = function (context) {
        if (context.command !== 'build:platform') {
            return;
        }
        context.flags['ask-profile'] = flags.string({
            description: 'Name of used ASK profile',
        });
    };
    /**
     * Updates the current plugin context with platform-specific values.
     */
    BuildHook.prototype.updatePluginContext = function () {
        _super.prototype.updatePluginContext.call(this);
        this.$context.alexa.askProfile =
            this.$context.flags['ask-profile'] || this.$plugin.config.askProfile || 'default';
    };
    /**
     * Checks if the currently selected platform matches this CLI plugin.
     */
    BuildHook.prototype.checkForPlatform = function () {
        // Check if this plugin should be used or not.
        if (!this.$context.platforms.includes(this.$plugin.id)) {
            this.uninstall();
        }
    };
    /**
     * Checks if any provided locale is not supported, thus invalid.
     */
    BuildHook.prototype.validateLocales = function () {
        for (var _i = 0, _a = this.$context.locales; _i < _a.length; _i++) {
            var locale = _a[_i];
            var resolvedLocales = getResolvedLocales(locale, SupportedLocales, this.$plugin.config.locales);
            for (var _b = 0, resolvedLocales_1 = resolvedLocales; _b < resolvedLocales_1.length; _b++) {
                var resolvedLocale = resolvedLocales_1[_b];
                if (!SupportedLocales.includes(resolvedLocale)) {
                    throw new JovoCliError({
                        message: "Locale " + printHighlight(resolvedLocale) + " is not supported by Amazon Alexa.",
                        module: this.$plugin.name,
                        hint: resolvedLocale.length === 2
                            ? 'Alexa does not support generic locales, please specify locales in your project configuration.'
                            : '',
                        learnMore: 'https://www.jovo.tech/marketplace/platform-alexa/project-config#locales',
                    });
                }
            }
        }
    };
    /**
     * Validates Jovo models with platform-specific validators.
     */
    BuildHook.prototype.validateModels = function () {
        return __awaiter(this, void 0, void 0, function () {
            var validationTask, _loop_1, _i, _a, locale;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        validationTask = new Task(OK_HAND + " Validating Alexa model files");
                        _loop_1 = function (locale) {
                            var localeTask = new Task(locale, function () { return __awaiter(_this, void 0, void 0, function () {
                                var model;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.$cli.project.getModel(locale)];
                                        case 1:
                                            model = _a.sent();
                                            return [4 /*yield*/, this.$cli.project.validateModel(locale, model, JovoModelAlexa.getValidator(model), this.$plugin.name)];
                                        case 2:
                                            _a.sent();
                                            return [4 /*yield*/, wait(500)];
                                        case 3:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); });
                            validationTask.add(localeTask);
                        };
                        for (_i = 0, _a = this.$context.locales; _i < _a.length; _i++) {
                            locale = _a[_i];
                            _loop_1(locale);
                        }
                        return [4 /*yield*/, validationTask.run()];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Checks if --clean has been set and deletes the platform folder accordingly
     */
    BuildHook.prototype.checkForCleanBuild = function () {
        // If --clean has been set, delete the respective platform folders before building
        if (this.$context.flags.clean) {
            deleteFolderRecursive(this.$plugin.platformPath);
        }
    };
    BuildHook.prototype.build = function () {
        return __awaiter(this, void 0, void 0, function () {
            var buildPath, buildTaskTitle, buildTask, projectFilesTask, interactionModelTask, buildConversationFilesTask, buildResponseFilesTask;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        buildPath = "Path: ./" + joinPaths(this.$cli.project.getBuildDirectory(), this.$plugin.platformDirectory);
                        buildTaskTitle = STATION + " Building Alexa Skill files" + printStage(this.$cli.project.stage) + "\n" + printSubHeadline(buildPath);
                        buildTask = new Task(buildTaskTitle);
                        projectFilesTask = new Task("Project files", this.buildProjectFiles.bind(this));
                        interactionModelTask = new Task("Interaction model", this.buildInteractionModel.bind(this), {
                            enabled: this.$cli.project.config.getParameter('models.enabled') !== false &&
                                this.$cli.project.hasModelFiles(this.$context.locales),
                        });
                        buildConversationFilesTask = new Task("Alexa Conversations files", this.buildConversationsFiles.bind(this), { enabled: this.$context.alexa.isACSkill });
                        buildResponseFilesTask = new Task("Response files", this.buildResponseFiles.bind(this), { enabled: this.$context.alexa.isACSkill });
                        buildTask.add(interactionModelTask, projectFilesTask, buildConversationFilesTask, buildResponseFilesTask);
                        return [4 /*yield*/, buildTask.run()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Builds Jovo model files from platform-specific files.
     */
    BuildHook.prototype.buildReverse = function () {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var reverseBuildTask, selectedLocales, platformLocales, _i, _d, locale, buildLocaleMap, modelLocale, resolvedLocales, _e, selectedLocales_1, selectedLocale, answer, backupTask, date, modelsBackupDirectory_1, modelTask, resourcesBackupDirectory_1, resourcesTask, _loop_2, _f, _g, _h, platformLocale, modelLocale, acdlPath_1, copyAcdlFilesTask, responsesPath_1, copyResponseFilesTask;
            var _this = this;
            return __generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        // Since platform can be prompted for, check if this plugin should actually be executed again.
                        if (!this.$context.platforms.includes(this.$plugin.id)) {
                            return [2 /*return*/];
                        }
                        this.updatePluginContext();
                        reverseBuildTask = new Task(REVERSE_ARROWS + " Reversing Alexa files");
                        if (!(this.$cli.project.config.getParameter('models.enabled') !== false)) return [3 /*break*/, 4];
                        selectedLocales = [];
                        platformLocales = this.getPlatformLocales();
                        if (!this.$context.flags.locale) {
                            selectedLocales.push.apply(selectedLocales, platformLocales);
                        }
                        else {
                            // Otherwise only reverse build from the specified locale if it exists inside the platform folder.
                            for (_i = 0, _d = this.$context.flags.locale; _i < _d.length; _i++) {
                                locale = _d[_i];
                                if (platformLocales.includes(locale)) {
                                    selectedLocales.push(locale);
                                }
                                else {
                                    throw new JovoCliError({
                                        message: "Could not find platform models for locale: " + printHighlight(locale),
                                        module: this.$plugin.name,
                                        hint: "Available locales include: " + platformLocales.join(', '),
                                    });
                                }
                            }
                        }
                        buildLocaleMap = selectedLocales.reduce(function (localeMap, locale) {
                            localeMap[locale] = locale;
                            return localeMap;
                        }, {});
                        for (modelLocale in this.$plugin.config.locales) {
                            resolvedLocales = getResolvedLocales(modelLocale, SupportedLocales, this.$plugin.config.locales);
                            for (_e = 0, selectedLocales_1 = selectedLocales; _e < selectedLocales_1.length; _e++) {
                                selectedLocale = selectedLocales_1[_e];
                                if (resolvedLocales.includes(selectedLocale)) {
                                    buildLocaleMap[selectedLocale] = modelLocale;
                                }
                            }
                        }
                        if (!(this.$cli.project.hasModelFiles(Object.values(buildLocaleMap)) ||
                            (this.$context.alexa.isACSkill && existsSync(this.$plugin.resourcesDirectory)))) return [3 /*break*/, 3];
                        return [4 /*yield*/, promptOverwriteReverseBuild()];
                    case 1:
                        answer = _j.sent();
                        if (answer.overwrite === ANSWER_CANCEL) {
                            return [2 /*return*/];
                        }
                        if (!(answer.overwrite === ANSWER_BACKUP)) return [3 /*break*/, 3];
                        Log.spacer();
                        backupTask = new Task(DISK + " Creating backups");
                        date = new Date().toISOString();
                        if (existsSync(this.$cli.project.getModelsDirectory())) {
                            modelsBackupDirectory_1 = this.$cli.project.getModelsDirectory() + "." + date;
                            modelTask = new Task(this.$cli.project.getModelsDirectory() + " -> " + modelsBackupDirectory_1, function () {
                                moveSync(_this.$cli.project.getModelsDirectory(), modelsBackupDirectory_1, {
                                    overwrite: true,
                                });
                            });
                            backupTask.add(modelTask);
                        }
                        if (existsSync(this.$plugin.resourcesDirectory)) {
                            resourcesBackupDirectory_1 = this.$plugin.resourcesDirectory + "." + date;
                            resourcesTask = new Task(this.$plugin.resourcesDirectory + " -> " + resourcesBackupDirectory_1, function () {
                                moveSync(_this.$plugin.resourcesDirectory, resourcesBackupDirectory_1, {
                                    overwrite: true,
                                });
                            });
                            backupTask.add(resourcesTask);
                        }
                        return [4 /*yield*/, backupTask.run()];
                    case 2:
                        _j.sent();
                        _j.label = 3;
                    case 3:
                        _loop_2 = function (platformLocale, modelLocale) {
                            var taskDetails = platformLocale === modelLocale ? '' : "(" + modelLocale + ")";
                            var localeTask = new Task(platformLocale + " " + taskDetails, function () { return __awaiter(_this, void 0, void 0, function () {
                                var alexaModelFiles, jovoModel, nativeData;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            alexaModelFiles = [
                                                {
                                                    path: [],
                                                    content: this.getPlatformModel(platformLocale),
                                                },
                                            ];
                                            jovoModel = new JovoModelAlexa();
                                            jovoModel.importNative(alexaModelFiles, modelLocale);
                                            nativeData = jovoModel.exportJovoModel();
                                            if (!nativeData) {
                                                throw new JovoCliError({
                                                    message: 'Something went wrong while exporting your Jovo model.',
                                                    module: this.$plugin.name,
                                                });
                                            }
                                            this.$cli.project.saveModel(nativeData, modelLocale);
                                            return [4 /*yield*/, wait(500)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); });
                            reverseBuildTask.add(localeTask);
                        };
                        for (_f = 0, _g = Object.entries(buildLocaleMap); _f < _g.length; _f++) {
                            _h = _g[_f], platformLocale = _h[0], modelLocale = _h[1];
                            _loop_2(platformLocale, modelLocale);
                        }
                        _j.label = 4;
                    case 4:
                        if (this.$context.alexa.isACSkill && ((_a = this.$plugin.config.conversations) === null || _a === void 0 ? void 0 : _a.directory)) {
                            if (((_b = this.$plugin.config.conversations) === null || _b === void 0 ? void 0 : _b.acdlDirectory) &&
                                existsSync(this.$plugin.conversationsDirectory)) {
                                acdlPath_1 = joinPaths(this.$plugin.config.conversations.directory, this.$plugin.config.conversations.acdlDirectory);
                                copyAcdlFilesTask = new Task("Copying Alexa Conversations files into " + acdlPath_1, function () { return copySync(_this.$plugin.conversationsDirectory, acdlPath_1); });
                                reverseBuildTask.add(copyAcdlFilesTask);
                            }
                            if (((_c = this.$plugin.config.conversations) === null || _c === void 0 ? void 0 : _c.responsesDirectory) &&
                                existsSync(this.$plugin.responseDirectory)) {
                                responsesPath_1 = joinPaths(this.$plugin.config.conversations.directory, this.$plugin.config.conversations.responsesDirectory);
                                copyResponseFilesTask = new Task("Copying Response files into " + responsesPath_1, function () { return copySync(_this.$plugin.responseDirectory, responsesPath_1); });
                                reverseBuildTask.add(copyResponseFilesTask);
                            }
                        }
                        return [4 /*yield*/, reverseBuildTask.run()];
                    case 5:
                        _j.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Builds the Alexa skill manifest.
     */
    BuildHook.prototype.buildProjectFiles = function () {
        var _a, _b;
        var files = FileBuilder.normalizeFileObject(_get(this.$plugin.config, 'files', {}));
        // If platforms folder doesn't exist, take default files and parse them with project.js config into FileBuilder.
        var projectFiles = this.$cli.project.hasPlatform(this.$plugin.platformDirectory)
            ? files
            : _merge(DefaultFiles, files);
        // Merge global project.js properties with platform files.
        var endpoint = this.getPluginEndpoint();
        var endpointPath = 'skill-package/["skill.json"].manifest.apis.custom.endpoint';
        // If a global endpoint is given and one is not already specified, set the global one.
        if (!_has(projectFiles, endpointPath)) {
            // If endpoint is of type ARN, omit the Wildcard certificate.
            var certificate = !endpoint.startsWith('arn') ? 'Wildcard' : null;
            // Create basic HTTPS endpoint from Wildcard SSL.
            _set(projectFiles, endpointPath, {
                sslCertificateType: certificate,
                uri: endpoint,
            });
        }
        // replace ${JOVO_WEBHOOK_URL} in event uri with the Jovo Webhook url
        var eventEndpointUriPath = 'skill-package/["skill.json"].manifest.events.endpoint.uri';
        if (_has(projectFiles, eventEndpointUriPath)) {
            _set(projectFiles, eventEndpointUriPath, this.$cli.resolveEndpoint(_get(projectFiles, eventEndpointUriPath).toString()));
        }
        // Create entries for Alexa Conversations
        var conversationsPath = 'skill-package/["skill.json"].manifest.apis.custom.dialogManagement';
        if (this.$context.alexa.isACSkill && !_has(projectFiles, conversationsPath)) {
            _set(projectFiles, conversationsPath, {
                sessionStartDelegationStrategy: {
                    target: (_b = (_a = this.$plugin.config.conversations) === null || _a === void 0 ? void 0 : _a.sessionStartDelegationStrategy) === null || _b === void 0 ? void 0 : _b.target,
                },
                dialogManagers: [
                    {
                        type: 'AMAZON.Conversations',
                    },
                ],
            });
        }
        // Create ask profile entry
        var askResourcesPath = "[\"ask-resources.json\"].profiles." + this.$context.alexa.askProfile;
        if (!_has(projectFiles, askResourcesPath)) {
            _set(projectFiles, askResourcesPath, {
                skillMetadata: {
                    src: './skill-package',
                },
            });
        }
        var askConfigPath = "[\".ask/\"].[\"ask-states.json\"].profiles." + this.$context.alexa.askProfile;
        var skillId = this.$plugin.config.skillId;
        var skillIdPath = askConfigPath + ".skillId";
        // Check whether skill id has already been set.
        if (skillId && !_has(projectFiles, skillIdPath)) {
            _set(projectFiles, skillIdPath, skillId);
        }
        this.checkLocales(projectFiles);
        FileBuilder.buildDirectory(projectFiles, this.$plugin.platformPath);
    };
    BuildHook.prototype.checkLocales = function (projectFiles) {
        var _this = this;
        var locales = this.$context.locales.reduce(function (locales, locale) {
            locales.push.apply(locales, getResolvedLocales(locale, SupportedLocales, _this.$plugin.config.locales));
            return locales;
        }, []);
        var privacyAndCompliances = _get(projectFiles, "skill-package/[\"skill.json\"].manifest.privacyAndCompliance.locales", {});
        var publishingInfos = _get(projectFiles, "skill-package/[\"skill.json\"].manifest.publishingInformation.locales", {});
        var _loop_3 = function (locale) {
            var genericLocaleKey = Object.keys(this_1.$plugin.config.locales || {}).find(function (key) {
                return __spreadArray([], _this.$plugin.config.locales[key], true).includes(locale);
            });
            this_1.mergeGenericLocale(publishingInfos, locale, genericLocaleKey);
            // Check whether publishing information has already been set.
            if (!publishingInfos[locale])
                publishingInfos[locale] = this_1.getDefaultPublishingInformation();
            this_1.mergeGenericLocale(privacyAndCompliances, locale, genericLocaleKey);
            // Check whether privacy and compliance information has already been set.
            if (!privacyAndCompliances[locale])
                privacyAndCompliances[locale] = this_1.getDefaultPrivacyAndCompliances();
        };
        var this_1 = this;
        for (var _i = 0, locales_1 = locales; _i < locales_1.length; _i++) {
            var locale = locales_1[_i];
            _loop_3(locale);
        }
        // clear generic locales from projectFiles
        for (var _a = 0, _b = Object.keys(privacyAndCompliances); _a < _b.length; _a++) {
            var key = _b[_a];
            if (!locales.includes(key))
                delete privacyAndCompliances[key];
        }
        for (var _c = 0, _d = Object.keys(publishingInfos); _c < _d.length; _c++) {
            var key = _d[_c];
            if (!locales.includes(key))
                delete publishingInfos[key];
        }
        _set(projectFiles, 'skill-package/["skill.json"].manifest.publishingInformation.locales', publishingInfos);
        _set(projectFiles, 'skill-package/["skill.json"].manifest.privacyAndCompliance.locales', privacyAndCompliances);
    };
    BuildHook.prototype.mergeGenericLocale = function (fileObject, locale, genericLocale) {
        if (genericLocale && fileObject[genericLocale]) {
            fileObject[locale] = _merge({}, fileObject[genericLocale], fileObject[locale]);
        }
    };
    BuildHook.prototype.getDefaultPublishingInformation = function () {
        var skillName = this.$cli.project.getProjectName();
        return {
            summary: 'Sample Short Description',
            examplePhrases: ['Alexa open hello world'],
            keywords: ['hello', 'world'],
            name: skillName,
            description: 'Sample Full Description',
            smallIconUri: 'https://via.placeholder.com/108/09f/09f.png',
            largeIconUri: 'https://via.placeholder.com/512/09f/09f.png',
        };
    };
    BuildHook.prototype.getDefaultPrivacyAndCompliances = function () {
        return {
            privacyPolicyUrl: 'http://example.com/policy',
            termsOfUseUrl: '',
        };
    };
    /**
     * Creates and returns tasks for each locale to build the interaction model for Alexa.
     */
    BuildHook.prototype.buildInteractionModel = function () {
        return __awaiter(this, void 0, void 0, function () {
            var output, _i, _a, locale, resolvedLocales, resolvedLocalesOutput, taskDetails;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        output = [];
                        _i = 0, _a = this.$context.locales;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 5];
                        locale = _a[_i];
                        resolvedLocales = getResolvedLocales(locale, SupportedLocales, this.$plugin.config.locales);
                        resolvedLocalesOutput = resolvedLocales.join(', ');
                        taskDetails = resolvedLocalesOutput === locale ? '' : "(" + resolvedLocalesOutput + ")";
                        return [4 /*yield*/, this.buildLanguageModel(locale, resolvedLocales)];
                    case 2:
                        _b.sent();
                        return [4 /*yield*/, wait(500)];
                    case 3:
                        _b.sent();
                        output.push(locale + " " + taskDetails);
                        _b.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 1];
                    case 5: return [2 /*return*/, output];
                }
            });
        });
    };
    /**
     * Builds and saves an Alexa model from a Jovo model.
     * @param modelLocale - Locale of the Jovo model.
     * @param resolvedLocales - Locales to which to resolve the modelLocale.
     */
    BuildHook.prototype.buildLanguageModel = function (modelLocale, resolvedLocales) {
        return __awaiter(this, void 0, void 0, function () {
            var model, _a, _i, resolvedLocales_2, locale, jovoModel, alexaModelFiles, modelsPath;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = _merge;
                        return [4 /*yield*/, this.getJovoModel(modelLocale)];
                    case 1:
                        model = _a.apply(void 0, [_b.sent(), this.$cli.project.config.getParameter("models.override." + modelLocale)]);
                        try {
                            for (_i = 0, resolvedLocales_2 = resolvedLocales; _i < resolvedLocales_2.length; _i++) {
                                locale = resolvedLocales_2[_i];
                                jovoModel = new JovoModelAlexa(model, locale);
                                alexaModelFiles = jovoModel.exportNative();
                                if (!alexaModelFiles || !alexaModelFiles.length) {
                                    // Should actually never happen but who knows
                                    throw new JovoCliError({
                                        message: "Could not build Alexa files for locale \"" + locale + "\"!",
                                        module: this.$plugin.name,
                                    });
                                }
                                modelsPath = this.$plugin.modelsPath;
                                if (!existsSync(modelsPath)) {
                                    mkdirSync(modelsPath, { recursive: true });
                                }
                                writeFileSync(this.$plugin.getModelPath(locale), JSON.stringify(alexaModelFiles[0].content, null, 2));
                            }
                        }
                        catch (error) {
                            if (!isJovoCliError(error)) {
                                throw new JovoCliError({ message: error.message, module: this.$plugin.name });
                            }
                            throw error;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    BuildHook.prototype.buildConversationsFiles = function () {
        var src = joinPaths(this.$plugin.config.conversations.directory, this.$plugin.config.conversations.acdlDirectory);
        if (!existsSync(src)) {
            throw new JovoCliError({
                message: "Directory for Alexa Conversations files does not exist at " + src,
                module: this.$plugin.name,
                hint: "Try creating your .acdl files in " + src + " or specify the directory of your choice in the project configuration",
            });
        }
        copySync(src, this.$plugin.conversationsDirectory);
    };
    BuildHook.prototype.buildResponseFiles = function () {
        var src = joinPaths(this.$plugin.config.conversations.directory, this.$plugin.config.conversations.responsesDirectory);
        if (!existsSync(src)) {
            throw new JovoCliError({
                message: "Directory for Alexa response files does not exist at " + src,
                module: this.$plugin.name,
                hint: "Try creating your APL-A response files in " + src + " or specify the directory of your choice in the project configuration",
            });
        }
        copySync(src, this.$plugin.responseDirectory);
    };
    /**
     * Get plugin-specific endpoint.
     */
    BuildHook.prototype.getPluginEndpoint = function () {
        var endpoint = _get(this.$plugin.config, 'endpoint') ||
            this.$cli.project.config.getParameter('endpoint');
        if (!endpoint) {
            throw new JovoCliError({
                message: 'endpoint has to be set',
                hint: 'Try setting your endpoint in the project configuration',
                learnMore: 'https://www.jovo.tech/docs/project-config#endpoint',
            });
        }
        return this.$cli.resolveEndpoint(endpoint);
    };
    /**
     * Loads a platform-specific model.
     * @param locale - Locale of the model.
     */
    BuildHook.prototype.getPlatformModel = function (locale) {
        var content = readFileSync(this.$plugin.getModelPath(locale), 'utf-8');
        return JSON.parse(content);
    };
    /**
     * Returns all locales for the current platform.
     */
    BuildHook.prototype.getPlatformLocales = function () {
        var files = readdirSync(this.$plugin.modelsPath);
        if (!existsSync(this.$plugin.modelsPath)) {
            throw new JovoCliError({
                message: 'Could not find Alexa language models',
                details: "\"" + this.$plugin.modelsPath + "\" does not exist",
                hint: 'Please validate that you configured the "buildDirectory" or "stage" correctly',
            });
        }
        // Map each file to it's identifier, without file extension.
        return files.map(function (file) {
            var localeRegex = /(.*)\.(?:[^.]+)$/;
            var match = localeRegex.exec(file);
            // ToDo: Test!
            if (!match) {
                return file;
            }
            return match[1];
        });
    };
    /**
     * Loads a Jovo model specified by a locale and merges it with plugin-specific models.
     * @param locale - The locale that specifies which model to load.
     */
    BuildHook.prototype.getJovoModel = function (locale) {
        return __awaiter(this, void 0, void 0, function () {
            var model;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$cli.project.getModel(locale)];
                    case 1:
                        model = _a.sent();
                        // Merge model with configured language model in project.js.
                        _mergeWith(model, this.$cli.project.config.getParameter("languageModel." + locale) || {}, mergeArrayCustomizer);
                        // Merge model with configured, platform-specific language model in project.js.
                        _mergeWith(model, _get(this.$plugin.config, "options.languageModel." + locale, {}), mergeArrayCustomizer);
                        return [2 /*return*/, model];
                }
            });
        });
    };
    return BuildHook;
}(AlexaHook));
export { BuildHook };
//# sourceMappingURL=BuildHook.js.map