var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { decompileProject, loadProject, loadProjectConfig } from '@alexa/acdl';
import { ANSWER_CANCEL, deleteFolderRecursive, DOWNLOAD, flags, Log, MAGNIFYING_GLASS, printAskProfile, promptOverwrite, Task, } from '@jovotech/cli-core';
import { existsSync, mkdirSync, writeFileSync } from 'fs';
import _get from 'lodash.get';
import _set from 'lodash.set';
import DefaultFiles from '../DefaultFiles.json';
import * as smapi from '../smapi';
import { checkForAskCli, prepareSkillList, promptListForAlexaSkill } from '../utilities';
import { AlexaHook } from './AlexaHook';
var GetHook = /** @class */ (function (_super) {
    __extends(GetHook, _super);
    function GetHook() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GetHook.prototype.install = function () {
        this.middlewareCollection = {
            'install': [this.addCliOptions.bind(this)],
            'before.get:platform': [
                this.checkForPlatform.bind(this),
                checkForAskCli,
                this.updatePluginContext.bind(this),
                this.checkForCleanGet.bind(this),
                this.checkForExistingPlatformFiles.bind(this),
                this.checkForPlatformsFolder.bind(this),
            ],
            'get:platform': [this.get.bind(this)],
        };
    };
    /**
     * Add platform-specific CLI options, including flags and args.
     * @param context - Context providing an access point to command flags and args.
     */
    GetHook.prototype.addCliOptions = function (context) {
        if (context.command !== 'get:platform') {
            return;
        }
        context.flags['ask-profile'] = flags.string({
            description: 'Name of used ASK profile',
        });
        context.flags['skill-id'] = flags.string({ char: 's', description: 'Alexa Skill ID' });
        context.flags['skill-stage'] = flags.string({
            description: 'Alexa Skill Stage',
            options: ['development', 'live', 'certification'],
            default: 'development',
        });
    };
    /**
     * Checks if the currently selected platform matches this CLI plugin.
     */
    GetHook.prototype.checkForPlatform = function () {
        // Check if this plugin should be used or not.
        if (!this.$context.platforms.includes(this.$plugin.id)) {
            this.uninstall();
        }
    };
    /**
     * Updates the current plugin context with platform-specific values.
     */
    GetHook.prototype.updatePluginContext = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _super.prototype.updatePluginContext.call(this);
                        _a = this.$context.alexa;
                        _b = this.$context.flags['ask-profile'] ||
                            this.$plugin.config.askProfile;
                        if (_b) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getAskProfile()];
                    case 1:
                        _b = (_c.sent());
                        _c.label = 2;
                    case 2:
                        _a.askProfile =
                            _b ||
                                'default';
                        this.$context.alexa.skillId =
                            this.$context.flags['skill-id'] ||
                                _get(this.$plugin.config, "[\".ask/\"][\"ask-states.json\"].profiles." + (this.$context.alexa.askProfile || 'default') + ".skillId") ||
                                _get(this.$plugin.config, 'skillId');
                        this.$context.alexa.skillStage = this.$context.flags['skill-stage'];
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Checks if --clean has been set and deletes the platform folder accordingly
     */
    GetHook.prototype.checkForCleanGet = function () {
        // If --clean has been set, delete the respective platform folders before building
        if (this.$context.flags.clean) {
            deleteFolderRecursive(this.$plugin.platformPath);
        }
    };
    /**
     * Checks if platform-specific files already exist and prompts for overwriting them.
     */
    GetHook.prototype.checkForExistingPlatformFiles = function () {
        return __awaiter(this, void 0, void 0, function () {
            var answer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!existsSync(this.$plugin.skillPackagePath)) return [3 /*break*/, 2];
                        return [4 /*yield*/, promptOverwrite('Found existing Alexa skill package. How to proceed?')];
                    case 1:
                        answer = _a.sent();
                        if (answer.overwrite === ANSWER_CANCEL) {
                            this.uninstall();
                        }
                        deleteFolderRecursive(this.$plugin.skillPackagePath);
                        Log.spacer();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Checks if the platform folder for the current plugin exists
     */
    GetHook.prototype.checkForPlatformsFolder = function () {
        if (!existsSync(this.$plugin.platformPath)) {
            mkdirSync(this.$plugin.platformPath);
        }
    };
    /**
     * Fetches platform-specific models from the Alexa Skills Console.
     */
    GetHook.prototype.get = function () {
        return __awaiter(this, void 0, void 0, function () {
            var skills_1, getSkillListTask, searchTask, list, skill, error_1, getTask, exportTask, decompileTask, askResources;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.$context.alexa.skillId) return [3 /*break*/, 5];
                        skills_1 = { skills: [] };
                        getSkillListTask = new Task(MAGNIFYING_GLASS + " Getting a list of all your skills");
                        searchTask = new Task('Searching', function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, smapi.listSkills(this.$context.alexa.askProfile)];
                                    case 1:
                                        skills_1 = _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        getSkillListTask.add(searchTask);
                        return [4 /*yield*/, getSkillListTask.run()];
                    case 1:
                        _a.sent();
                        Log.spacer();
                        list = prepareSkillList(skills_1);
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, promptListForAlexaSkill(list)];
                    case 3:
                        skill = (_a.sent()).skill;
                        Log.spacer();
                        this.$context.alexa.skillId = skill.skillId;
                        this.$context.alexa.skillStage = skill.stage;
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _a.sent();
                        return [2 /*return*/];
                    case 5:
                        getTask = new Task(DOWNLOAD + " Getting Alexa skill project " + printAskProfile(this.$context.alexa.askProfile));
                        exportTask = new Task('Exporting skill package', function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, smapi.exportSkillPackage(this.$context.alexa.skillId, this.$context.alexa.skillStage, this.$plugin.platformPath, this.$context.alexa.askProfile)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        getTask.add(exportTask);
                        if (this.$context.alexa.isACSkill) {
                            decompileTask = new Task('Decompiling ACDL files', function () { return __awaiter(_this, void 0, void 0, function () {
                                var projectConfig, project;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (!existsSync(this.$plugin.conversationsDirectory)) {
                                                return [2 /*return*/];
                                            }
                                            return [4 /*yield*/, loadProjectConfig(this.$plugin.platformPath, this.$context.alexa.askProfile)];
                                        case 1:
                                            projectConfig = _a.sent();
                                            return [4 /*yield*/, loadProject(projectConfig)];
                                        case 2:
                                            project = _a.sent();
                                            return [4 /*yield*/, decompileProject(project)];
                                        case 3:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); });
                            getTask.add(decompileTask);
                        }
                        // Create ask-resources.json
                        if (!existsSync(this.$plugin.askResourcesPath)) {
                            askResources = _get(DefaultFiles, 'ask-resources.json');
                            _set(askResources, "profiles." + (this.$context.alexa.askProfile || 'default'), {
                                skillMetadata: {
                                    src: './skill-package',
                                },
                            });
                            writeFileSync(this.$plugin.askResourcesPath, JSON.stringify(askResources, null, 2));
                        }
                        // Set skill ID and generate .ask/ask-states.json if it does not yet exist
                        this.setSkillId(this.$context.alexa.skillId);
                        return [4 /*yield*/, getTask.run()];
                    case 6:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return GetHook;
}(AlexaHook));
export { GetHook };
//# sourceMappingURL=GetHook.js.map