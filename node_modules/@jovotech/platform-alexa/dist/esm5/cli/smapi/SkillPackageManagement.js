var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { JovoCliError, wait } from '@jovotech/cli-core';
import { execAskCommand } from '../utilities';
export function createNewUploadUrl(askProfile) {
    return __awaiter(this, void 0, void 0, function () {
        var stdout, uploadUrl;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, execAskCommand('smapiCreateUploadUrl', 'ask smapi create-upload-url', askProfile)];
                case 1:
                    stdout = (_a.sent()).stdout;
                    uploadUrl = JSON.parse(stdout).uploadUrl;
                    return [2 /*return*/, uploadUrl];
            }
        });
    });
}
export function createSkillPackage(location, askProfile) {
    return __awaiter(this, void 0, void 0, function () {
        var stdout;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, execAskCommand('smapiCreateSkillPackage', ['ask smapi create-skill-package', '--full-response', "--location \"" + location + "\""], askProfile)];
                case 1:
                    stdout = (_a.sent()).stdout;
                    return [2 /*return*/, parseImportUrl(JSON.parse(stdout))];
            }
        });
    });
}
export function importSkillPackage(location, skillId, askProfile) {
    return __awaiter(this, void 0, void 0, function () {
        var stdout;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, execAskCommand('smapiImportSkillPackage', [
                        'ask smapi import-skill-package',
                        '--full-response',
                        "--location \"" + location + "\"",
                        "-s " + skillId,
                    ], askProfile)];
                case 1:
                    stdout = (_a.sent()).stdout;
                    return [2 /*return*/, parseImportUrl(JSON.parse(stdout))];
            }
        });
    });
}
export function exportSkillPackage(skillId, stage, cwd, askProfile) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, execAskCommand('smapiExportPackage', ['ask smapi export-package', "-s " + skillId, "-g " + stage], askProfile, { cwd: cwd })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
export function getImportStatus(importId, askProfile, isAsync) {
    if (isAsync === void 0) { isAsync = false; }
    return __awaiter(this, void 0, void 0, function () {
        var stdout, status, errorResource;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, execAskCommand('smapiGetImportStatus', ['ask smapi get-import-status', "--import-id \"" + importId + "\""], askProfile)];
                case 1:
                    stdout = (_a.sent()).stdout;
                    status = JSON.parse(stdout);
                    // If --async is passed, return the status and exit, otherwise wait until the import has finished
                    if (isAsync) {
                        return [2 /*return*/, status];
                    }
                    if (!(status.status === 'IN_PROGRESS')) return [3 /*break*/, 4];
                    return [4 /*yield*/, wait(500)];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, getImportStatus(importId, askProfile)];
                case 3: return [2 /*return*/, _a.sent()];
                case 4:
                    if (status.status === 'FAILED') {
                        errorResource = status.skill.resources.find(function (r) { return r.errors; });
                        throw new JovoCliError({
                            message: 'Errors occured while importing your skill package',
                            hint: errorResource
                                ? errorResource.errors[0].message
                                : JSON.stringify(status.skill.resources, null, 2),
                        });
                    }
                    _a.label = 5;
                case 5: return [2 /*return*/, status];
            }
        });
    });
}
function parseImportUrl(_a) {
    var _b;
    var headers = _a.headers;
    return (_b = headers['location']) === null || _b === void 0 ? void 0 : _b.split('/').pop();
}
//# sourceMappingURL=SkillPackageManagement.js.map