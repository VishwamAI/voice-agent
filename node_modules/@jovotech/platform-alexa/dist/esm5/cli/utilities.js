var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { execAsync, getRawString, isJovoCliError, JovoCliError, Log, prompt, } from '@jovotech/cli-core';
import chalk from 'chalk';
import { copyFileSync, existsSync, mkdirSync, readdirSync, statSync } from 'fs';
import _get from 'lodash.get';
import { join as joinPaths } from 'path';
/**
 * Checks if ask cli is installed.
 */
export function checkForAskCli() {
    return __awaiter(this, void 0, void 0, function () {
        var stdout, majorVersion, minorVersion, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, execAsync('ask --version')];
                case 1:
                    stdout = (_a.sent()).stdout;
                    majorVersion = parseInt(stdout[0]);
                    minorVersion = parseInt(stdout.slice(2, 4));
                    if (majorVersion < 2 || (majorVersion == 2 && minorVersion < 30)) {
                        throw new JovoCliError({
                            message: 'Jovo CLI requires ASK CLI @v2.30.0 or above.',
                            module: 'AlexaCli',
                            hint: 'Please update your ASK CLI using "npm install ask-cli -g".',
                        });
                    }
                    return [3 /*break*/, 3];
                case 2:
                    error_1 = _a.sent();
                    if (!isJovoCliError(error_1)) {
                        throw new JovoCliError({
                            message: 'Jovo CLI requires ASK CLI',
                            module: 'AlexaCli',
                            hint: 'Install the ASK CLI with "npm install ask-cli -g".',
                            learnMore: 'https://developer.amazon.com/docs/smapi/quick-start-alexa-skills-kit-command-line-interface.html',
                        });
                    }
                    throw error_1;
                case 3: return [2 /*return*/];
            }
        });
    });
}
/**
 * Generates a choice list out of an ASK skill list.
 * @param askSkillList - List of Alexa Skills returned by the ASK CLI.
 */
export function prepareSkillList(askSkillList) {
    var choices = [];
    for (var _i = 0, _a = askSkillList.skills; _i < _a.length; _i++) {
        var item = _a[_i];
        var key = Object.keys(item.nameByLocale)[0];
        var message = item.nameByLocale[key];
        var stage = item.stage === 'development' ? 'dev' : item.stage;
        message +=
            " " + (stage === 'live' ? chalk.green(stage) : chalk.blue(stage)) + " " +
                ("- " + item.lastUpdated.substr(0, 10)) +
                (" " + chalk.grey(item.skillId));
        choices.push({
            title: message,
            value: {
                skillId: item.skillId,
                stage: item.stage,
            },
        });
    }
    return choices;
}
export function getACValidationErrorHint(errors) {
    return errors.reduce(function (output, error) {
        return [
            Log.info(output, { dry: true }),
            Log.info(chalk.dim("[" + error.code.code + "]"), {
                dry: true,
                newLine: false,
            }),
            Log.info(error.message, { dry: true, newLine: false }),
            error.uri
                ? Log.info(chalk.dim("in " + error.uri.split('/').pop()), {
                    dry: true,
                    newLine: false,
                })
                : undefined,
            error.loc
                ? Log.info(chalk.dim("(l. " + error.loc.begin.line + ")"), {
                    dry: true,
                    newLine: false,
                })
                : undefined,
        ].join(' ');
    }, '');
}
export function getAskError(method, stderr) {
    var module = 'AlexaCli';
    var splitter = '[Error]: ';
    var errorIndex = stderr.indexOf(splitter);
    if (errorIndex > -1) {
        var errorString = getRawString(stderr.substring(errorIndex + splitter.length));
        try {
            var parsedError = JSON.parse(errorString);
            var payload = _get(parsedError, 'detail.response', parsedError);
            var details = getViolations(payload);
            return new JovoCliError({ message: method + ": " + payload.message, module: module, details: details });
        }
        catch (error) {
            return new JovoCliError({ message: method + ": " + errorString, module: module });
        }
    }
    else {
        // Try parsing for alternative error message.
        var i = void 0, pathRegex = void 0;
        // Depending on the type of error message, try using different regular expressions to parse the actual error message.
        if (stderr.includes('CliFileNotFoundError')) {
            i = stderr.indexOf('CliFileNotFoundError');
            pathRegex = /File (\/.*\/)+(.*) not exists\./g;
        }
        else if (stderr.includes('ENOENT')) {
            i = stderr.indexOf('ENOENT');
            pathRegex = /'(\/.*\/)*(.*)'/g;
        }
        else {
            return new JovoCliError({ message: stderr, module: module });
        }
        // Check for different error messages, if a file cannot be found.
        var parsedError = stderr.substring(i);
        var match = pathRegex.exec(parsedError);
        // File-specific error messages
        if (match && match.length > 2) {
            if (match[2] === 'cli_config') {
                return new JovoCliError({
                    message: "ASK CLI is unable to find your configuration file at " + match[1] + ".",
                    module: module,
                    hint: "Please configure at least one ask profile using the command 'ask configure'.",
                });
            }
            return new JovoCliError({
                message: "ASK CLI is unable to find your " + match[2] + " at " + match[1] + ".",
                module: module,
                hint: 'If this error persists, try rebuilding your platform folder using "jovo build:platform alexa".',
            });
        }
    }
    return new JovoCliError({ message: stderr, module: module });
}
function getViolations(payload) {
    var _a, _b;
    var violations = '';
    if (payload.violations) {
        for (var _i = 0, _c = payload.violations; _i < _c.length; _i++) {
            var violation = _c[_i];
            violations += violation.message;
        }
    }
    if ((_b = (_a = payload.detail) === null || _a === void 0 ? void 0 : _a.response) === null || _b === void 0 ? void 0 : _b.message) {
        violations = payload.detail.response.message;
    }
    return violations;
}
export function copyFiles(src, dest) {
    if (!existsSync(dest)) {
        mkdirSync(dest, { recursive: true });
    }
    for (var _i = 0, _a = readdirSync(src); _i < _a.length; _i++) {
        var file = _a[_i];
        var srcFile = joinPaths(src, file);
        var destFile = joinPaths(dest, file);
        if (statSync(srcFile).isDirectory()) {
            copyFiles(srcFile, destFile);
        }
        else {
            copyFileSync(srcFile, destFile);
        }
    }
}
export function execAskCommand(id, cmd, askProfile, execOptions) {
    return __awaiter(this, void 0, void 0, function () {
        var error_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!Array.isArray(cmd)) {
                        cmd = [cmd];
                    }
                    if (askProfile) {
                        cmd.push("-p " + askProfile);
                    }
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, execAsync(cmd.join(' '), execOptions)];
                case 2: return [2 /*return*/, _a.sent()];
                case 3:
                    error_2 = _a.sent();
                    throw getAskError(id, error_2.stderr || error_2.message);
                case 4: return [2 /*return*/];
            }
        });
    });
}
/**
 * Prompt for a project, depending on provided choices.
 * @param choices - Array of choices (projects) to choose from.
 */
export function promptListForAlexaSkill(choices) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, prompt({
                        name: 'skill',
                        type: 'select',
                        message: 'Select your project:',
                        choices: choices,
                    }, {
                        onCancel: function () {
                            process.exit();
                        },
                    })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
//# sourceMappingURL=utilities.js.map