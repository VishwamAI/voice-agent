var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { JovoCliPlugin, Log, promptSupportedLocales, } from '@jovotech/cli-core';
import { writeFileSync } from 'fs';
import { join as joinPaths, resolve } from 'path';
import { SupportedLocales } from './constants';
import { BuildHook } from './hooks/BuildHook';
import { DeployHook } from './hooks/DeployHook';
import { GetHook } from './hooks/GetHook';
import { NewHook } from './hooks/NewHook';
import { CertifyCommand } from './commands/CertifyCommand';
import { ValidateCommand } from './commands/ValidateCommand';
var AlexaCli = /** @class */ (function (_super) {
    __extends(AlexaCli, _super);
    function AlexaCli(config) {
        var _this = _super.call(this, config) || this;
        // Convert boolean value of this.config.conversations to object to handle it unified across hooks
        if (typeof _this.config.conversations === 'boolean') {
            var defaultConversationsConfig = _this.getDefaultConfig().conversations;
            _this.config.conversations = __assign(__assign({}, defaultConversationsConfig), { enabled: _this.config.conversations });
        }
        return _this;
    }
    Object.defineProperty(AlexaCli.prototype, "id", {
        get: function () {
            return 'alexa';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AlexaCli.prototype, "type", {
        get: function () {
            return 'platform';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AlexaCli.prototype, "platformDirectory", {
        get: function () {
            return this.type + "." + this.id;
        },
        enumerable: false,
        configurable: true
    });
    AlexaCli.prototype.getDefaultConfig = function () {
        return {
            conversations: {
                enabled: false,
                // ! Since getDefaultConfig() is called before this.id is assigned, we need to set it manually
                directory: joinPaths('resources', 'alexa', 'conversations'),
                sessionStartDelegationStrategy: {
                    target: 'skill',
                },
                acdlDirectory: 'acdl',
                responsesDirectory: 'responses',
                skipValidation: false,
            },
        };
    };
    AlexaCli.prototype.getInitConfig = function () {
        return __awaiter(this, void 0, void 0, function () {
            var initConfig, packageJsonPath, packageJson, _i, _a, locale, locales;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        initConfig = {};
                        packageJsonPath = resolve(joinPaths(this.$cli.projectPath, this.$context.projectName, 'package.json'));
                        packageJson = require(packageJsonPath);
                        packageJson.scripts.bundle = packageJson.scripts.bundle + " --external:@alexa/*";
                        writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
                        _i = 0, _a = this.$context.locales;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 4];
                        locale = _a[_i];
                        if (!!SupportedLocales.includes(locale)) return [3 /*break*/, 3];
                        // Prompt user for alternative locale.
                        Log.spacer();
                        return [4 /*yield*/, promptSupportedLocales(locale, 'Alexa', SupportedLocales)];
                    case 2:
                        locales = (_b.sent()).locales;
                        if (!locales.length) {
                            return [3 /*break*/, 3];
                        }
                        if (!initConfig.locales) {
                            initConfig.locales = {};
                        }
                        initConfig.locales[locale] = locales;
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, initConfig];
                }
            });
        });
    };
    AlexaCli.prototype.getHooks = function () {
        return [BuildHook, GetHook, DeployHook, NewHook];
    };
    AlexaCli.prototype.getCommands = function () {
        return [CertifyCommand, ValidateCommand];
    };
    Object.defineProperty(AlexaCli.prototype, "platformPath", {
        /**
         * The base path to platform's build folder
         */
        get: function () {
            return joinPaths(this.$cli.project.getBuildPath(), this.platformDirectory);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AlexaCli.prototype, "resourcesDirectory", {
        get: function () {
            return joinPaths('resources', this.id);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AlexaCli.prototype, "skillPackagePath", {
        /**
         * The path to Alexa skill package folder
         */
        get: function () {
            return joinPaths(this.platformPath, 'skill-package');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AlexaCli.prototype, "skillJsonPath", {
        /**
         * The path to the skill.json file
         */
        get: function () {
            return joinPaths(this.skillPackagePath, 'skill.json');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AlexaCli.prototype, "modelsPath", {
        get: function () {
            return joinPaths(this.skillPackagePath, 'interactionModels', 'custom');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AlexaCli.prototype, "accountLinkingPath", {
        get: function () {
            return joinPaths(this.skillPackagePath, 'accountLinking.json');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AlexaCli.prototype, "askConfigFolderPath", {
        get: function () {
            return joinPaths(this.platformPath, '.ask');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AlexaCli.prototype, "askConfigPath", {
        get: function () {
            return joinPaths(this.askConfigFolderPath, 'ask-states.json');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AlexaCli.prototype, "askResourcesPath", {
        get: function () {
            return joinPaths(this.platformPath, 'ask-resources.json');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AlexaCli.prototype, "conversationsDirectory", {
        get: function () {
            return joinPaths(this.skillPackagePath, 'conversations');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AlexaCli.prototype, "responseDirectory", {
        get: function () {
            return joinPaths(this.skillPackagePath, 'response');
        },
        enumerable: false,
        configurable: true
    });
    AlexaCli.prototype.getModelPath = function (locale) {
        return joinPaths(this.modelsPath, locale + ".json");
    };
    return AlexaCli;
}(JovoCliPlugin));
export { AlexaCli };
//# sourceMappingURL=index.js.map