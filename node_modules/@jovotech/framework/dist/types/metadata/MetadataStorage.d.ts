import { BaseComponent, ComponentConstructor } from '../BaseComponent';
import { BaseOutput, OutputConstructor } from '../BaseOutput';
import { ComponentMetadata } from './ComponentMetadata';
import { ComponentOptionMetadata } from './ComponentOptionMetadata';
import { HandlerMetadata } from './HandlerMetadata';
import { HandlerOptionMetadata } from './HandlerOptionMetadata';
import { OutputMetadata } from './OutputMetadata';
import { InjectableMetadata } from './InjectableMetadata';
import { Constructor } from '@jovotech/common';
import { InjectMetadata } from './InjectMetadata';
export declare class MetadataStorage {
    private static instance;
    readonly componentMetadata: ComponentMetadata[];
    readonly componentOptionMetadata: ComponentOptionMetadata[];
    readonly handlerMetadata: HandlerMetadata[];
    readonly handlerOptionMetadata: HandlerOptionMetadata[];
    readonly outputMetadata: OutputMetadata[];
    readonly injectableMetadata: InjectableMetadata[];
    readonly injectMetadata: InjectMetadata[];
    private constructor();
    static getInstance(): MetadataStorage;
    addComponentMetadata<COMPONENT extends BaseComponent>(metadata: ComponentMetadata<COMPONENT>): void;
    getComponentMetadata<COMPONENT extends BaseComponent>(target: ComponentConstructor<COMPONENT> | Function): ComponentMetadata<COMPONENT> | undefined;
    getMergedComponentMetadata<COMPONENT extends BaseComponent>(target: ComponentConstructor<COMPONENT> | Function): ComponentMetadata<COMPONENT> | undefined;
    addComponentOptionMetadata<COMPONENT extends BaseComponent>(metadata: ComponentOptionMetadata<COMPONENT>): void;
    getComponentOptionMetadata<COMPONENT extends BaseComponent>(target: ComponentConstructor<COMPONENT> | Function): ComponentOptionMetadata<COMPONENT>[];
    addOutputMetadata<OUTPUT extends BaseOutput>(target: OutputConstructor<OUTPUT>, name: string): void;
    getOutputMetadata<OUTPUT extends BaseOutput>(target: OutputConstructor<OUTPUT> | Function): OutputMetadata<OUTPUT> | undefined;
    getOutputMetadataByName<OUTPUT extends BaseOutput>(name: string): OutputMetadata<OUTPUT> | undefined;
    addHandlerMetadata<COMPONENT extends BaseComponent, KEY extends keyof COMPONENT>(metadata: HandlerMetadata<COMPONENT, KEY>): void;
    getHandlerMetadataOfComponent<COMPONENT extends BaseComponent>(target: ComponentConstructor<COMPONENT> | Function): HandlerMetadata<COMPONENT, keyof COMPONENT>[];
    getMergedHandlerMetadataOfComponent<COMPONENT extends BaseComponent>(target: ComponentConstructor<COMPONENT> | Function): HandlerMetadata<COMPONENT, keyof COMPONENT>[];
    /**
     * Merges the handler metadata of a component with the handler metadata of its superclass.
     * When a child class declares a handler with the same name as a handler of its superclass,
     * the child class handler overrides the superclass handler and replaces all of its annotations.
     *
     * @param handlerMetadata
     * @param parentMetadata
     * @private
     */
    private mergeHandlerMetadataWithParent;
    addHandlerOptionMetadata<COMPONENT extends BaseComponent, KEY extends keyof COMPONENT>(metadata: HandlerOptionMetadata<COMPONENT, KEY>): void;
    getHandlerOptionMetadataOfComponent<COMPONENT extends BaseComponent>(target: ComponentConstructor<COMPONENT> | Function): HandlerOptionMetadata<COMPONENT, keyof COMPONENT>[];
    addInjectableMetadata<PROVIDER>(metadata: InjectableMetadata<PROVIDER>): void;
    getInjectableMetadata<PROVIDER>(target: Constructor<PROVIDER> | Function): InjectableMetadata<PROVIDER> | undefined;
    addInjectMetadata<PROVIDER>(metadata: InjectMetadata<PROVIDER>): void;
    getMergedInjectMetadata<PROVIDER>(target: Constructor<PROVIDER> | Function): InjectMetadata<PROVIDER>[];
    getInjectMetadataAtIndex<PROVIDER>(target: Constructor<PROVIDER> | Function, index: number): InjectMetadata<PROVIDER> | undefined;
    clearAll(): void;
}
