import { ClassDecoratorMetadata } from './ClassDecoratorMetadata';
import { AnyObject, Constructor, Abstract } from '@jovotech/common';
import { Jovo } from '../Jovo';
export interface InjectableOptions {
}
export declare class InjectableMetadata<PROVIDER = AnyObject> extends ClassDecoratorMetadata {
    readonly target: Constructor<PROVIDER>;
    readonly options?: InjectableOptions | undefined;
    constructor(target: Constructor<PROVIDER>, options?: InjectableOptions | undefined);
}
export interface ValueProvider<PROVIDER> {
    provide: InjectionToken;
    useValue: PROVIDER;
}
export interface ClassProvider<PROVIDER> {
    provide: InjectionToken;
    useClass: Constructor<PROVIDER>;
}
export interface FactoryProvider<PROVIDER> {
    provide: InjectionToken;
    useFactory: (jovo: Jovo) => PROVIDER;
}
export interface ExistingProvider {
    provide: InjectionToken;
    useExisting: InjectionToken;
}
export declare type InjectionToken = string | symbol | Constructor<any> | Abstract<any> | Function;
export declare type Provider<PROVIDER> = Constructor<PROVIDER> | ValueProvider<PROVIDER> | ClassProvider<PROVIDER> | FactoryProvider<PROVIDER> | ExistingProvider;
