var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import chalk from 'chalk';
import colorize from 'json-colorizer';
import { LoggingFormat } from '../enums';
import { Plugin } from '../Plugin';
import { copy, mask } from '../utilities';
var BasicLogging = /** @class */ (function (_super) {
    __extends(BasicLogging, _super);
    function BasicLogging(config) {
        var _this = this;
        if ((config === null || config === void 0 ? void 0 : config.enabled) === false) {
            if (typeof config.request === 'undefined') {
                config.request = false;
            }
            if (typeof config.response === 'undefined') {
                config.response = false;
            }
        }
        _this = _super.call(this, config) || this;
        if (typeof _this.config.request === 'boolean') {
            _this.config.request = {
                objects: [],
                maskedObjects: [],
                excludedObjects: [],
                enabled: _this.config.request,
            };
        }
        if (typeof _this.config.response === 'boolean') {
            _this.config.response = {
                objects: [],
                maskedObjects: [],
                excludedObjects: [],
                enabled: _this.config.response,
            };
        }
        return _this;
    }
    BasicLogging.prototype.getDefaultConfig = function () {
        return {
            skipTests: true,
            enabled: true,
            request: {
                enabled: true,
                excludedObjects: [],
                maskedObjects: [],
                objects: [],
            },
            response: {
                enabled: true,
                excludedObjects: [],
                maskedObjects: [],
                objects: [],
            },
            format: LoggingFormat.Pretty,
            styling: true,
            maskValue: '[ Hidden ]',
            indentation: 2,
            colorizeSettings: {
                colors: {
                    STRING_KEY: 'white',
                    STRING_LITERAL: 'green',
                    NUMBER_LITERAL: 'yellow',
                    BRACE: 'white.bold',
                },
            },
        };
    };
    BasicLogging.prototype.mount = function (parent) {
        var _this = this;
        parent.middlewareCollection.use('request.start', function (jovo) {
            if (_this.config.request.enabled) {
                return _this.logRequest(jovo);
            }
        });
        parent.middlewareCollection.use('response.end', function (jovo) {
            if (_this.config.response.enabled) {
                return _this.logResponse(jovo);
            }
        });
    };
    BasicLogging.prototype.logRequest = function (jovo) {
        return __awaiter(this, void 0, void 0, function () {
            var requestConfig, requestCopy;
            return __generator(this, function (_a) {
                jovo.$data._BASIC_LOGGING_START = new Date().getTime();
                requestConfig = this.config.request;
                requestCopy = copy(jovo.$request, {
                    include: requestConfig.objects,
                    exclude: requestConfig.excludedObjects,
                });
                // Mask properties according to configuration
                if (requestConfig.maskedObjects && requestConfig.maskedObjects.length > 0) {
                    mask(requestCopy, requestConfig.maskedObjects, this.config.maskValue);
                }
                if (this.config.format === LoggingFormat.Pretty) {
                    if (this.config.styling) {
                        // eslint-disable-next-line no-console
                        console.log(chalk.bgWhite.black('\n\n >>>>> Request - ' + new Date().toISOString() + ' '));
                    }
                    // eslint-disable-next-line no-console
                    console.log(colorize(JSON.stringify(requestCopy, null, this.config.indentation || 2), this.config.colorizeSettings));
                }
                else if (this.config.format === LoggingFormat.Json) {
                    // eslint-disable-next-line no-console
                    console.log(colorize(JSON.stringify(requestCopy), this.config.colorizeSettings));
                }
                return [2 /*return*/];
            });
        });
    };
    BasicLogging.prototype.logResponse = function (jovo) {
        return __awaiter(this, void 0, void 0, function () {
            var basicLoggingEnd, duration, responseConfig, responseCopy;
            return __generator(this, function (_a) {
                basicLoggingEnd = new Date().getTime();
                duration = jovo.$data._BASIC_LOGGING_START
                    ? basicLoggingEnd - jovo.$data._BASIC_LOGGING_START
                    : 0;
                responseConfig = this.config.response;
                responseCopy = copy(jovo.$response, {
                    include: responseConfig.objects,
                    exclude: responseConfig.excludedObjects,
                });
                if (responseConfig.maskedObjects && responseConfig.maskedObjects.length > 0) {
                    mask(responseCopy, responseConfig.maskedObjects, this.config.maskValue);
                }
                if (this.config.format === LoggingFormat.Pretty) {
                    // eslint-disable-next-line no-console
                    console.log(chalk.bgGray.white('\n\n <<<<< Response - ' + new Date().toISOString() + ' ') +
                        ' ✔️ ' +
                        duration +
                        'ms');
                    // eslint-disable-next-line no-console
                    console.log(colorize(JSON.stringify(responseCopy, null, this.config.indentation || 2), this.config.colorizeSettings));
                }
                else if (this.config.format === LoggingFormat.Json) {
                    // eslint-disable-next-line no-console
                    console.log(colorize(JSON.stringify(responseCopy), this.config.colorizeSettings));
                }
                return [2 /*return*/];
            });
        });
    };
    return BasicLogging;
}(Plugin));
export { BasicLogging };
//# sourceMappingURL=BasicLogging.js.map