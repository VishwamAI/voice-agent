var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { InputType } from '@jovotech/common';
import { DuplicateGlobalIntentsError } from '../errors/DuplicateGlobalIntentsError';
import { MetadataStorage } from '../metadata/MetadataStorage';
import { Plugin } from '../Plugin';
import { RoutingExecutor } from './RoutingExecutor';
var RouterPlugin = /** @class */ (function (_super) {
    __extends(RouterPlugin, _super);
    function RouterPlugin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RouterPlugin.prototype.getDefaultConfig = function () {
        return {};
    };
    RouterPlugin.prototype.initialize = function (parent) {
        return this.checkForDuplicateGlobalHandlers(parent);
    };
    RouterPlugin.prototype.mount = function (parent) {
        var _this = this;
        parent.middlewareCollection.use('dialogue.router', function (jovo) {
            return _this.setRoute(jovo);
        });
    };
    RouterPlugin.prototype.setRoute = function (jovo) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var mergedIntentMap, mappedIntent, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (jovo.$input.type === InputType.Error) {
                            return [2 /*return*/, jovo.$app.handleError(new Error(jovo.$input.getText() || 'Input is of type ERROR'), jovo)];
                        }
                        mergedIntentMap = __assign(__assign({}, (((_a = jovo.$config.routing) === null || _a === void 0 ? void 0 : _a.intentMap) || {})), (jovo.$platform.config.intentMap || {}));
                        mappedIntent = this.getMappedIntent(jovo.$input, mergedIntentMap);
                        if (mappedIntent) {
                            jovo.$input.intent = mappedIntent;
                        }
                        _b = jovo;
                        return [4 /*yield*/, new RoutingExecutor(jovo).execute()];
                    case 1:
                        _b.$route = _c.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RouterPlugin.prototype.getMappedIntent = function (input, intentMap) {
        var _a;
        var intent = input.intent || ((_a = input.nlu) === null || _a === void 0 ? void 0 : _a.intent);
        if (!intent)
            return;
        var intentName = typeof intent === 'string' ? intent : intent.name;
        var mappedIntentName = intentMap === null || intentMap === void 0 ? void 0 : intentMap[intentName];
        if (!mappedIntentName)
            return;
        return input.intent && typeof input.intent === 'object'
            ? __assign(__assign({}, input.intent), { name: mappedIntentName }) : mappedIntentName;
    };
    RouterPlugin.prototype.checkForDuplicateGlobalHandlers = function (app) {
        return new Promise(function (resolve, reject) {
            var _a;
            var globalHandlerMap = {};
            // make an intent map out of all the intent maps of all platforms
            var platformIntentMap = app.platforms.reduce(function (intentMap, platform) {
                return __assign(__assign({}, intentMap), (platform.config.intentMap || {}));
            }, {});
            // merge the global intent map with the intent map created by all platforms
            var mergedIntentMap = __assign(__assign({}, (((_a = app.config.routing) === null || _a === void 0 ? void 0 : _a.intentMap) || {})), platformIntentMap);
            app.componentTree.forEach(function (node) {
                var componentHandlerMetadata = MetadataStorage.getInstance().getMergedHandlerMetadataOfComponent(node.metadata.target);
                componentHandlerMetadata.forEach(function (handlerMetadata) {
                    handlerMetadata.globalIntentNames.forEach(function (globalIntentName) {
                        var mappedIntentName = (mergedIntentMap === null || mergedIntentMap === void 0 ? void 0 : mergedIntentMap[globalIntentName]) || globalIntentName;
                        if (!globalHandlerMap[mappedIntentName]) {
                            globalHandlerMap[mappedIntentName] = [];
                        }
                        if (!handlerMetadata.hasCondition &&
                            !globalHandlerMap[mappedIntentName].includes(handlerMetadata)) {
                            globalHandlerMap[mappedIntentName].push(handlerMetadata);
                        }
                    });
                });
            });
            var duplicateHandlerEntries = Object.entries(globalHandlerMap).filter(function (_a) {
                var handlers = _a[1];
                return handlers.length > 1;
            });
            if (duplicateHandlerEntries.length) {
                return reject(new DuplicateGlobalIntentsError(duplicateHandlerEntries));
            }
            return resolve();
        });
    };
    return RouterPlugin;
}(Plugin));
export { RouterPlugin };
//# sourceMappingURL=RouterPlugin.js.map