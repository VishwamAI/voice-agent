import { BuiltInHandler } from '../enums';
var RouteMatch = /** @class */ (function () {
    function RouteMatch(metadata, path, stackIndex) {
        this.metadata = metadata;
        this.path = path;
        this.stackIndex = stackIndex;
    }
    Object.defineProperty(RouteMatch.prototype, "component", {
        get: function () {
            return this.path.join('.');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RouteMatch.prototype, "handler", {
        get: function () {
            return this.metadata.propertyKey;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RouteMatch.prototype, "score", {
        get: function () {
            var _a, _b;
            var score = 0;
            // make if higher ranked than any other condition option
            if ((_a = this.metadata.options) === null || _a === void 0 ? void 0 : _a.if) {
                score += 1.5;
            }
            if ((_b = this.metadata.options) === null || _b === void 0 ? void 0 : _b.platforms) {
                score++;
            }
            return score;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RouteMatch.prototype, "subState", {
        get: function () {
            var _a;
            return (_a = this.metadata.options) === null || _a === void 0 ? void 0 : _a.subState;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RouteMatch.prototype, "global", {
        get: function () {
            var _a;
            return (_a = this.metadata.options) === null || _a === void 0 ? void 0 : _a.global;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RouteMatch.prototype, "prioritizedOverUnhandled", {
        get: function () {
            var _a;
            return (_a = this.metadata.options) === null || _a === void 0 ? void 0 : _a.prioritizedOverUnhandled;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RouteMatch.prototype, "type", {
        get: function () {
            return this.metadata.intentNames.includes(BuiltInHandler.Unhandled)
                ? BuiltInHandler.Unhandled
                : undefined;
        },
        enumerable: false,
        configurable: true
    });
    RouteMatch.prototype.toJSON = function () {
        return {
            component: this.component,
            handler: this.handler,
            type: this.type,
            subState: this.subState,
            global: this.global,
            skip: this.skip,
            prioritizedOverUnhandled: this.prioritizedOverUnhandled,
        };
    };
    return RouteMatch;
}());
export { RouteMatch };
//# sourceMappingURL=RouteMatch.js.map