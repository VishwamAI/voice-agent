var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { ParsedAudioInput } from '../audio/ParsedAudioInput';
import { InvalidParentError } from '../errors/InvalidParentError';
import { Platform } from '../Platform';
import { Plugin } from '../Plugin';
// Provide basic functionality that will then be used by AsrPlugin, NluPlugin and SluPlugin
var InterpretationPlugin = /** @class */ (function (_super) {
    __extends(InterpretationPlugin, _super);
    function InterpretationPlugin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InterpretationPlugin.prototype.mount = function (parent) {
        var _this = this;
        if (!(parent instanceof Platform)) {
            throw new InvalidParentError(this.name, 'Platform');
        }
        if (this.processAudio) {
            parent.middlewareCollection.use('interpretation.asr', function (jovo) {
                return _this.asr(jovo);
            });
        }
        if (this.processText) {
            parent.middlewareCollection.use('interpretation.nlu', function (jovo) {
                return _this.nlu(jovo);
            });
        }
        if (this.supportsIntentScoping && this.supportsIntentScoping()) {
            parent.middlewareCollection.use('after.response.output', function (jovo) {
                return _this.storeListenIntents(jovo); // Store intents in _JOVO_LISTEN_INTENTS_ session variable
            });
        }
    };
    InterpretationPlugin.prototype.isInputTypeSupported = function (inputType) {
        return this.config.input.supportedTypes.includes(inputType);
    };
    InterpretationPlugin.prototype.asr = function (jovo) {
        return __awaiter(this, void 0, void 0, function () {
            var parsedAudioInput, asrProcessResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // if this plugin is not able to process audio, a text is already set, no audio is set or the input type is not supported, skip
                        if (!this.processAudio ||
                            jovo.$input.getText() ||
                            !jovo.$input.audio ||
                            !this.isInputTypeSupported(jovo.$input.type)) {
                            return [2 /*return*/];
                        }
                        parsedAudioInput = ParsedAudioInput.fromAudioInput(jovo.$input.audio);
                        if (this.targetSampleRate) {
                            parsedAudioInput.sampleDown(this.targetSampleRate);
                        }
                        return [4 /*yield*/, this.processAudio(jovo, parsedAudioInput)];
                    case 1:
                        asrProcessResult = _a.sent();
                        if (asrProcessResult) {
                            jovo.$input.asr = asrProcessResult;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    InterpretationPlugin.prototype.nlu = function (jovo) {
        return __awaiter(this, void 0, void 0, function () {
            var text, nluProcessResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        text = jovo.$input.getText();
                        // if this plugin is not able to process text, no text exists or the input type is not supported, skip
                        if (!this.processText || !text || !this.isInputTypeSupported(jovo.$input.type)) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.processText(jovo, text)];
                    case 1:
                        nluProcessResult = _a.sent();
                        if (nluProcessResult) {
                            jovo.$input.nlu = nluProcessResult;
                            jovo.$entities = nluProcessResult.entities || {};
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Extract the intents from the listen objects in all $output templates and store them for the next request
     * @see https://www.jovo.tech/docs/nlu#intent-scoping
     * @param jovo - Jovo instance
     */
    InterpretationPlugin.prototype.storeListenIntents = function (jovo) {
        var _a, _b, _c;
        var intents = [];
        for (var _i = 0, _d = jovo.$output; _i < _d.length; _i++) {
            var output = _d[_i];
            var listen = (_c = (_b = (_a = output.platforms) === null || _a === void 0 ? void 0 : _a[jovo.$platform.name]) === null || _b === void 0 ? void 0 : _b.listen) !== null && _c !== void 0 ? _c : output.listen;
            if (typeof listen !== 'object' || !listen.intents) {
                continue;
            }
            intents.push.apply(intents, listen.intents);
        }
        jovo.$session.data._JOVO_LISTEN_INTENTS_ = intents.length ? intents : undefined;
    };
    return InterpretationPlugin;
}(Plugin));
export { InterpretationPlugin };
//# sourceMappingURL=InterpretationPlugin.js.map