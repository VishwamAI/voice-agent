var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { SsmlUtilities } from '@jovotech/common';
import { AudioUtilities, InvalidParentError } from '..';
import { Platform } from '../Platform';
import { Plugin } from '../Plugin';
import { Md5 } from 'ts-md5';
export var TtsTextType;
(function (TtsTextType) {
    TtsTextType["Text"] = "text";
    TtsTextType["Ssml"] = "ssml";
})(TtsTextType || (TtsTextType = {}));
// Provide basic functionality that will then be used by all TTS plugins
var TtsPlugin = /** @class */ (function (_super) {
    __extends(TtsPlugin, _super);
    function TtsPlugin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TtsPlugin.prototype.mount = function (parent) {
        var _this = this;
        if (!(parent instanceof Platform)) {
            throw new InvalidParentError(this.name, 'Platform');
        }
        parent.middlewareCollection.use('response.tts', function (jovo) {
            return _this.tts(jovo);
        });
    };
    TtsPlugin.prototype.tts = function (jovo) {
        return __awaiter(this, void 0, void 0, function () {
            var response, speech, speechList, replaceList, reprompt, repromptList, replaceList;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        response = jovo.$response;
                        // if this plugin is not able to process tts, skip
                        if (!this.processTts || !response) {
                            return [2 /*return*/];
                        }
                        if (!response.getSpeech) return [3 /*break*/, 2];
                        speech = response.getSpeech() || [];
                        speechList = Array.isArray(speech) ? speech : [speech];
                        return [4 /*yield*/, this.processTextList(jovo, speechList)];
                    case 1:
                        replaceList = _a.sent();
                        if (replaceList && response.replaceSpeech) {
                            response.replaceSpeech(replaceList);
                        }
                        _a.label = 2;
                    case 2:
                        if (!response.getReprompt) return [3 /*break*/, 4];
                        reprompt = response.getReprompt() || [];
                        repromptList = Array.isArray(reprompt) ? reprompt : [reprompt];
                        return [4 /*yield*/, this.processTextList(jovo, repromptList)];
                    case 3:
                        replaceList = _a.sent();
                        if (replaceList && response.replaceReprompt) {
                            response.replaceReprompt(replaceList);
                        }
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    TtsPlugin.prototype.processTextList = function (jovo, textList) {
        return __awaiter(this, void 0, void 0, function () {
            var replaceList, _i, textList_1, item, result, audioTag;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        replaceList = [];
                        _i = 0, textList_1 = textList;
                        _a.label = 1;
                    case 1:
                        if (!(_i < textList_1.length)) return [3 /*break*/, 4];
                        item = textList_1[_i];
                        return [4 /*yield*/, this.processTextItem(jovo, item)];
                    case 2:
                        result = _a.sent();
                        audioTag = this.buildAudioTag(result);
                        if (audioTag) {
                            replaceList.push(audioTag);
                        }
                        _a.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4:
                        if (replaceList.length === 0) {
                            return [2 /*return*/];
                        }
                        return [2 /*return*/, replaceList];
                }
            });
        });
    };
    TtsPlugin.prototype.processTextItem = function (jovo, text) {
        return __awaiter(this, void 0, void 0, function () {
            var textType, prefix, audioKey, locale, ttsResponse, url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!text) {
                            return [2 /*return*/];
                        }
                        textType = SsmlUtilities.isPlainText(text) ? TtsTextType.Text : TtsTextType.Ssml;
                        if (this.getKeyPrefix) {
                            prefix = this.getKeyPrefix(jovo);
                        }
                        audioKey = this.buildKey(text, prefix);
                        locale = this.getLocale(jovo);
                        if (!this.config.cache) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.config.cache.getItem(audioKey, locale, this.config.outputFormat)];
                    case 1:
                        ttsResponse = _a.sent();
                        if (ttsResponse) {
                            if (!ttsResponse.text) {
                                ttsResponse.text = text;
                            }
                        }
                        _a.label = 2;
                    case 2:
                        if (!!ttsResponse) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.processTts(jovo, text, textType)];
                    case 3:
                        ttsResponse = _a.sent();
                        if (!ttsResponse) return [3 /*break*/, 5];
                        ttsResponse.key = audioKey;
                        if (!this.config.cache) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.config.cache.storeItem(audioKey, locale, ttsResponse)];
                    case 4:
                        url = _a.sent();
                        if (url) {
                            ttsResponse.url = url;
                        }
                        _a.label = 5;
                    case 5: return [2 /*return*/, ttsResponse];
                }
            });
        });
    };
    TtsPlugin.prototype.buildAudioTag = function (data) {
        if (data === null || data === void 0 ? void 0 : data.url) {
            return SsmlUtilities.buildAudioTag(data.url);
        }
        else if ((data === null || data === void 0 ? void 0 : data.encodedAudio) && (data === null || data === void 0 ? void 0 : data.contentType)) {
            return SsmlUtilities.buildAudioTag(AudioUtilities.buildBase64Uri(data.encodedAudio, data.contentType));
        }
    };
    TtsPlugin.prototype.buildKey = function (text, prefix) {
        var hash = Md5.hashStr(text);
        return prefix ? prefix + "-" + hash : hash;
    };
    TtsPlugin.prototype.getLocale = function (jovo) {
        return jovo.$request.getLocale() || this.config.fallbackLocale;
    };
    return TtsPlugin;
}(Plugin));
export { TtsPlugin };
//# sourceMappingURL=TtsPlugin.js.map