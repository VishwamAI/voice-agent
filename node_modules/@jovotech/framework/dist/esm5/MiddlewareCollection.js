var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { Middleware } from './Middleware';
var MiddlewareCollection = /** @class */ (function () {
    function MiddlewareCollection() {
        var names = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            names[_i] = arguments[_i];
        }
        this.middlewares = names.reduce(function (middlewares, middlewareName) {
            middlewares[middlewareName] = new Middleware(middlewareName);
            return middlewares;
        }, {});
    }
    Object.defineProperty(MiddlewareCollection.prototype, "names", {
        get: function () {
            return Object.keys(this.middlewares);
        },
        enumerable: false,
        configurable: true
    });
    MiddlewareCollection.prototype.use = function (name) {
        var fns = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            fns[_i - 1] = arguments[_i];
        }
        var middleware = this.get(name);
        if (!middleware) {
            middleware = new Middleware(name);
            this.add(middleware);
        }
        middleware.use.apply(middleware, fns);
        return this;
    };
    MiddlewareCollection.prototype.add = function () {
        var _this = this;
        var namesOrMiddlewares = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            namesOrMiddlewares[_i] = arguments[_i];
        }
        namesOrMiddlewares.forEach(function (nameOrMiddleware) {
            if (typeof nameOrMiddleware === 'string') {
                _this.middlewares[nameOrMiddleware] = new Middleware(nameOrMiddleware);
            }
            else {
                _this.middlewares[nameOrMiddleware.name] = nameOrMiddleware;
            }
        });
        return this;
    };
    MiddlewareCollection.prototype.has = function (name) {
        return !!this.middlewares[name] && this.middlewares[name] instanceof Middleware;
    };
    MiddlewareCollection.prototype.get = function (name) {
        return this.middlewares[name];
    };
    MiddlewareCollection.prototype.remove = function () {
        var _this = this;
        var names = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            names[_i] = arguments[_i];
        }
        names.forEach(function (name) {
            if (_this.has(name)) {
                delete _this.middlewares[name];
            }
        });
        return this;
    };
    MiddlewareCollection.prototype.clear = function () {
        this.remove.apply(this, this.names);
        return this;
    };
    MiddlewareCollection.prototype.run = function (nameOrNames, jovo, payload) {
        return __awaiter(this, void 0, void 0, function () {
            var names, _i, names_1, name_1, beforeName, middleware, afterName;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        names = typeof nameOrNames === 'string' ? [nameOrNames] : nameOrNames;
                        _i = 0, names_1 = names;
                        _a.label = 1;
                    case 1:
                        if (!(_i < names_1.length)) return [3 /*break*/, 7];
                        name_1 = names_1[_i];
                        beforeName = "before." + name_1;
                        if (!this.has(beforeName)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.run(beforeName, jovo, payload)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        middleware = this.get(name_1);
                        return [4 /*yield*/, (middleware === null || middleware === void 0 ? void 0 : middleware.run(jovo, payload))];
                    case 4:
                        _a.sent();
                        afterName = "after." + name_1;
                        if (!this.has(afterName)) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.run(afterName, jovo, payload)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        _i++;
                        return [3 /*break*/, 1];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    MiddlewareCollection.prototype.disable = function () {
        var _this = this;
        var names = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            names[_i] = arguments[_i];
        }
        names.forEach(function (name) {
            var middleware = _this.get(name);
            if (middleware) {
                middleware.enabled = false;
            }
        });
        return this;
    };
    MiddlewareCollection.prototype.enable = function () {
        var _this = this;
        var names = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            names[_i] = arguments[_i];
        }
        names.forEach(function (name) {
            var middleware = _this.get(name);
            if (middleware) {
                middleware.enabled = true;
            }
        });
        return this;
    };
    return MiddlewareCollection;
}());
export { MiddlewareCollection };
//# sourceMappingURL=MiddlewareCollection.js.map