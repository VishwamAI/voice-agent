var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { MetadataStorage } from './metadata/MetadataStorage';
import { CircularDependencyError } from './errors/CircularDependencyError';
import { UnresolvableDependencyError } from './errors/UnresolvableDependencyError';
import { InvalidDependencyError } from './errors/InvalidDependencyError';
var INSTANTIATE_DEPENDENCY_MIDDLEWARE = 'event.DependencyInjector.instantiateDependency';
var DependencyInjector = /** @class */ (function () {
    function DependencyInjector() {
    }
    DependencyInjector.resolveInjectionToken = function (jovo, token, dependencyPath) {
        var _a;
        if (dependencyPath.includes(token)) {
            throw new CircularDependencyError(dependencyPath);
        }
        var providers = __spreadArray(__spreadArray([], jovo.$app.providers, true), jovo.$app.systemProviders, true);
        var updatedPath = __spreadArray(__spreadArray([], dependencyPath, true), [token], false);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var injection = providers.find(function (injection) {
            if (typeof injection === 'function') {
                return injection === token;
            }
            else {
                return injection.provide === token;
            }
        });
        if (!injection) {
            return undefined;
        }
        if (typeof injection === 'function') {
            return DependencyInjector.instantiateClassWithTracing(jovo, injection, updatedPath);
        }
        else if ('useValue' in injection) {
            return {
                token: token,
                resolvedValue: injection.useValue,
                children: [],
            };
        }
        else if ('useFactory' in injection) {
            var value = injection.useFactory(jovo);
            return {
                token: token,
                resolvedValue: value,
                children: [],
            };
        }
        else if ('useClass' in injection) {
            var tree = DependencyInjector.instantiateClassWithTracing(jovo, injection.useClass, updatedPath);
            // insert proper token
            return __assign(__assign({}, tree), { token: token });
        }
        else if ('useExisting' in injection) {
            var tree = DependencyInjector.resolveInjectionToken(jovo, injection.useExisting, updatedPath);
            return {
                token: token,
                resolvedValue: tree === null || tree === void 0 ? void 0 : tree.resolvedValue,
                children: (_a = tree === null || tree === void 0 ? void 0 : tree.children) !== null && _a !== void 0 ? _a : [],
            };
        }
        else {
            return undefined;
        }
    };
    DependencyInjector.instantiateClassWithTracing = function (jovo, clazz, dependencyPath) {
        var _a;
        var predefinedArgs = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            predefinedArgs[_i - 3] = arguments[_i];
        }
        var injectedArgs = __spreadArray([], predefinedArgs, true);
        var storage = MetadataStorage.getInstance();
        var injectMetadata = storage.getMergedInjectMetadata(clazz);
        var argTypes = (_a = Reflect.getMetadata('design:paramtypes', clazz)) !== null && _a !== void 0 ? _a : [];
        var children = [];
        var _loop_1 = function (argumentIndex) {
            var injectMetadataForArg = injectMetadata.find(function (metadata) { return metadata.index === argumentIndex; });
            var injectionToken = void 0;
            if (injectMetadataForArg === null || injectMetadataForArg === void 0 ? void 0 : injectMetadataForArg.token) {
                injectionToken = injectMetadataForArg.token;
            }
            else {
                injectionToken = argTypes[argumentIndex];
            }
            if (!injectionToken) {
                // the argType will usually never be undefined. Even for interfaces or unknown, it will be the Object type.
                // Only when there is a circular import, the argType will be undefined.
                throw new InvalidDependencyError(clazz, argumentIndex);
            }
            var childNode = DependencyInjector.resolveInjectionToken(jovo, injectionToken, dependencyPath);
            if (!childNode) {
                throw new UnresolvableDependencyError(clazz, injectionToken, argumentIndex);
            }
            injectedArgs.push(childNode.resolvedValue);
            children.push(childNode);
        };
        for (var argumentIndex = predefinedArgs.length; argumentIndex < argTypes.length; argumentIndex++) {
            _loop_1(argumentIndex);
        }
        var instance = new (clazz.bind.apply(clazz, __spreadArray([void 0], injectedArgs, false)))();
        return {
            token: clazz,
            resolvedValue: instance,
            children: children,
        };
    };
    DependencyInjector.instantiateClass = function (jovo, clazz) {
        var predefinedArgs = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            predefinedArgs[_i - 2] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var tree;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tree = this.instantiateClassWithTracing.apply(this, __spreadArray([jovo, clazz, []], predefinedArgs, false));
                        return [4 /*yield*/, jovo.$handleRequest.middlewareCollection.run(INSTANTIATE_DEPENDENCY_MIDDLEWARE, jovo, tree)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, tree.resolvedValue];
                }
            });
        });
    };
    return DependencyInjector;
}());
export { DependencyInjector };
//# sourceMappingURL=DependencyInjector.js.map