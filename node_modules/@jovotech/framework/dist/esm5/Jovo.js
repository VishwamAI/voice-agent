var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { NormalizedOutputTemplate } from '@jovotech/output';
import _cloneDeep from 'lodash.clonedeep';
import _merge from 'lodash.merge';
import _set from 'lodash.set';
import util from 'util';
import { BaseOutput, MetadataStorage, } from './index';
import { JovoHistory } from './JovoHistory';
import { JovoSession } from './JovoSession';
import { forEachDeep } from './utilities';
import { DependencyInjector } from './DependencyInjector';
import { v4 as uuidv4 } from 'uuid';
var DELEGATE_MIDDLEWARE = 'event.$delegate';
var RESOLVE_MIDDLEWARE = 'event.$resolve';
var REDIRECT_MIDDLEWARE = 'event.$redirect';
var SEND_MIDDLEWARE = 'event.$send';
export function registerPlatformSpecificJovoReference(key, jovoClass) {
    Object.defineProperty(Jovo.prototype, key, {
        get: function () {
            return this instanceof jovoClass ? this : undefined;
        },
    });
}
var Jovo = /** @class */ (function () {
    function Jovo($app, $handleRequest, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    $platform) {
        this.$app = $app;
        this.$handleRequest = $handleRequest;
        this.$platform = $platform;
        this.$request = this.$platform.createRequestInstance($handleRequest.server.getRequestObject());
        this.$id = this.$request.getRequestId ? this.$request.getRequestId() || uuidv4() : uuidv4();
        this.$input = this.$request.getInput();
        this.$output = [];
        this.$data = {};
        this.$device = this.$platform.createDeviceInstance(this);
        this.$entities = this.getEntityMap();
        this.$history = new JovoHistory($platform);
        this.$session = this.getSession();
        this.$user = this.$platform.createUserInstance(this);
        this.$cms = $app.cms;
    }
    Object.defineProperty(Jovo.prototype, "$config", {
        get: function () {
            return this.$handleRequest.config;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Jovo.prototype, "$server", {
        get: function () {
            return this.$handleRequest.server;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Jovo.prototype, "$plugins", {
        get: function () {
            return this.$handleRequest.plugins;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Jovo.prototype, "$state", {
        get: function () {
            return this.$session.state;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Jovo.prototype, "$subState", {
        get: function () {
            var _a, _b;
            if (!((_a = this.$state) === null || _a === void 0 ? void 0 : _a.length))
                return;
            return (_b = this.$state[this.$state.length - 1]) === null || _b === void 0 ? void 0 : _b.subState;
        },
        set: function (value) {
            var _a;
            if (!((_a = this.$state) === null || _a === void 0 ? void 0 : _a.length))
                return;
            this.$state[this.$state.length - 1].subState = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Jovo.prototype, "$component", {
        get: function () {
            var _a;
            // global components should not have component-data
            if (!((_a = this.$state) === null || _a === void 0 ? void 0 : _a.length)) {
                return {
                    data: {},
                };
            }
            var latestStateStackItem = this.$state[this.$state.length - 1];
            return {
                get data() {
                    if (!latestStateStackItem.data) {
                        latestStateStackItem.data = {};
                    }
                    return latestStateStackItem.data;
                },
                set data(value) {
                    if (!latestStateStackItem.data) {
                        latestStateStackItem.data = {};
                    }
                    latestStateStackItem.data = value;
                },
                get config() {
                    var deserializedStateConfig = _cloneDeep(latestStateStackItem.config);
                    if (deserializedStateConfig) {
                        // deserialize all found Output-constructors
                        forEachDeep(deserializedStateConfig, function (value, path) {
                            // TODO: check restriction
                            if (value &&
                                typeof value === 'object' &&
                                value.type === 'output' &&
                                value.name &&
                                Object.keys(value).length === 2) {
                                var outputMetadata = MetadataStorage.getInstance().getOutputMetadataByName(value.name);
                                if (!outputMetadata) {
                                    // TODO determine what to do!
                                    return;
                                }
                                _set(deserializedStateConfig, path, outputMetadata.target);
                            }
                        });
                    }
                    return deserializedStateConfig;
                },
                set config(value) {
                    latestStateStackItem.config = value;
                },
            };
        },
        enumerable: false,
        configurable: true
    });
    Jovo.prototype.$t = function (path, options) {
        if (!options) {
            options = {};
        }
        if (!options.lng) {
            options.lng = this.$request.getLocale();
        }
        if (!options.platform) {
            options.platform = this.$platform.id;
        }
        return this.$app.i18n.t(path, options);
    };
    Jovo.prototype.$send = function (outputConstructorOrTemplateOrMessage, options) {
        return __awaiter(this, void 0, void 0, function () {
            var newOutput, outputInstance, outputRes, output_1, _a;
            var _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!(typeof outputConstructorOrTemplateOrMessage === 'function')) return [3 /*break*/, 5];
                        return [4 /*yield*/, DependencyInjector.instantiateClass(this, outputConstructorOrTemplateOrMessage, this, options)];
                    case 1:
                        outputInstance = _c.sent();
                        outputRes = outputInstance.build();
                        if (!util.types.isPromise(outputRes)) return [3 /*break*/, 3];
                        return [4 /*yield*/, outputRes];
                    case 2:
                        _a = _c.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = outputRes;
                        _c.label = 4;
                    case 4:
                        output_1 = _a;
                        // overwrite reserved properties of the built object i.e. message
                        NormalizedOutputTemplate.getKeys().forEach(function (key) {
                            if (typeof (options === null || options === void 0 ? void 0 : options[key]) !== 'undefined') {
                                if (Array.isArray(output_1)) {
                                    output_1[output_1.length - 1][key] =
                                        key === 'platforms'
                                            ? _merge({}, output_1[output_1.length - 1].platforms || {}, options[key])
                                            : options[key];
                                }
                                else {
                                    output_1[key] =
                                        key === 'platforms' ? _merge({}, output_1[key] || {}, options[key]) : options[key];
                                }
                            }
                        });
                        newOutput = output_1;
                        return [3 /*break*/, 6];
                    case 5:
                        if (typeof outputConstructorOrTemplateOrMessage === 'string') {
                            newOutput = {
                                message: outputConstructorOrTemplateOrMessage,
                            };
                        }
                        else {
                            newOutput = outputConstructorOrTemplateOrMessage;
                        }
                        _c.label = 6;
                    case 6:
                        // push the new OutputTemplate(s) to $output
                        Array.isArray(newOutput) ? (_b = this.$output).push.apply(_b, newOutput) : this.$output.push(newOutput);
                        return [4 /*yield*/, this.$handleRequest.middlewareCollection.run(SEND_MIDDLEWARE, this, {
                                outputConstructorOrTemplateOrMessage: outputConstructorOrTemplateOrMessage,
                                options: options,
                            })];
                    case 7:
                        _c.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Jovo.prototype.$redirect = function (constructorOrName, handler) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var componentName, componentNode, stackItem;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        componentName = typeof constructorOrName === 'function' ? constructorOrName.name : constructorOrName;
                        componentNode = this.$handleRequest.componentTree.getNodeRelativeToOrFail(componentName, (_a = this.$handleRequest.activeComponentNode) === null || _a === void 0 ? void 0 : _a.path);
                        // clear the state stack
                        this.$session.state = [];
                        // add new component to the stack if it's not global
                        // @see https://www.jovo.tech/docs/components#global-components
                        if (!componentNode.metadata.isGlobal) {
                            stackItem = {
                                component: componentNode.path.join('.'),
                            };
                            this.$session.state.push(stackItem);
                        }
                        // update the active component node in handleRequest to keep track of the state
                        this.$handleRequest.activeComponentNode = componentNode;
                        return [4 /*yield*/, this.$handleRequest.middlewareCollection.run(REDIRECT_MIDDLEWARE, this, {
                                componentName: componentName,
                                handler: handler,
                            })];
                    case 1:
                        _b.sent();
                        // execute the component's handler
                        return [4 /*yield*/, componentNode.executeHandler({
                                jovo: this.getJovoReference(),
                                handler: handler,
                            })];
                    case 2:
                        // execute the component's handler
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Jovo.prototype.$delegate = function (constructorOrName, options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var componentName, componentNode, serializableResolve, key, value, serializableConfig;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        componentName = typeof constructorOrName === 'function' ? constructorOrName.name : constructorOrName;
                        componentNode = this.$handleRequest.componentTree.getNodeRelativeToOrFail(componentName, (_a = this.$handleRequest.activeComponentNode) === null || _a === void 0 ? void 0 : _a.path);
                        // if the component that is currently being executed is global
                        if ((_c = (_b = this.$handleRequest.activeComponentNode) === null || _b === void 0 ? void 0 : _b.metadata) === null || _c === void 0 ? void 0 : _c.isGlobal) {
                            // make sure there is a stack
                            if (!this.$session.state) {
                                this.$session.state = [];
                            }
                            // add the current component
                            this.$session.state.push({
                                component: this.$handleRequest.activeComponentNode.path.join('.'),
                            });
                        }
                        serializableResolve = {};
                        for (key in options.resolve) {
                            if (options.resolve.hasOwnProperty(key)) {
                                value = options.resolve[key];
                                if (typeof value !== 'undefined') {
                                    serializableResolve[key] = typeof value === 'string' ? value : value.name;
                                }
                            }
                        }
                        serializableConfig = _cloneDeep(options.config);
                        if (serializableConfig) {
                            forEachDeep(serializableConfig, function (value, path) {
                                // serialize all passed Output-constructors
                                if ((value === null || value === void 0 ? void 0 : value.prototype) instanceof BaseOutput) {
                                    var outputMetadata = MetadataStorage.getInstance().getOutputMetadata(value);
                                    if (!outputMetadata) {
                                        // TODO determine what to do!
                                        return;
                                    }
                                    _set(serializableConfig, path, { type: 'output', name: outputMetadata.name });
                                }
                            });
                        }
                        // push the delegating component to the state-stack
                        if (!this.$session.state) {
                            this.$session.state = [];
                        }
                        this.$session.state.push({
                            resolve: serializableResolve,
                            config: serializableConfig,
                            component: componentNode.path.join('.'),
                        });
                        // update the active component node in handleRequest to keep track of the state
                        this.$handleRequest.activeComponentNode = componentNode;
                        return [4 /*yield*/, this.$handleRequest.middlewareCollection.run(DELEGATE_MIDDLEWARE, this, {
                                componentName: componentName,
                                options: options,
                            })];
                    case 1:
                        _d.sent();
                        // execute the component's handler
                        return [4 /*yield*/, componentNode.executeHandler({
                                jovo: this.getJovoReference(),
                            })];
                    case 2:
                        // execute the component's handler
                        _d.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    // TODO determine whether an error should be thrown if $resolve is called from a context outside a delegation
    Jovo.prototype.$resolve = function (eventName) {
        var eventArgs = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            eventArgs[_i - 1] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var currentStateStackItem, previousStateStackItem, resolvedHandler, previousComponentPath, previousComponentNode;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.$state) {
                            return [2 /*return*/];
                        }
                        currentStateStackItem = this.$state[this.$state.length - 1];
                        previousStateStackItem = this.$state[this.$state.length - 2];
                        // make sure the state-stack exists and it long enough
                        if (!(currentStateStackItem === null || currentStateStackItem === void 0 ? void 0 : currentStateStackItem.resolve) || !previousStateStackItem) {
                            return [2 /*return*/];
                        }
                        resolvedHandler = currentStateStackItem.resolve[eventName];
                        previousComponentPath = previousStateStackItem.component.split('.');
                        previousComponentNode = this.$handleRequest.componentTree.getNodeAtOrFail(previousComponentPath);
                        // if previous component is global, remove another item from the stack to remove the global component
                        if (previousComponentNode.metadata.isGlobal) {
                            this.$state.pop();
                        }
                        // remove the latest item from the state-stack
                        this.$state.pop();
                        // update the active component node in handleRequest to keep track of the state
                        this.$handleRequest.activeComponentNode = previousComponentNode;
                        return [4 /*yield*/, this.$handleRequest.middlewareCollection.run(RESOLVE_MIDDLEWARE, this, {
                                resolvedHandler: resolvedHandler,
                                eventName: eventName,
                                eventArgs: eventArgs,
                            })];
                    case 1:
                        _a.sent();
                        // execute the component's handler
                        return [4 /*yield*/, previousComponentNode.executeHandler({
                                jovo: this.getJovoReference(),
                                handler: resolvedHandler,
                                callArgs: eventArgs,
                            })];
                    case 2:
                        // execute the component's handler
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Jovo.prototype.getSession = function () {
        var session = this.$request.getSession();
        return session instanceof JovoSession ? session : new JovoSession(session);
    };
    Jovo.prototype.getEntityMap = function () {
        var _a;
        return this.$input.entities || ((_a = this.$input.nlu) === null || _a === void 0 ? void 0 : _a.entities) || {};
    };
    Jovo.prototype.getPersistableData = function () {
        return {
            user: this.$user.getPersistableData(),
            session: this.$session.getPersistableData(),
            history: this.$history.getPersistableData(),
            createdAt: new Date(this.$user.createdAt).toISOString(),
            updatedAt: new Date().toISOString(),
        };
    };
    Jovo.prototype.setPersistableData = function (data, config) {
        var isStoredElementEnabled = function (key) {
            var value = config === null || config === void 0 ? void 0 : config[key];
            return typeof value === 'object' ? value.enabled !== false : !!value;
        };
        if (isStoredElementEnabled('user')) {
            this.$user.setPersistableData(data.user);
        }
        if (isStoredElementEnabled('session')) {
            this.$session.setPersistableData(data.session, config === null || config === void 0 ? void 0 : config.session);
        }
        if (isStoredElementEnabled('history')) {
            this.$history.setPersistableData(data.history);
        }
        this.$user.createdAt = new Date((data === null || data === void 0 ? void 0 : data.createdAt) || new Date());
        this.$user.updatedAt = new Date((data === null || data === void 0 ? void 0 : data.updatedAt) || new Date());
    };
    Jovo.prototype.getCurrentHistoryItem = function () {
        return {
            request: this.$request,
            input: this.$input,
            state: this.$state,
            entities: this.$entities,
            output: this.$output,
            response: this.$response,
        };
    };
    Jovo.prototype.getJovoReference = function () {
        var _a;
        return ((_a = this) === null || _a === void 0 ? void 0 : _a.jovo) || this;
    };
    return Jovo;
}());
export { Jovo };
//# sourceMappingURL=Jovo.js.map