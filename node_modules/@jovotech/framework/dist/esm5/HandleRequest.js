var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import _cloneDeep from 'lodash.clonedeep';
import _merge from 'lodash.merge';
import { Extensible } from './Extensible';
import { MiddlewareCollection, Platform, } from './index';
var HandleRequest = /** @class */ (function (_super) {
    __extends(HandleRequest, _super);
    function HandleRequest(app, server) {
        var _this = _super.call(this, _cloneDeep(app.config)) || this;
        _this.app = app;
        _this.server = server;
        _merge(_this, _cloneDeep(app));
        return _this;
    }
    Object.defineProperty(HandleRequest.prototype, "platforms", {
        get: function () {
            return Object.values(this.plugins).filter(function (plugin) { return plugin instanceof Platform; });
        },
        enumerable: false,
        configurable: true
    });
    // middlewareCollection will be overwritten anyways by merging with App
    HandleRequest.prototype.initializeMiddlewareCollection = function () {
        return new MiddlewareCollection();
    };
    HandleRequest.prototype.getDefaultConfig = function () {
        return {
            intentMap: {},
            logging: {},
        };
    };
    HandleRequest.prototype.mount = function () {
        return this.mountPlugins();
    };
    HandleRequest.prototype.dismount = function () {
        return this.dismountPlugins();
    };
    HandleRequest.prototype.skipMiddlewares = function () {
        var _a;
        var middlewares = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            middlewares[_i] = arguments[_i];
        }
        (_a = this.middlewareCollection).remove.apply(_a, middlewares);
    };
    HandleRequest.prototype.stopMiddlewareExecution = function () {
        this.middlewareCollection.clear();
        Object.values(this.plugins).forEach(function (plugin) {
            if (plugin instanceof Extensible) {
                plugin.middlewareCollection.clear();
            }
        });
    };
    return HandleRequest;
}(Extensible));
export { HandleRequest };
//# sourceMappingURL=HandleRequest.js.map