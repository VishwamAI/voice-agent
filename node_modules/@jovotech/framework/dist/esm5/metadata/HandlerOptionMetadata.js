var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { MetadataStorage } from './MetadataStorage';
import { MethodDecoratorMetadata } from './MethodDecoratorMetadata';
/**
 * Get values of the rest parameter of a decorator.
 * Useful for following case:
 * `@Intent(['foo', 'bar'])` in this case, the actual value in the intents-parameter is `[ ['foo', 'bar'] ]`, therefore we only need to return the inner array.
 */
export function getValuesOfDecoratorRestParameter(restParameter) {
    return restParameter.length && Array.isArray(restParameter[0])
        ? restParameter[0]
        : restParameter;
}
export function createHandlerOptionDecorator(options) {
    return function (target, propertyKey) {
        MetadataStorage.getInstance().addHandlerOptionMetadata(new HandlerOptionMetadata(target.constructor, propertyKey, options));
    };
}
var HandlerOptionMetadata = /** @class */ (function (_super) {
    __extends(HandlerOptionMetadata, _super);
    function HandlerOptionMetadata(
    // eslint-disable-next-line @typescript-eslint/ban-types
    target, propertyKey, options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, target, propertyKey) || this;
        _this.target = target;
        _this.propertyKey = propertyKey;
        _this.options = options;
        return _this;
    }
    return HandlerOptionMetadata;
}(MethodDecoratorMetadata));
export { HandlerOptionMetadata };
//# sourceMappingURL=HandlerOptionMetadata.js.map