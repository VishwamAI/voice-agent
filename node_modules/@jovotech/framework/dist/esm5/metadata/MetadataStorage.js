var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import _cloneDeep from 'lodash.clonedeep';
import { ComponentMetadata } from './ComponentMetadata';
import { HandlerMetadata } from './HandlerMetadata';
import { OutputMetadata } from './OutputMetadata';
var MetadataStorage = /** @class */ (function () {
    function MetadataStorage() {
        this.componentMetadata = [];
        this.componentOptionMetadata = [];
        this.handlerMetadata = [];
        this.handlerOptionMetadata = [];
        this.outputMetadata = [];
        this.injectableMetadata = [];
        this.injectMetadata = [];
    }
    MetadataStorage.getInstance = function () {
        if (!MetadataStorage.instance) {
            MetadataStorage.instance = new MetadataStorage();
        }
        return MetadataStorage.instance;
    };
    MetadataStorage.prototype.addComponentMetadata = function (metadata) {
        // TODO: determine what to do if a component like that already exists
        // for now, just skip (first only counts)
        if (this.getComponentMetadata(metadata.target)) {
            return;
        }
        this.componentMetadata.push(metadata);
    };
    MetadataStorage.prototype.getComponentMetadata = function (
    // eslint-disable-next-line @typescript-eslint/ban-types
    target) {
        return this.componentMetadata.find(function (metadata) { return metadata.target === target; });
    };
    MetadataStorage.prototype.getMergedComponentMetadata = function (
    // eslint-disable-next-line @typescript-eslint/ban-types
    target) {
        var componentMetadata = this.getComponentMetadata(target);
        var componentOptionMetadata = this.getComponentOptionMetadata(target);
        if (!componentMetadata && !componentOptionMetadata.length) {
            return;
        }
        var mergedComponentMetadata = componentMetadata
            ? _cloneDeep(componentMetadata)
            : new ComponentMetadata(target);
        componentOptionMetadata.forEach(function (optionMetadata) {
            return mergedComponentMetadata.mergeWith(optionMetadata);
        });
        return mergedComponentMetadata;
    };
    MetadataStorage.prototype.addComponentOptionMetadata = function (metadata) {
        this.componentOptionMetadata.push(metadata);
    };
    MetadataStorage.prototype.getComponentOptionMetadata = function (
    // eslint-disable-next-line @typescript-eslint/ban-types
    target) {
        return this.componentOptionMetadata.filter(function (metadata) { return metadata.target === target; });
    };
    MetadataStorage.prototype.addOutputMetadata = function (target, name) {
        var existingMetadata = this.getOutputMetadataByName(name);
        if (existingMetadata) {
            // make sure the name of an Output is unique
            var similarExistingMetadata = this.outputMetadata.filter(function (metadata) {
                return metadata.name.startsWith(name);
            });
            var getEndingNumberRegex_1 = /(\d+)$/;
            var highestNumber_1 = -1;
            similarExistingMetadata.forEach(function (metadata) {
                var endingNumberMatch = getEndingNumberRegex_1.exec(metadata.name);
                var endingNumber = +((endingNumberMatch === null || endingNumberMatch === void 0 ? void 0 : endingNumberMatch[1]) || -1);
                if (endingNumber > highestNumber_1) {
                    highestNumber_1 = endingNumber;
                }
            });
            highestNumber_1++;
            if (getEndingNumberRegex_1.test(name)) {
                name = name.replace(getEndingNumberRegex_1, highestNumber_1.toString());
            }
            else {
                name += highestNumber_1;
            }
        }
        this.outputMetadata.push(new OutputMetadata(target, name));
    };
    MetadataStorage.prototype.getOutputMetadata = function (
    // eslint-disable-next-line @typescript-eslint/ban-types
    target) {
        return this.outputMetadata.find(function (metadata) { return metadata.target === target; });
    };
    MetadataStorage.prototype.getOutputMetadataByName = function (name) {
        return this.outputMetadata.find(function (metadata) { return metadata.name === name; });
    };
    MetadataStorage.prototype.addHandlerMetadata = function (metadata) {
        this.handlerMetadata.push(metadata);
    };
    MetadataStorage.prototype.getHandlerMetadataOfComponent = function (
    // eslint-disable-next-line @typescript-eslint/ban-types
    target) {
        return this.handlerMetadata.filter(function (metadata) { return metadata.target === target; });
    };
    MetadataStorage.prototype.getMergedHandlerMetadataOfComponent = function (
    // eslint-disable-next-line @typescript-eslint/ban-types
    target) {
        var _this = this;
        var mergedComponentMetadata = this.getMergedComponentMetadata(target);
        var componentHandlerMetadata = this.getHandlerMetadataOfComponent(target);
        var mergedMetadata = componentHandlerMetadata.map(function (handlerMetadata) {
            var mergedHandlerMetadata = _cloneDeep(handlerMetadata);
            var relatedHandlerOptionMetadata = _this.handlerOptionMetadata.filter(function (optionMetadata) {
                return optionMetadata.hasSameTargetAs(mergedHandlerMetadata);
            });
            relatedHandlerOptionMetadata.forEach(function (optionMetadata) {
                return mergedHandlerMetadata.mergeWith(optionMetadata);
            });
            if (mergedComponentMetadata === null || mergedComponentMetadata === void 0 ? void 0 : mergedComponentMetadata.isGlobal) {
                mergedHandlerMetadata.options.global = true;
            }
            return mergedHandlerMetadata;
        });
        var handlerOptionMetadataWithoutHandler = this.handlerOptionMetadata.filter(function (optionMetadata) {
            return optionMetadata.target === target &&
                !componentHandlerMetadata.some(function (handlerMetadata) {
                    return handlerMetadata.hasSameTargetAs(optionMetadata);
                });
        });
        handlerOptionMetadataWithoutHandler.forEach(function (optionMetadata) {
            var relatedHandlerMetadata = mergedMetadata.find(function (handlerMetadata) {
                return handlerMetadata.hasSameTargetAs(optionMetadata);
            });
            if (!relatedHandlerMetadata) {
                mergedMetadata.push(new HandlerMetadata(optionMetadata.target, optionMetadata.propertyKey, __assign(__assign({}, optionMetadata.options), { global: (mergedComponentMetadata === null || mergedComponentMetadata === void 0 ? void 0 : mergedComponentMetadata.isGlobal) || optionMetadata.options.global })));
            }
            else {
                relatedHandlerMetadata.mergeWith(optionMetadata);
            }
        });
        var prototype = Object.getPrototypeOf(target);
        // Object.getPrototypeOf of the topmost class in the superclass chain is {} (empty object)
        // and Object.getPrototypeOf({}) is Object.prototype.
        if (prototype && Object.getPrototypeOf(prototype) !== Object.prototype) {
            var parentMergedMetadata = this.getMergedHandlerMetadataOfComponent(prototype);
            return this.mergeHandlerMetadataWithParent(mergedMetadata, parentMergedMetadata);
        }
        return mergedMetadata;
    };
    /**
     * Merges the handler metadata of a component with the handler metadata of its superclass.
     * When a child class declares a handler with the same name as a handler of its superclass,
     * the child class handler overrides the superclass handler and replaces all of its annotations.
     *
     * @param handlerMetadata
     * @param parentMetadata
     * @private
     */
    MetadataStorage.prototype.mergeHandlerMetadataWithParent = function (handlerMetadata, parentMetadata) {
        var mergedMetadata = __spreadArray([], handlerMetadata, true);
        var _loop_1 = function (parentHandler) {
            var isOverride = handlerMetadata.findIndex(function (meta) {
                if (meta.propertyKey !== parentHandler.propertyKey) {
                    return false;
                }
                return (meta.target === parentHandler.target ||
                    Object.getPrototypeOf(meta.target) === parentHandler.target);
            }) >= 0;
            if (!isOverride) {
                mergedMetadata.push(parentHandler);
            }
        };
        for (var _i = 0, parentMetadata_1 = parentMetadata; _i < parentMetadata_1.length; _i++) {
            var parentHandler = parentMetadata_1[_i];
            _loop_1(parentHandler);
        }
        return mergedMetadata;
    };
    MetadataStorage.prototype.addHandlerOptionMetadata = function (metadata) {
        this.handlerOptionMetadata.push(metadata);
    };
    MetadataStorage.prototype.getHandlerOptionMetadataOfComponent = function (
    // eslint-disable-next-line @typescript-eslint/ban-types
    target) {
        return this.handlerOptionMetadata.filter(function (metadata) { return metadata.target === target; });
    };
    MetadataStorage.prototype.addInjectableMetadata = function (metadata) {
        if (this.getInjectableMetadata(metadata.target)) {
            // for now, just skip (first only counts)
            return;
        }
        this.injectableMetadata.push(metadata);
    };
    MetadataStorage.prototype.getInjectableMetadata = function (
    // eslint-disable-next-line @typescript-eslint/ban-types
    target) {
        return this.injectableMetadata.find(function (metadata) { return metadata.target === target; });
    };
    MetadataStorage.prototype.addInjectMetadata = function (metadata) {
        if (this.getInjectMetadataAtIndex(metadata.target, metadata.index)) {
            // for now, just skip (first only counts)
            return;
        }
        this.injectMetadata.push(metadata);
    };
    MetadataStorage.prototype.getMergedInjectMetadata = function (
    // eslint-disable-next-line @typescript-eslint/ban-types
    target) {
        return this.injectMetadata.filter(function (metadata) { return metadata.target === target; });
    };
    MetadataStorage.prototype.getInjectMetadataAtIndex = function (
    // eslint-disable-next-line @typescript-eslint/ban-types
    target, index) {
        return this.injectMetadata.find(function (metadata) { return metadata.target === target && metadata.index === index; });
    };
    MetadataStorage.prototype.clearAll = function () {
        this.componentMetadata.length = 0;
        this.handlerMetadata.length = 0;
        this.handlerOptionMetadata.length = 0;
        this.outputMetadata.length = 0;
        this.injectableMetadata.length = 0;
        this.injectMetadata.length = 0;
    };
    return MetadataStorage;
}());
export { MetadataStorage };
//# sourceMappingURL=MetadataStorage.js.map