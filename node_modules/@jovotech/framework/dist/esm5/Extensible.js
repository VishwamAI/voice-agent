var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import _merge from 'lodash.merge';
import { Plugin } from './Plugin';
var Extensible = /** @class */ (function (_super) {
    __extends(Extensible, _super);
    function Extensible(config) {
        var _a;
        var _this = _super.call(this, config ? __assign(__assign({}, config), { plugins: undefined }) : config) || this;
        _this.middlewareCollection = _this.initializeMiddlewareCollection();
        _this.plugins = {};
        if ((config === null || config === void 0 ? void 0 : config.plugins) && ((_a = config === null || config === void 0 ? void 0 : config.plugins) === null || _a === void 0 ? void 0 : _a.length)) {
            _this.use.apply(_this, config.plugins);
        }
        return _this;
    }
    Extensible.prototype.use = function () {
        var _this = this;
        var plugins = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            plugins[_i] = arguments[_i];
        }
        plugins.forEach(function (plugin) {
            var _a;
            var name = plugin.name;
            _this.plugins[name] = plugin;
            (_a = plugin.install) === null || _a === void 0 ? void 0 : _a.call(plugin, _this);
        });
        return this;
    };
    Extensible.prototype.initializePlugins = function () {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var _d, _e, _i, key, plugin, config;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _d = [];
                        for (_e in this.plugins)
                            _d.push(_e);
                        _i = 0;
                        _f.label = 1;
                    case 1:
                        if (!(_i < _d.length)) return [3 /*break*/, 5];
                        key = _d[_i];
                        if (!this.plugins.hasOwnProperty(key)) return [3 /*break*/, 4];
                        plugin = this.plugins[key];
                        if (!plugin) {
                            return [3 /*break*/, 4];
                        }
                        config = plugin.initConfig
                            ? _merge({}, ((_a = this.config.plugin) === null || _a === void 0 ? void 0 : _a[key]) || {}, plugin.config)
                            : _merge({}, plugin.config, ((_b = this.config.plugin) === null || _b === void 0 ? void 0 : _b[key]) || {});
                        // overwrite config, this is just used, because the config-property is readonly
                        Object.defineProperty(plugin, 'config', {
                            enumerable: true,
                            value: config,
                        });
                        // if this extensible has no plugin-config for nested child-plugins, create it
                        if (!this.config.plugin) {
                            this.config.plugin = {};
                        }
                        // make plugin-config of this extensible aware of the child-plugin's config
                        // this way the config-tree will be build with correct references
                        this.config.plugin[key] = config;
                        return [4 /*yield*/, ((_c = plugin.initialize) === null || _c === void 0 ? void 0 : _c.call(plugin, this))];
                    case 2:
                        _f.sent();
                        if (!(plugin instanceof Extensible && Object.keys(plugin.plugins).length)) return [3 /*break*/, 4];
                        return [4 /*yield*/, plugin.initializePlugins()];
                    case 3:
                        _f.sent();
                        _f.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 1];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    Extensible.prototype.mountPlugins = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var _b, _c, _i, key, plugin;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _b = [];
                        for (_c in this.plugins)
                            _b.push(_c);
                        _i = 0;
                        _d.label = 1;
                    case 1:
                        if (!(_i < _b.length)) return [3 /*break*/, 5];
                        key = _b[_i];
                        if (!this.plugins.hasOwnProperty(key)) return [3 /*break*/, 4];
                        plugin = this.plugins[key];
                        if (!plugin) {
                            return [3 /*break*/, 4];
                        }
                        // if this extensible has no plugin-config for nested child-plugins, create it
                        if (!this.config.plugin) {
                            this.config.plugin = {};
                        }
                        // make plugin-config of this extensible aware of the child-plugin's config
                        // this way the config-tree will be rebuild with correct references
                        this.config.plugin[key] = plugin.config;
                        return [4 /*yield*/, ((_a = plugin.mount) === null || _a === void 0 ? void 0 : _a.call(plugin, this))];
                    case 2:
                        _d.sent();
                        if (!(plugin instanceof Extensible && plugin.plugins)) return [3 /*break*/, 4];
                        return [4 /*yield*/, plugin.mountPlugins()];
                    case 3:
                        _d.sent();
                        _d.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 1];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    Extensible.prototype.dismountPlugins = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var _b, _c, _i, key, plugin;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _b = [];
                        for (_c in this.plugins)
                            _b.push(_c);
                        _i = 0;
                        _d.label = 1;
                    case 1:
                        if (!(_i < _b.length)) return [3 /*break*/, 5];
                        key = _b[_i];
                        if (!this.plugins.hasOwnProperty(key)) return [3 /*break*/, 4];
                        plugin = this.plugins[key];
                        if (!plugin) {
                            return [3 /*break*/, 4];
                        }
                        return [4 /*yield*/, ((_a = plugin.dismount) === null || _a === void 0 ? void 0 : _a.call(plugin, this))];
                    case 2:
                        _d.sent();
                        if (!(plugin instanceof Extensible && plugin.plugins)) return [3 /*break*/, 4];
                        return [4 /*yield*/, plugin.dismountPlugins()];
                    case 3:
                        _d.sent();
                        _d.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 1];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    return Extensible;
}(Plugin));
export { Extensible };
//# sourceMappingURL=Extensible.js.map