var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { Jovo } from './Jovo';
var JovoProxy = /** @class */ (function (_super) {
    __extends(JovoProxy, _super);
    function JovoProxy(jovo) {
        var _this = _super.call(this, jovo.$app, jovo.$handleRequest, jovo.$platform) || this;
        _this.jovo = jovo;
        _this.overwritePropertiesToPropagateChangesToJovo();
        return _this;
    }
    // Make `this[key]` reference `this.jovo[key]` for every `key` in `this.jovo`.
    // Without, mutations of `this` would not affect `this.jovo`.
    JovoProxy.prototype.overwritePropertiesToPropagateChangesToJovo = function () {
        var _this = this;
        var keySet = new Set();
        Object.getOwnPropertyNames(Jovo.prototype).forEach(function (key) { return keySet.add(key); });
        Object.keys(this.jovo).forEach(function (key) { return keySet.add(key); });
        var keys = Array.from(keySet);
        keys.forEach(function (key) {
            if (key !== 'jovo' && key !== 'constructor' && key !== '$component') {
                // if the value is a function just return it as a value and not as getter and setter
                var propertyDescriptor = typeof _this.jovo[key] === 'function'
                    ? { value: _this.jovo[key].bind(_this.jovo) }
                    : {
                        get: function () {
                            return _this.jovo[key];
                        },
                        set: function (val) {
                            _this.jovo[key] = val;
                        },
                    };
                Object.defineProperty(_this, key, propertyDescriptor);
            }
        });
    };
    Object.defineProperty(JovoProxy.prototype, "$component", {
        get: function () {
            return this.jovo.$component;
        },
        enumerable: false,
        configurable: true
    });
    JovoProxy.prototype.toJSON = function () {
        return __assign(__assign({}, this), { jovo: undefined });
    };
    return JovoProxy;
}(Jovo));
export { JovoProxy };
//# sourceMappingURL=JovoProxy.js.map