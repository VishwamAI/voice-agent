var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import _get from 'lodash.get';
import _merge from 'lodash.merge';
import { ComponentTreeNode } from './ComponentTreeNode';
import { ComponentNotFoundError } from './errors/ComponentNotFoundError';
import { DuplicateChildComponentsError } from './errors/DuplicateChildComponentsError';
import { InvalidComponentTreeBuiltError } from './errors/InvalidComponentTreeBuiltError';
import { ComponentMetadata } from './metadata/ComponentMetadata';
import { MetadataStorage } from './metadata/MetadataStorage';
/**
 * @example Structure of ComponentTree
 * {
 * "tree": {
 *   "GlobalComponent": {
 *     "path": [
 *       "GlobalComponent"
 *     ],
 *     "metadata": {
 *       "options": {
 *         "global": true
 *       }
 *     }
 *   },
 *   "RootComponent": {
 *     "path": [
 *       "RootComponent"
 *     ],
 *     "metadata": {
 *       "options": {
 *         "components": [
 *           "NestedComponent"
 *         ]
 *       }
 *     },
 *     "children": {
 *       "NestedComponent": {
 *         "path": [
 *           "RootComponent",
 *           "NestedComponent"
 *         ],
 *         "metadata": {
 *           "options": {}
 *         },
 *         "parent": "RootComponent"
 *       }
 *     }
 *   }
 * }
 *}
 */
var ComponentTree = /** @class */ (function () {
    function ComponentTree() {
        var components = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            components[_i] = arguments[_i];
        }
        this.initialBuildErrors = [];
        this.tree = this.buildTreeForComponents.apply(this, components);
    }
    // returns a map-callback that will create a ComponentTreeNode for the given component (constructor or declaration)
    ComponentTree.createComponentToNodeMapper = function (componentTree, parent) {
        return function (component) {
            var _a;
            var componentConstructor = typeof component === 'function' ? component : component.component;
            // get the metadata of the component
            var componentMetadata = MetadataStorage.getInstance().getMergedComponentMetadata(componentConstructor);
            // merge the options of the related metadata with the options of the given options (only set when passing a declaration)
            var mergedComponentOptions = _merge({}, (componentMetadata === null || componentMetadata === void 0 ? void 0 : componentMetadata.options) || {}, typeof component === 'function' ? {} : component.options || {});
            var componentName = ((_a = componentMetadata === null || componentMetadata === void 0 ? void 0 : componentMetadata.options) === null || _a === void 0 ? void 0 : _a.name) || componentConstructor.name;
            // return a new node with metadata, that is constructed from the constructor and the merged component options, as well as additional data
            return new ComponentTreeNode(componentTree, {
                metadata: new ComponentMetadata(componentConstructor, mergedComponentOptions),
                parent: parent,
                children: mergedComponentOptions.components,
                path: (parent === null || parent === void 0 ? void 0 : parent.path) ? __spreadArray(__spreadArray([], parent.path, true), [componentName], false) : [componentName],
            });
        };
    };
    // returns a reduce-callback that will create a Tree from the components it's called on
    ComponentTree.createComponentsToTreeReducer = function (componentTree, parent) {
        return function (tree, component) {
            var node = ComponentTree.createComponentToNodeMapper(componentTree, parent)(component);
            if (!tree[node.name]) {
                tree[node.name] = node;
            }
            else {
                componentTree.initialBuildErrors.push(new DuplicateChildComponentsError(node.name, (parent === null || parent === void 0 ? void 0 : parent.name) || 'Root'));
            }
            return tree;
        };
    };
    ComponentTree.prototype[Symbol.iterator] = function () {
        var index = -1;
        var nodes = [];
        this.iterateNodes(Object.values(this.tree), function (node) {
            nodes.push(node);
        });
        return {
            next: function () { return ({ value: nodes[++index], done: !(index in nodes) }); },
        };
    };
    ComponentTree.prototype.initialize = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.initialBuildErrors.length) {
                    throw new InvalidComponentTreeBuiltError(this.initialBuildErrors);
                }
                return [2 /*return*/];
            });
        });
    };
    ComponentTree.prototype.add = function () {
        var components = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            components[_i] = arguments[_i];
        }
        var tree = this.buildTreeForComponents.apply(this, components);
        for (var key in tree) {
            if (tree.hasOwnProperty(key)) {
                if (this.tree[key]) {
                    throw new DuplicateChildComponentsError(key, 'Root');
                }
                this.tree[key] = tree[key];
            }
        }
    };
    ComponentTree.prototype.getNodeAt = function (path) {
        return _get(this.tree, path.join('.children.'));
    };
    ComponentTree.prototype.getNodeAtOrFail = function (path) {
        var node = this.getNodeAt(path);
        if (!node) {
            throw new ComponentNotFoundError(path);
        }
        return node;
    };
    /**
     * Find a node that matches the componentName relative to the node at relativeTo
     */
    ComponentTree.prototype.getNodeRelativeTo = function (componentName, relativeTo) {
        var _a;
        if (relativeTo === void 0) { relativeTo = []; }
        var currentComponentNode = this.getNodeAt(relativeTo);
        var rootComponentNode = this.tree[componentName];
        var childComponentNode = (_a = currentComponentNode === null || currentComponentNode === void 0 ? void 0 : currentComponentNode.children) === null || _a === void 0 ? void 0 : _a[componentName];
        return childComponentNode || rootComponentNode;
    };
    ComponentTree.prototype.getNodeRelativeToOrFail = function (componentName, relativeTo) {
        if (relativeTo === void 0) { relativeTo = []; }
        var componentNode = this.getNodeRelativeTo(componentName, relativeTo);
        if (!componentNode) {
            throw new ComponentNotFoundError(__spreadArray(__spreadArray([], relativeTo, true), [componentName], false));
        }
        return componentNode;
    };
    ComponentTree.prototype.forEach = function (callback) {
        this.iterateNodes(Object.values(this.tree), callback);
    };
    ComponentTree.prototype.iterateNodes = function (nodes, callback) {
        var _this = this;
        nodes.forEach(function (node) {
            callback(node);
            var childNodes = Object.values(node.children || {});
            if (childNodes.length) {
                _this.iterateNodes(childNodes, callback);
            }
        });
    };
    ComponentTree.prototype.buildTreeForComponents = function () {
        var components = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            components[_i] = arguments[_i];
        }
        return components.reduce(ComponentTree.createComponentsToTreeReducer(this), {});
    };
    return ComponentTree;
}());
export { ComponentTree };
//# sourceMappingURL=ComponentTree.js.map