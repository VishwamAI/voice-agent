import { InjectMetadata } from '../metadata/InjectMetadata';
import { MetadataStorage } from '../metadata/MetadataStorage';
/**
 * Decorator to specify a dependency injection token for a constructor parameter.
 *
 * If `@Inject()` is omitted or used without a token parameter, the type of the parameter is used as the token.
 *
 * @param token
 * @constructor
 */
export function Inject(token) {
    return function (target, propertyKey, index) {
        var resolvedToken;
        if (token) {
            resolvedToken = token;
        }
        else {
            resolvedToken = Reflect.getMetadata('design:paramtypes', target)[index];
        }
        var metadata = new InjectMetadata(target, index, resolvedToken);
        var storage = MetadataStorage.getInstance();
        storage.addInjectMetadata(metadata);
    };
}
//# sourceMappingURL=Inject.js.map