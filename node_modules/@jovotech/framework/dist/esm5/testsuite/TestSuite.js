var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { InputType, JovoError } from '@jovotech/common';
import { existsSync } from 'fs';
import _cloneDeep from 'lodash.clonedeep';
import _merge from 'lodash.merge';
import { join as joinPaths } from 'path';
import { v4 as uuidv4 } from 'uuid';
import { JovoRequest, JovoSession, Plugin, } from '..';
import { HandleRequest } from '../HandleRequest';
import { JovoInput } from '../JovoInput';
import { TestPlatform } from './TestPlatform';
import { TestServer } from './TestServer';
var TestSuite = /** @class */ (function (_super) {
    __extends(TestSuite, _super);
    function TestSuite(config) {
        var _this = _super.call(this, config) || this;
        // Load app from configured stage and register testplugins
        _this.app = _this.config.app || _this.loadApp();
        _this.app.use(_this, new TestPlatform());
        var platform = new _this.config.platform();
        _this.requestBuilder = new platform.requestBuilder();
        var request = platform.createRequestInstance(_this.requestBuilder.launch());
        var server = new TestServer(request);
        var handleRequest = new HandleRequest(_this.app, server);
        Object.assign(_this, new platform.jovoClass(_this.app, handleRequest, platform));
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        var _a = require('@jest/globals'), afterEach = _a.afterEach, afterAll = _a.afterAll;
        if (_this.config.data.deleteAfterEach) {
            afterEach(_this.clearData.bind(_this));
        }
        if (_this.config.data.deleteAfterAll) {
            afterAll(_this.clearData.bind(_this));
        }
        return _this;
    }
    TestSuite.prototype.getDefaultConfig = function () {
        return {
            data: {
                deleteAfterEach: true,
                deleteAfterAll: true,
            },
            userId: uuidv4(),
            platform: TestPlatform,
            stage: 'dev',
            locale: 'en',
        };
    };
    TestSuite.prototype.install = function (app) {
        app.middlewareCollection.use('before.request.start', this.prepareRequest.bind(this));
        app.middlewareCollection.use('after.response.end', this.postProcess.bind(this));
    };
    TestSuite.prototype.run = function (requestOrInput) {
        return __awaiter(this, void 0, void 0, function () {
            var requests, _loop_1, this_1, _i, requests_1, requestLike;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        requests = Array.isArray(requestOrInput) ? requestOrInput : [requestOrInput];
                        _loop_1 = function (requestLike) {
                            var isInputInstance, isInputObject, isRequestObject, request;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        isInputInstance = function (input) {
                                            return input instanceof JovoInput;
                                        };
                                        isInputObject = function (input) {
                                            return !isInputInstance(input) &&
                                                Object.keys(input).some(function (key) {
                                                    return ['type', 'asr', 'nlu', 'intent', 'entities', 'text', 'audio'].includes(key);
                                                });
                                        };
                                        isRequestObject = function (request) {
                                            return (!(request instanceof JovoRequest) && !isInputInstance(request) && !isInputObject(request));
                                        };
                                        // If requestOrInput is a plain object, generate a corresponding
                                        // instance from it
                                        this_1.requestOrInput = isInputObject(requestLike)
                                            ? new JovoInput(requestLike)
                                            : isRequestObject(requestLike)
                                                ? this_1.$platform.createRequestInstance(requestLike)
                                                : requestLike;
                                        return [4 /*yield*/, this_1.app.initialize()];
                                    case 1:
                                        _b.sent();
                                        request = this_1.isRequest(this_1.requestOrInput)
                                            ? this_1.requestOrInput
                                            : this_1.requestOrInput.type === InputType.Launch
                                                ? this_1.requestBuilder.launch()
                                                : this_1.requestBuilder.intent();
                                        return [4 /*yield*/, this_1.app.handle(new TestServer(request))];
                                    case 2:
                                        _b.sent();
                                        return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        _i = 0, requests_1 = requests;
                        _a.label = 1;
                    case 1:
                        if (!(_i < requests_1.length)) return [3 /*break*/, 4];
                        requestLike = requests_1[_i];
                        return [5 /*yield**/, _loop_1(requestLike)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, {
                            response: this.$response,
                            output: this.$output,
                        }];
                }
            });
        });
    };
    TestSuite.prototype.clearData = function () {
        this.$user = this.$platform.createUserInstance(this);
        this.$session = new JovoSession();
        this.$request = this.$platform.createRequestInstance({});
        this.$app.data = {};
    };
    TestSuite.prototype.prepareRequest = function (jovo) {
        // Reset session data if a new session is incoming
        if (jovo.$request.isNewSession() || jovo.$input.type === InputType.Launch) {
            this.$session = new JovoSession();
        }
        if (!this.isRequest(this.requestOrInput)) {
            jovo.$input = this.requestOrInput;
            jovo.$entities = jovo.getEntityMap();
        }
        jovo.$user.isNew = this.$user.isNew;
        _merge(jovo.$user.data, this.$user.data);
        _merge(jovo.$session, this.$session);
        _merge(jovo.$request, this.$request);
        _merge(jovo.$data, this.$data);
        _merge(jovo.$app.data, this.$app.data);
        jovo.$request.setUserId(this.config.userId);
        jovo.$request.setLocale(this.config.locale);
    };
    TestSuite.prototype.postProcess = function (jovo) {
        // Set session data
        jovo.$session.isNew = false;
        this.$user.data = jovo.$user.data;
        this.$session = jovo.$session;
        this.$response = jovo.$response;
        this.$output = jovo.$output;
        this.$data = {}; // Request data is only available for one request, @see https://www.jovo.tech/docs/data#request-data
    };
    TestSuite.prototype.loadApp = function () {
        var appDirectory = [process.cwd(), 'src'];
        var stage = this.config.stage;
        var appFileNames = ["app." + stage + ".ts", "app." + stage + ".js", 'app.ts', 'app.js'];
        for (var _i = 0, appFileNames_1 = appFileNames; _i < appFileNames_1.length; _i++) {
            var appFileName = appFileNames_1[_i];
            var appFilePath = joinPaths.apply(void 0, __spreadArray(__spreadArray([], appDirectory, false), [appFileName], false));
            if (existsSync(appFilePath)) {
                try {
                    // eslint-disable-next-line @typescript-eslint/no-var-requires
                    var app = require(appFilePath).app;
                    if (!app) {
                        continue;
                    }
                    // TODO: Instead of cloning the entire app, it'd be sufficient to
                    // implement app.middlewareCollection.once() to run handlers once per lifecycle
                    return _cloneDeep(app);
                }
                catch (error) {
                    throw new JovoError({ message: "Failed to load app: " + error.message });
                }
            }
        }
        throw new JovoError({
            message: 'App not found.',
            hint: 'Try running your tests in the root directory of your project',
        });
    };
    TestSuite.prototype.isRequest = function (request) {
        return request instanceof JovoRequest;
    };
    return TestSuite;
}(Plugin));
export { TestSuite };
//# sourceMappingURL=TestSuite.js.map