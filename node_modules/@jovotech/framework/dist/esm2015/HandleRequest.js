import _cloneDeep from 'lodash.clonedeep';
import _merge from 'lodash.merge';
import { Extensible } from './Extensible';
import { MiddlewareCollection, Platform, } from './index';
export class HandleRequest extends Extensible {
    constructor(app, server) {
        super(_cloneDeep(app.config));
        this.app = app;
        this.server = server;
        _merge(this, _cloneDeep(app));
    }
    get platforms() {
        return Object.values(this.plugins).filter((plugin) => plugin instanceof Platform);
    }
    // middlewareCollection will be overwritten anyways by merging with App
    initializeMiddlewareCollection() {
        return new MiddlewareCollection();
    }
    getDefaultConfig() {
        return {
            intentMap: {},
            logging: {},
        };
    }
    mount() {
        return this.mountPlugins();
    }
    dismount() {
        return this.dismountPlugins();
    }
    skipMiddlewares(...middlewares) {
        this.middlewareCollection.remove(...middlewares);
    }
    stopMiddlewareExecution() {
        this.middlewareCollection.clear();
        Object.values(this.plugins).forEach((plugin) => {
            if (plugin instanceof Extensible) {
                plugin.middlewareCollection.clear();
            }
        });
    }
}
//# sourceMappingURL=HandleRequest.js.map