"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyModels = exports.generateAppConfiguration = exports.generateProjectConfiguration = exports.modifyDependencies = void 0;
const cli_core_1 = require("@jovotech/cli-core");
const fs_1 = require("fs");
const latest_version_1 = __importDefault(require("latest-version"));
const lodash_set_1 = __importDefault(require("lodash.set"));
const path_1 = require("path");
const utilities_1 = require("./utilities");
/**
 * Mofifies dependencies from the project's package.json. Installs configured CLI plugins and
 * potentially removes dependencies and configurations for ESLint/Jest, if omitted.
 * @param context - Current context, containing configured project properties.
 */
async function modifyDependencies(context) {
    const packageJsonPath = path_1.join(context.projectName, 'package.json');
    const packageJson = JSON.parse(fs_1.readFileSync(packageJsonPath, 'utf-8'));
    // Add CLI platform plugins to project dependencies.
    for (const platform of context.platforms) {
        try {
            const version = await latest_version_1.default(platform.package);
            lodash_set_1.default(packageJson, `dependencies["${platform.package}"]`, `^${version}`);
        }
        catch (error) {
            throw new cli_core_1.JovoCliError({
                message: `Could not retrieve latest version for ${platform.package}`,
                module: 'NewCommand',
            });
        }
    }
    // Add CLI platform plugins to project dependencies
    for (const command of ['build', 'get', 'run', 'new', 'deploy']) {
        const commandPackage = `@jovotech/cli-command-${command}`;
        const version = await latest_version_1.default(commandPackage);
        lodash_set_1.default(packageJson, `devDependencies["${commandPackage}"]`, `^${version}`);
    }
    // Add FileBuilder to project dependencies
    const fileBuilderPackage = '@jovotech/filebuilder';
    const fileBuilderVersion = await latest_version_1.default(fileBuilderPackage);
    lodash_set_1.default(packageJson, `devDependencies["${fileBuilderPackage}"]`, `^${fileBuilderVersion}`);
    fs_1.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
}
exports.modifyDependencies = modifyDependencies;
/**
 * Modifies the project configuration, adding configured CLI plugins with their respective configurations.
 * @param context - Current context, containing configured project properties.
 */
async function generateProjectConfiguration(context) {
    const projectConfigPath = path_1.join(context.projectName, cli_core_1.ProjectConfig.getFileName());
    // Read project configuration, enhance with platform plugins.
    let projectConfig = fs_1.readFileSync(projectConfigPath, 'utf-8');
    const cliPluginsComment = '// Add Jovo CLI plugins here';
    for (const platform of context.platforms) {
        if (!platform.cliModule) {
            continue;
        }
        projectConfig = utilities_1.insert(`const { ${platform.cliModule} } = require(\'${platform.package}\');\n`, projectConfig, 0);
        // Build default config for CLI plugin (default = '')
        const initConfig = await utilities_1.getFormattedPluginInitConfig(platform.cliPlugin);
        projectConfig = utilities_1.insert(`\n\t\tnew ${platform.cliModule}(${initConfig}),`, projectConfig, projectConfig.indexOf(cliPluginsComment) + cliPluginsComment.length);
    }
    fs_1.writeFileSync(projectConfigPath, projectConfig);
}
exports.generateProjectConfiguration = generateProjectConfiguration;
/**
 * Mofifies the app configuration, adding configured Framework plugins.
 * @param context - Current context, containing configured project properties.
 */
async function generateAppConfiguration(context) {
    const packageJsonPath = path_1.join(context.projectName, 'package.json');
    const packageJson = JSON.parse(fs_1.readFileSync(packageJsonPath, 'utf-8'));
    // Read Jovo configuration, modify and enhance with platform plugins.
    const isTypeScriptProject = packageJson.hasOwnProperty('devDependencies') &&
        packageJson.devDependencies.hasOwnProperty('typescript');
    const appConfigPath = path_1.join(context.projectName, 'src', isTypeScriptProject ? 'app.ts' : 'app.js');
    let appConfig = fs_1.readFileSync(appConfigPath, 'utf-8');
    const pluginsComment = '// Add Jovo plugins here';
    for (const platform of context.platforms) {
        const loadedPlugin = utilities_1.loadPlugin(context.projectName, platform.package, platform.module);
        const initConfig = await utilities_1.getFormattedPluginInitConfig(loadedPlugin);
        appConfig = utilities_1.insert(`import { ${platform.module} } from \'${platform.package}\';\n`, appConfig, 0);
        appConfig = utilities_1.insert(`\n\t\tnew ${platform.module}(${initConfig}),`, appConfig, appConfig.indexOf(pluginsComment) + pluginsComment.length);
    }
    fs_1.writeFileSync(appConfigPath, appConfig);
}
exports.generateAppConfiguration = generateAppConfiguration;
function copyModels(context) {
    // Provide language models for each locale.
    const modelsDirectory = 'models';
    for (const locale of context.locales) {
        if (locale === 'en') {
            continue;
        }
        fs_1.copyFileSync(path_1.join(context.projectName, modelsDirectory, 'en.json'), path_1.join(context.projectName, modelsDirectory, `${locale}.json`));
    }
    if (!context.locales.includes('en')) {
        fs_1.unlinkSync(path_1.join(context.projectName, modelsDirectory, 'en.json'));
    }
}
exports.copyModels = copyModels;
//# sourceMappingURL=TemplateBuilder.js.map