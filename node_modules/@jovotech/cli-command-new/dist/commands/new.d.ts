import { CliArgs, CliFlags, EventEmitter, flags, JovoCli, JovoCliPlugin, MarketplacePlugin, PluginCommand, PluginContext, ProjectProperties } from '@jovotech/cli-core';
import NewCommand from '..';
export interface NewContext extends PluginContext, Omit<ProjectProperties, 'name' | 'key'> {
    args: CliArgs<typeof New>;
    flags: CliFlags<typeof New>;
    platforms: (MarketplacePlugin & {
        cliPlugin: JovoCliPlugin;
    })[];
}
export declare type NewEvents = 'new';
export declare class New extends PluginCommand<NewEvents> {
    static id: string;
    static description: string;
    static examples: string[];
    static availablePresets: string[];
    static flags: {
        stage: flags.IOptionFlag<string | undefined>;
        debug: import("@oclif/parser/lib/flags").IBooleanFlag<void>;
        locale: flags.IOptionFlag<string[]>;
        language: flags.IOptionFlag<string | undefined>;
        preset: flags.IOptionFlag<string | undefined>;
        clean: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
    };
    static args: {
        readonly name: "directory";
        readonly description: "Project directory";
        readonly parse: (directory?: string | undefined) => string | undefined;
    }[];
    $context: NewContext;
    static install(cli: JovoCli, plugin: NewCommand, emitter: EventEmitter<NewEvents>): void;
    run(): Promise<void>;
}
