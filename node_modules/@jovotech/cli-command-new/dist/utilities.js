"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFormattedPluginInitConfig = exports.loadPlugin = exports.fetchMarketPlace = exports.insert = exports.runNpmInstall = exports.downloadTemplate = void 0;
const cli_core_1 = require("@jovotech/cli-core");
const download_git_repo_1 = __importDefault(require("download-git-repo"));
const path_1 = require("path");
const util_1 = require("util");
/**
 * Downloads and extracts a template.
 * @param projectPath - Path to download and extract the template to.
 */
async function downloadTemplate(projectPath, language) {
    return new Promise((resolve, reject) => {
        const url = `jovotech/jovo-v4-template${language === 'javascript' ? '-js' : ''}`;
        download_git_repo_1.default(url, projectPath, (error) => {
            if (error) {
                return reject(error);
            }
            resolve();
        });
    });
}
exports.downloadTemplate = downloadTemplate;
async function runNpmInstall(projectPath) {
    try {
        await cli_core_1.execAsync('npm install', { cwd: projectPath });
    }
    catch (error) {
        // Suppress NPM warnings.
        throw new cli_core_1.JovoCliError({ message: error.stderr, module: 'NewCommand' });
    }
}
exports.runNpmInstall = runNpmInstall;
/**
 * Inserts a substring into a provided string at an index.
 * @param substr - Substring to be inserted.
 * @param str - String to insert the substring into.
 * @param index - Position of where to insert the substring.
 */
function insert(substr, str, index) {
    return str.substring(0, index) + substr + str.substring(index);
}
exports.insert = insert;
/**
 * Gets plugins from Jovo Marketplace.
 */
function fetchMarketPlace() {
    // TODO: Fetch from API.
    const plugins = [
        {
            name: 'FileDb',
            module: 'FileDb',
            package: '@jovotech/db-filedb',
            description: 'Store user data in a local JSON file for fast prototyping and debugging',
            tags: 'databases',
        },
        {
            name: 'DynamoDb',
            module: 'DynamoDb',
            package: '@jovotech/db-dynamodb',
            description: 'Store user data to AWS DynamoDb',
            tags: 'databases',
        },
        {
            name: 'Jovo Core Platform',
            module: 'CorePlatform',
            package: '@jovotech/platform-core',
            description: 'Build voice experiences for custom devices',
            tags: 'platforms',
        },
        {
            name: 'Amazon Alexa',
            module: 'AlexaPlatform',
            cliModule: 'AlexaCli',
            package: '@jovotech/platform-alexa',
            description: 'Build apps for Amazon Alexa',
            tags: 'platforms',
        },
        {
            name: 'Google Assistant',
            module: 'GoogleAssistantPlatform',
            cliModule: 'GoogleAssistantCli',
            package: '@jovotech/platform-googleassistant',
            description: 'Build apps for Google Assistant',
            tags: 'platforms',
        },
        {
            name: 'Facebook Messenger',
            module: 'FacebookMessengerPlatform',
            package: '@jovotech/platform-facebookmessenger',
            description: 'Build apps for Facebook Messenger',
            tags: 'platforms',
        },
        {
            name: 'Google Business Messages',
            module: 'GoogleBusinessPlatform',
            package: '@jovotech/platform-googlebusiness',
            description: 'Build apps for Google Business Messages',
            tags: 'platforms',
        },
        {
            name: 'ExpressJs',
            module: 'express',
            package: '@jovotech/server-express',
            description: 'ExpressJs Server',
            tags: 'server',
        },
        {
            name: 'AWS Lambda',
            module: 'lambda',
            package: '@jovotech/server-lambda',
            description: 'Serverless hosting solution by AWS',
            tags: 'server',
        },
    ];
    // Convert tags into arrays.
    for (const plugin of plugins) {
        plugin.tags = plugin.tags.replace(/\s/g, '').split(',');
    }
    return plugins;
}
exports.fetchMarketPlace = fetchMarketPlace;
function loadPlugin(projectPath, pkg, module) {
    return new (require(path_1.resolve(path_1.join(projectPath, 'node_modules', pkg)))[module])();
}
exports.loadPlugin = loadPlugin;
async function getFormattedPluginInitConfig(plugin) {
    var _a;
    const initConfig = await ((_a = plugin.getInitConfig) === null || _a === void 0 ? void 0 : _a.call(plugin));
    if (!initConfig || !Object.keys(initConfig)) {
        return '';
    }
    // Serialize the plugin's default config for further processing
    const rawConfig = util_1.inspect(initConfig, {
        depth: null,
        colors: false,
    });
    // Format default config with correct indentation
    return rawConfig.replace(/\n/g, '\n\t\t');
}
exports.getFormattedPluginInitConfig = getFormattedPluginInitConfig;
//# sourceMappingURL=utilities.js.map