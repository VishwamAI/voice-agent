"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.promptPlugins = exports.promptServer = exports.promptPresetName = exports.promptSavePreset = exports.promptProjectProperties = exports.promptPreset = void 0;
const cli_core_1 = require("@jovotech/cli-core");
const chalk_1 = __importDefault(require("chalk"));
const utilities_1 = require("./utilities");
async function promptPreset(presets) {
    return await cli_core_1.prompt({
        type: 'select',
        message: 'Pick a preset:',
        name: 'selectedPreset',
        choices: [
            // List all presets already defined in Jovo user config.
            ...presets.map((preset) => {
                const projectName = chalk_1.default.underline.blueBright(preset.projectName);
                const output = `(${projectName}/)`;
                return {
                    title: cli_core_1.printUserInput(preset.name),
                    description: output,
                    value: preset.name,
                };
            }),
            {
                title: cli_core_1.printUserInput('Or manually select features...'),
                value: 'manual',
            },
        ],
    }, {
        onCancel() {
            process.exit();
        },
    });
}
exports.promptPreset = promptPreset;
async function promptProjectProperties(args, flags) {
    // Override, thus preanswer certain prompts, depending on process arguments.
    cli_core_1.prompt.override({
        projectName: args.directory,
        language: flags.language,
        locales: flags.locale,
    });
    const props = await cli_core_1.prompt([
        {
            name: 'projectName',
            message: "Please enter your project's name:",
            type: 'text',
            initial: 'helloworld',
            onState() {
                this.rendered = cli_core_1.printUserInput(this.rendered);
            },
        },
        // Prompt for Platforms (multiple)
        {
            name: 'platforms',
            message: 'Choose the platforms you want to use (select with space):',
            type: 'multiselect',
            instructions: false,
            choices: utilities_1.fetchMarketPlace()
                .filter((plugin) => plugin.tags.includes('platforms'))
                .map((plugin) => ({
                title: cli_core_1.printUserInput(plugin.name),
                value: plugin,
                description: plugin.description,
            })),
        },
        {
            name: 'locales',
            message: 'Type the locales you want to use (comma-separated):',
            type: 'list',
            initial: 'en',
            validate(locales) {
                try {
                    for (const locale of locales.split(',')) {
                        cli_core_1.validateLocale(locale.trim());
                    }
                }
                catch (error) {
                    return error.message;
                }
                return true;
            },
            onState() {
                this.rendered = cli_core_1.printUserInput(this.rendered);
            },
        },
        {
            name: 'language',
            message: 'Choose the programming language you want to use:',
            type: 'select',
            instructions: false,
            choices: cli_core_1.SUPPORTED_LANGUAGES.map((lng) => ({
                title: cli_core_1.printUserInput(cli_core_1.getLanguagePascalCase(lng)),
                value: lng,
            })),
        },
    ], {
        onCancel() {
            process.exit();
        },
    });
    return props;
}
exports.promptProjectProperties = promptProjectProperties;
async function promptSavePreset() {
    return await cli_core_1.prompt({
        name: 'savePreset',
        message: `Do you want to save this preset to ${cli_core_1.printHighlight('.jovo/config')}?`,
        type: 'select',
        choices: [
            { title: cli_core_1.printUserInput('Yes'), value: true },
            { title: cli_core_1.printUserInput('No'), value: false },
        ],
    }, {
        onCancel() {
            process.exit();
        },
    });
}
exports.promptSavePreset = promptSavePreset;
async function promptPresetName() {
    return await cli_core_1.prompt({
        name: 'presetName',
        message: 'Preset name:',
        type: 'text',
        initial: 'default',
        validate(presetName) {
            if (/\s/g.test(presetName.trim())) {
                return 'Preset name cannot include whitespace!';
            }
            return true;
        },
        format(presetName) {
            return presetName.trim();
        },
        onState() {
            this.rendered = cli_core_1.printUserInput(this.rendered);
        },
    }, {
        onCancel() {
            process.exit();
        },
    });
}
exports.promptPresetName = promptPresetName;
async function promptServer(servers) {
    return await cli_core_1.prompt({
        name: 'server',
        message: 'Which server do you want to use?',
        type: 'select',
        choices: [
            ...servers,
            { title: cli_core_1.printUserInput("None (or I'll add it later)"), value: undefined },
        ],
    }, {
        onCancel() {
            process.exit();
        },
    });
}
exports.promptServer = promptServer;
async function promptPlugins(message, plugins) {
    return await cli_core_1.prompt({
        name: 'plugins',
        message,
        type: 'multiselect',
        choices: plugins,
    }, {
        onCancel() {
            process.exit();
        },
    });
}
exports.promptPlugins = promptPlugins;
//# sourceMappingURL=prompts.js.map