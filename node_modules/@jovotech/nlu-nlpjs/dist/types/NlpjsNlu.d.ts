import { DeepPartial, InterpretationPluginConfig, Jovo, NluData, NluPlugin, Platform, UnknownObject } from '@jovotech/framework';
export interface Nlp {
    [key: string]: any;
}
export interface NlpJsEntityResolutionDuration {
    timex?: string;
    type?: string;
    value?: string;
}
export interface NlpJsEntityResolution {
    strValue?: string;
    strFutureValue?: string;
    value?: string | number;
    subType?: string;
    values?: NlpJsEntityResolutionDuration[];
    timex?: string;
}
export declare enum NlpJsEntityType {
    Age = "age",
    Boolean = "boolean",
    Currency = "currency",
    Date = "date",
    DateRange = "daterange",
    DateTime = "datetime",
    DateTimeRange = "datetimerange",
    Dimension = "dimension",
    Duration = "duration",
    Email = "email",
    Enum = "enum",
    Hashtag = "hashtag",
    Ip = "ip",
    Mention = "mention",
    Number = "number",
    NumberRange = "numberrange",
    Ordinal = "ordinal",
    Percentage = "percentage",
    PhoneNumber = "phoneNumber",
    Regex = "regex",
    Temperature = "temperature",
    Time = "time",
    TimeRange = "timerange",
    Timezone = "timezone",
    Url = "url"
}
export interface NlpJsEntity {
    start: number;
    end: number;
    len: number;
    levenshtein: number;
    accuracy: number;
    entity: string;
    type: 'enum' | string | NlpJsEntityType;
    option: string;
    sourceText: string;
    utteranceText: string;
    alias?: string;
    resolution?: NlpJsEntityResolution;
}
export declare type SetupModelFunction = (parent: Platform, nlp: Nlp) => void | Promise<void>;
export interface NlpjsNluConfig extends InterpretationPluginConfig {
    languageMap: UnknownObject;
    preTrainedModelFilePath: string;
    useModel: boolean;
    modelsPath: string;
    setupModelCallback?: SetupModelFunction;
}
export declare type NlpjsNluInitConfig = DeepPartial<NlpjsNluConfig> & Pick<NlpjsNluConfig, 'languageMap'>;
export declare class NlpjsNlu extends NluPlugin<NlpjsNluConfig> {
    nlpjs?: Nlp;
    constructor(config: NlpjsNluInitConfig);
    getDefaultConfig(): NlpjsNluConfig;
    initialize(parent: Platform): Promise<void>;
    processText(jovo: Jovo, text: string): Promise<NluData | undefined>;
    private addCorpusFromModelsIn;
    private getResolvedValue;
}
