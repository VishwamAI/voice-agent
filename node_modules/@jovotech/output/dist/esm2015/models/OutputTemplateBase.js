var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Type } from 'class-transformer';
import { IsArray, IsBooleanOrInstance, IsInstance, IsOptional, ValidateNested } from '..';
import { TransformMessage } from '../decorators/transformation/TransformMessage';
import { IsStringOrInstance } from '../decorators/validation/IsStringOrInstance';
import { Card } from './Card';
import { Carousel } from './Carousel';
import { Listen } from './Listen';
import { Message } from './Message';
import { QuickReply } from './QuickReply';
export class OutputTemplateBase {
}
__decorate([
    IsOptional(),
    IsStringOrInstance(Message),
    TransformMessage(),
    __metadata("design:type", Object)
], OutputTemplateBase.prototype, "message", void 0);
__decorate([
    IsOptional(),
    IsStringOrInstance(Message),
    Type(() => Message),
    __metadata("design:type", Object)
], OutputTemplateBase.prototype, "reprompt", void 0);
__decorate([
    IsOptional(),
    IsBooleanOrInstance(Listen),
    Type(() => Listen),
    __metadata("design:type", Object)
], OutputTemplateBase.prototype, "listen", void 0);
__decorate([
    IsOptional(),
    IsArray(),
    IsStringOrInstance(QuickReply, {
        each: true,
    }),
    Type(() => QuickReply),
    __metadata("design:type", Array)
], OutputTemplateBase.prototype, "quickReplies", void 0);
__decorate([
    IsOptional(),
    IsInstance(Card),
    ValidateNested(),
    Type(() => Card),
    __metadata("design:type", Card)
], OutputTemplateBase.prototype, "card", void 0);
__decorate([
    IsOptional(),
    IsInstance(Carousel),
    ValidateNested(),
    Type(() => Carousel),
    __metadata("design:type", Carousel)
], OutputTemplateBase.prototype, "carousel", void 0);
//# sourceMappingURL=OutputTemplateBase.js.map