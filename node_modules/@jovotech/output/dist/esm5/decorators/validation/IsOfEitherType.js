import { formatList, registerDecorator } from '../..';
export function IsOfEitherType(types, options) {
    return function (object, propertyKey) {
        registerDecorator({
            name: 'isOfEitherType',
            target: object.constructor,
            propertyName: propertyKey.toString(),
            constraints: [types],
            options: options,
            validator: {
                validate: function (value, args) {
                    if (!value) {
                        return false;
                    }
                    if (!args.constraints[0].includes(typeof value)) {
                        args.constraints[1] = typeof value;
                        return false;
                    }
                    if (Array.isArray(value)) {
                        if (args.constraints[0].includes('array')) {
                            return true;
                        }
                        else {
                            args.constraints[1] = 'Array';
                            return false;
                        }
                    }
                    return false;
                },
                defaultMessage: function (args) {
                    var typesText = formatList(args.constraints[0]);
                    var eachText = (options === null || options === void 0 ? void 0 : options.each) ? 'each item in ' : '';
                    return eachText + "$property has to be one of the following types " + typesText + ". Current type is " + args.constraints[1];
                },
            },
        });
    };
}
//# sourceMappingURL=IsOfEitherType.js.map