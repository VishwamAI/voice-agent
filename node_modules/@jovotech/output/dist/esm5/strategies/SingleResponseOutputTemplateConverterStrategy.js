var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { SsmlUtilities } from '@jovotech/common';
import { mergeInstances, mergeListen, NormalizedOutputTemplate, plainToClass, } from '..';
import { OutputTemplateConverterStrategy } from '../OutputTemplateConverterStrategy';
/**
 * Strategy that merges multiple OutputTemplates into a single NormalizedOutputTemplate and only converts the merged NormalizedOutputTemplate to a response.
 * - Strings get concatenated and separated by a whitespace.
 * - Quick Replies get merged into a single array.
 * - Card/Carousel the last in the array is used.
 * - NativeResponses get merged.
 * - Listen gets merged.
 */
var SingleResponseOutputTemplateConverterStrategy = /** @class */ (function (_super) {
    __extends(SingleResponseOutputTemplateConverterStrategy, _super);
    function SingleResponseOutputTemplateConverterStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SingleResponseOutputTemplateConverterStrategy.prototype.normalizeOutput = function (output) {
        var normalizedOutput = _super.prototype.normalizeOutput.call(this, output);
        if (Array.isArray(normalizedOutput)) {
            normalizedOutput = this.mergeOutputTemplates(normalizedOutput);
        }
        return this.shouldSanitize() ? this.sanitizeOutput(normalizedOutput) : normalizedOutput;
    };
    SingleResponseOutputTemplateConverterStrategy.prototype.normalizeResponse = function (rawResponse) {
        return _super.prototype.normalizeResponse.call(this, rawResponse);
    };
    SingleResponseOutputTemplateConverterStrategy.prototype.mergeOutputTemplates = function (output) {
        var _this = this;
        return plainToClass(NormalizedOutputTemplate, output.reduce(function (accumulator, current) { return _this.mergeOutputTemplateWith(accumulator, current); }, {}));
    };
    SingleResponseOutputTemplateConverterStrategy.prototype.mergeOutputTemplateWith = function (target, mergeWith) {
        var _a;
        this.mergeOutputTemplateBaseWith(target, mergeWith);
        var platformOutput = (_a = mergeWith.platforms) === null || _a === void 0 ? void 0 : _a[this.platformName];
        if (platformOutput) {
            if (!target.platforms) {
                target.platforms = {};
            }
            if (!target.platforms[this.platformName]) {
                target.platforms[this.platformName] = {};
            }
            var targetPlatformOutput = target.platforms[this.platformName];
            if (platformOutput.nativeResponse) {
                if (!targetPlatformOutput.nativeResponse) {
                    targetPlatformOutput.nativeResponse = {};
                }
                mergeInstances(targetPlatformOutput.nativeResponse, platformOutput.nativeResponse);
            }
            this.mergeOutputTemplateBaseWith(targetPlatformOutput, platformOutput);
        }
        return target;
    };
    SingleResponseOutputTemplateConverterStrategy.prototype.mergeOutputTemplateBaseWith = function (target, mergeWith) {
        var _a;
        var message = mergeWith.message;
        if (message) {
            target.message = this.mergeMessages(target.message, message);
        }
        var reprompt = mergeWith.reprompt;
        if (reprompt) {
            target.reprompt = this.mergeMessages(target.reprompt, reprompt);
        }
        var quickReplies = mergeWith.quickReplies;
        if (quickReplies) {
            if (!target.quickReplies) {
                target.quickReplies = [];
            }
            (_a = target.quickReplies).push.apply(_a, quickReplies);
        }
        var card = mergeWith.card;
        if (card) {
            target.card = __assign({}, card);
        }
        var carousel = mergeWith.carousel;
        if (carousel) {
            target.carousel = __assign({}, carousel);
        }
        target.listen = mergeListen(target.listen, mergeWith.listen);
    };
    SingleResponseOutputTemplateConverterStrategy.prototype.mergeMessages = function (target, mergeWith) {
        if (!target) {
            return mergeWith;
        }
        if (typeof target === 'string' && typeof mergeWith === 'string') {
            return this.mergeSpeech(target, mergeWith);
        }
        var targetSpeech = typeof target === 'string' ? target : target.speech;
        var mergeWithSpeech = typeof mergeWith === 'string' ? mergeWith : mergeWith.speech;
        var mergedSpeech = this.mergeSpeech(targetSpeech, mergeWithSpeech);
        var targetText = typeof target === 'string' ? target : target.text;
        var mergeWithText = typeof mergeWith === 'string' ? mergeWith : mergeWith.text;
        var mergedText = this.mergeText(targetText, mergeWithText);
        var message = {};
        if (mergedSpeech) {
            message.speech = mergedSpeech;
        }
        if (mergedText) {
            message.text = mergedText;
        }
        return message;
    };
    SingleResponseOutputTemplateConverterStrategy.prototype.mergeSpeech = function (target, mergeWith) {
        if (!target && !mergeWith) {
            return;
        }
        if (!target && mergeWith) {
            return SsmlUtilities.toSSML(mergeWith);
        }
        if (!mergeWith && target) {
            return SsmlUtilities.toSSML(target);
        }
        var mergedText = [target, mergeWith].reduce(function (result, text) {
            if (text) {
                result += "" + ((result === null || result === void 0 ? void 0 : result.length) ? ' ' : '') + SsmlUtilities.removeSSMLSpeakTags(text);
            }
            return result;
        });
        return SsmlUtilities.isSSML(target) || SsmlUtilities.isSSML(mergeWith)
            ? SsmlUtilities.toSSML(mergedText)
            : mergedText;
    };
    SingleResponseOutputTemplateConverterStrategy.prototype.mergeText = function (target, mergeWith) {
        if (!target && !mergeWith) {
            return;
        }
        if (!target && mergeWith) {
            return SsmlUtilities.removeSSML(mergeWith);
        }
        if (!mergeWith && target) {
            return SsmlUtilities.removeSSML(target);
        }
        return [target, mergeWith].reduce(function (result, text) {
            if (text) {
                if (!result) {
                    result = '';
                }
                result += "" + ((result === null || result === void 0 ? void 0 : result.length) ? ' ' : '') + SsmlUtilities.removeSSML(text);
            }
            return result;
        }, undefined);
    };
    return SingleResponseOutputTemplateConverterStrategy;
}(OutputTemplateConverterStrategy));
export { SingleResponseOutputTemplateConverterStrategy };
//# sourceMappingURL=SingleResponseOutputTemplateConverterStrategy.js.map