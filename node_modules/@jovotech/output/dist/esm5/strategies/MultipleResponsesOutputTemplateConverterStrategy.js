var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { OutputTemplateConverterStrategy, } from '../OutputTemplateConverterStrategy';
/**
 * Strategy that can have multiple OutputTemplates and multiple Responses.
 */
var MultipleResponsesOutputTemplateConverterStrategy = /** @class */ (function (_super) {
    __extends(MultipleResponsesOutputTemplateConverterStrategy, _super);
    function MultipleResponsesOutputTemplateConverterStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MultipleResponsesOutputTemplateConverterStrategy.prototype.normalizeOutput = function (output) {
        var _this = this;
        var normalizedOutput = _super.prototype.normalizeOutput.call(this, output);
        if (!this.shouldSanitize()) {
            return normalizedOutput;
        }
        return Array.isArray(normalizedOutput)
            ? normalizedOutput.map(function (outputItem, index) { return _this.sanitizeOutput(outputItem, index); })
            : this.sanitizeOutput(normalizedOutput);
    };
    MultipleResponsesOutputTemplateConverterStrategy.prototype.toResponse = function (output) {
        var _this = this;
        return Array.isArray(output)
            ? output
                .map(function (outputItem) { return _this.convertOutput(outputItem); })
                .reduce(function (accumulator, currentValue) {
                if (Array.isArray(currentValue)) {
                    accumulator.push.apply(accumulator, currentValue);
                }
                else {
                    accumulator.push(currentValue);
                }
                return accumulator;
            }, [])
            : this.convertOutput(output);
    };
    MultipleResponsesOutputTemplateConverterStrategy.prototype.fromResponse = function (responseOrResponses) {
        var _this = this;
        return Array.isArray(responseOrResponses)
            ? responseOrResponses.map(function (responseItem) { return _this.convertResponse(responseItem); })
            : this.convertResponse(responseOrResponses);
    };
    return MultipleResponsesOutputTemplateConverterStrategy;
}(OutputTemplateConverterStrategy));
export { MultipleResponsesOutputTemplateConverterStrategy };
//# sourceMappingURL=MultipleResponsesOutputTemplateConverterStrategy.js.map