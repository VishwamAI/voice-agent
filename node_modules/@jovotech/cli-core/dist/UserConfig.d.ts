import { PlainObjectType } from '.';
import { Preset } from './interfaces';
export declare class UserConfig {
    webhook: {
        uuid: string;
    };
    cli: {
        plugins: string[];
        presets: Preset[];
        omitHints?: boolean;
    };
    timeLastUpdateMessage?: string;
    static instance?: UserConfig;
    constructor();
    static getInstance(): UserConfig;
    /**
     * Returns the path of the Jovo user config.
     */
    static getPath(version?: 'v4' | 'v3'): string;
    /**
     * Loads and returns Jovo user config.
     */
    load(): PlainObjectType<UserConfig>;
    /**
     * Saves the provided user config.
     * @param config - JovoUserConfig object.
     */
    save(config?: PlainObjectType<UserConfig>): void;
    /**
     * Creates and returns a new Jovo user config.
     */
    private create;
    getParameter(path: string): unknown;
    setParameter(path: string, value: unknown): void;
    /**
     * Returns the webhook uuid for the current user from the Jovo user config.
     */
    getWebhookUuid(): string;
    /**
     * Gets array of presets defined inside .jovo/config.
     */
    getPresets(): Preset[];
    /**
     * Gets a preset from .jovo/config.
     * @param presetKey - Key for the preset.
     * @throws JovoCliError, if the preset could not be found.
     */
    getPreset(presetKey: string): Preset;
    /**
     * Saves preset to .jovo/config.
     * @param preset - Preset to save.
     */
    savePreset(preset: Preset): Promise<void>;
    private getDefaultPreset;
}
