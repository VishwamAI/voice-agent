"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Task = void 0;
const chalk_1 = __importDefault(require("chalk"));
const lodash_merge_1 = __importDefault(require("lodash.merge"));
const ora_1 = __importDefault(require("ora"));
const JovoCliError_1 = require("./JovoCliError");
const Logger_1 = require("./Logger");
const utilities_1 = require("./utilities");
const is_ci_1 = __importDefault(require("is-ci"));
class Task {
    constructor(title, action = [], config) {
        this.title = title;
        this.action = action;
        this.config = lodash_merge_1.default(this.getDefaultConfig(), config);
    }
    getDefaultConfig() {
        return {
            enabled: true,
            indentation: 0,
        };
    }
    add(...actions) {
        if (!Array.isArray(this.action)) {
            throw new JovoCliError_1.JovoCliError({
                message: "Can't push Task instance if the current Task is a function.",
                details: 'Consider converting the provided function to a Task instance.',
            });
        }
        this.action.push(...actions);
    }
    indent(indentation) {
        this.config.indentation = indentation;
    }
    enable() {
        this.config.enabled = true;
    }
    disable() {
        this.config.enabled = false;
    }
    async run() {
        if (!this.config.enabled) {
            return;
        }
        if (Array.isArray(this.action)) {
            Logger_1.Log.info(this.title.trim(), { indent: this.config.indentation });
            for (const action of this.action) {
                action.indent(this.config.indentation + 2);
                await action.run();
            }
        }
        else {
            if (Logger_1.Log.isRaw()) {
                Logger_1.Log.info(this.title.trim(), { indent: this.config.indentation });
            }
            else {
                // Initialize spinner here, since options can change after the task has been initialized
                this.spinner = ora_1.default({
                    text: this.title,
                    interval: 50,
                    indent: this.config.indentation,
                    isEnabled: is_ci_1.default ? false : undefined, // // fallback to default config of ora, unless explicitly set
                });
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                if (!is_ci_1.default && this.spinner['stream'] && this.spinner['stream'].isTTY) {
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore
                    this.spinner['stream'].cursorTo(this.config.indentation);
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore
                    this.spinner['stream'].clearLine = () => { };
                    this.spinner.start();
                }
            }
            try {
                let output = await this.action();
                if (!Logger_1.Log.isRaw()) {
                    this.spinner.succeed();
                }
                if (output) {
                    if (!Array.isArray(output)) {
                        output = [output];
                    }
                    for (const str of output) {
                        Logger_1.Log.info(chalk_1.default.white.dim(str), { indent: this.config.indentation + 2 });
                    }
                }
            }
            catch (error) {
                if (!Logger_1.Log.isRaw()) {
                    this.spinner.fail();
                }
                if (!utilities_1.isJovoCliError(error)) {
                    throw new JovoCliError_1.JovoCliError({ message: error.message });
                }
                throw error;
            }
        }
    }
}
exports.Task = Task;
//# sourceMappingURL=Task.js.map