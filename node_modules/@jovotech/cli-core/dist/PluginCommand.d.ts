import Command, { flags } from '@oclif/command';
import * as Parser from '@oclif/parser';
import { EventEmitter } from './EventEmitter';
import { DefaultEvents, Events, MiddlewareCollection } from './interfaces';
import { JovoCliError } from './JovoCliError';
import { PluginComponent } from './PluginComponent';
/**
 * Extends abstract Oclif Command class to mixin with PluginCommand.
 * * Workaround, since mixin() can't support abstract classes.
 */
declare class OclifCommand extends Command {
    run(): PromiseLike<unknown>;
}
declare const PluginCommand_base: import("ts-mixer/dist/types/types").Class<[argv: string[], config: import("@oclif/config").IConfig], PluginComponent & OclifCommand, {
    prototype: PluginComponent;
    install: typeof PluginComponent.install;
} & {
    prototype: OclifCommand;
    _base: string;
    id: string;
    title: string | undefined;
    description: string | undefined;
    hidden: boolean;
    usage: string | string[] | undefined;
    help: string | undefined;
    aliases: string[];
    strict: boolean;
    parse: boolean;
    flags?: flags.Input<any> | undefined;
    args?: Parser.args.Input | undefined;
    plugin: import("@oclif/config").IPlugin | undefined;
    examples: string[] | undefined;
    parserOptions: {};
    run: (argv?: string[] | undefined, config?: import("@oclif/config").LoadOptions) => PromiseLike<any>;
}>;
export declare abstract class PluginCommand<T extends Events = DefaultEvents> extends PluginCommand_base {
    middlewareCollection: MiddlewareCollection<T | DefaultEvents>;
    $emitter: EventEmitter<T | DefaultEvents>;
    static args: Parser.args.Input;
    static flags: {
        stage: flags.IOptionFlag<string | undefined>;
        debug: Parser.flags.IBooleanFlag<void>;
    };
    /**
     * Loads command into CLI.
     * * Necessary for Oclif Framework.
     */
    static load(): typeof PluginCommand;
    /**
     * Declare run() as abstract again.
     */
    abstract run(): Promise<unknown>;
    /**
     * Overwrite parse()
     */
    parse<FLAGS>(command?: Parser.Input<FLAGS>, argv?: string[]): Parser.Output<FLAGS, any>;
    /**
     * Catch possible errors and print them.
     * @param error - JovoCliError.
     */
    catch(error: JovoCliError | Error): Promise<void>;
}
export {};
