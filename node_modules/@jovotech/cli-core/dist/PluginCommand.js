"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PluginCommand = void 0;
const command_1 = __importStar(require("@oclif/command"));
const ts_mixer_1 = require("ts-mixer");
const JovoCliError_1 = require("./JovoCliError");
const PluginComponent_1 = require("./PluginComponent");
const utilities_1 = require("./utilities");
/**
 * Extends abstract Oclif Command class to mixin with PluginCommand.
 * * Workaround, since mixin() can't support abstract classes.
 */
class OclifCommand extends command_1.default {
    run() {
        throw new Error('Method not implemented.');
    }
}
class PluginCommand extends ts_mixer_1.Mixin(PluginComponent_1.PluginComponent, OclifCommand) {
    /**
     * Loads command into CLI.
     * * Necessary for Oclif Framework.
     */
    static load() {
        return this;
    }
    /**
     * Overwrite parse()
     */
    parse(command = this.constructor, argv) {
        const output = super.parse(command, argv);
        for (const arg of Object.keys(output.args)) {
            const commandArgument = command.args.find((el) => el.name === arg);
            // TODO: Multiple as last argument?
            if (!commandArgument.multiple || command.args.length > 1) {
                break;
            }
            const argValues = output.argv.filter((el) => !el.startsWith('-'));
            output.args[arg] = argValues;
        }
        return output;
    }
    /**
     * Catch possible errors and print them.
     * @param error - JovoCliError.
     */
    async catch(error) {
        // Since the Jovo CLI works with global and local modules,
        // the instanceof parameter won't work at times when an error is
        // thrown in a local and validated in a global module.
        // Hence we must check manually if the error satisfies properties of JovoCliError.
        if (!utilities_1.isJovoCliError(error)) {
            error = new JovoCliError_1.JovoCliError({
                message: error.message,
            });
        }
        JovoCliError_1.JovoCliError.print(error);
        process.exit(1);
    }
}
exports.PluginCommand = PluginCommand;
PluginCommand.args = [];
PluginCommand.flags = {
    stage: command_1.flags.string({
        description: 'Takes configuration from specified stage',
    }),
    debug: command_1.flags.boolean({
        description: 'Shows debugging information, such as the error trace stack',
        parse(debug) {
            if (debug) {
                process.env.JOVO_CLI_LOG_LEVEL = 'DEBUG';
            }
        },
    }),
};
//# sourceMappingURL=PluginCommand.js.map