/// <reference types="node" />
import { ExecOptions } from 'child_process';
import { ExecResponse, LocaleMap, Package, SupportedLanguages } from './interfaces';
import { JovoCliError } from './JovoCliError';
/**
 * Provides own version of execSync by returning a promise on exec().
 * This offers a few advantages, such as handling stream output more precise.
 * @param cmd - Command to execute, can be an array which will be joined with together with whitespaces
 * @param options - Options to pass to exec()
 */
export declare function execAsync(cmd: string | string[], options?: ExecOptions): Promise<ExecResponse>;
/**
 * Waits for the provided amount of time.
 * @param ms - Time to wait in ms.
 */
export declare function wait(ms: number): Promise<void>;
/**
 * Recursively deletes all files and folders within a directory.
 * @param path - Path to directory to delete.
 */
export declare function deleteFolderRecursive(path: string): void;
/**
 * Returns packages with their respective versions from project dependency files, comparing dependencies listed
 * in both package.json and package-lock.json.
 * @param packageRegex - RegExp to filter for packages
 * @param projectPath - Path for the current project
 */
export declare function getPackages(packageRegex: RegExp): Package[];
/**
 * Gets all packages from the project dependency file, matching packageRegex, with their
 * respective @latest version.
 * @param packageRegex - RegExp to filter for packages.
 */
export declare function getPackageVersions(packageRegex: RegExp): Promise<Package[]>;
export declare function getOutdatedPackages(packageRegex: RegExp): Promise<Package[]>;
/**
 * Checks if the current working directory is a Jovo Project.
 */
export declare function checkForProjectDirectory(isInProjectDirectory: boolean): void;
/**
 * Customizer for _.mergeWith() to merge arrays instead of overwriting.
 * @param objValue - Array to merge into source.
 * @param srcValue - Source array.
 */
export declare function mergeArrayCustomizer(target: unknown[], source: unknown[]): unknown[] | undefined;
/**
 * Strips ANSI escape codes from the provided string.
 * @param output - String potentially containing ANSI escape codes to be stripped.
 */
export declare function getRawString(output: string): string;
/**
 * Returns platform-specific resolved locales. If no locale map is specified, returns [locale].
 * @param locale - Locale for which to return resolved locales.
 * @param supportedLocales - Array of supported locales, required to match glob patterns such as en-*.
 * @param localeMap - Optional locale map from the plugin configuration.
 */
export declare function getResolvedLocales(locale: string, supportedLocales: readonly string[], localeMap?: LocaleMap): string[];
/**
 * Converts the provided programming language to Pascal Case
 * @param lng - Programming language to convert
 */
export declare function getLanguagePascalCase(lng: SupportedLanguages): string;
/**
 * Checks whether the provided error is a JovoCliError.
 * Since the Jovo CLI uses both global and local modules, an error thrown in a local module
 * is not the same instance of a JovoCliError as in a global one.
 * @param error - Error to check
 */
export declare function isJovoCliError(error: Error): error is JovoCliError;
