import { PlainObjectType } from '@jovotech/common';
import { ConfigHooks } from './interfaces';
import { JovoCliPlugin } from './JovoCliPlugin';
export declare class ProjectConfig {
    endpoint?: string;
    plugins?: JovoCliPlugin[];
    hooks?: ConfigHooks;
    models?: {
        enabled?: boolean;
        directory?: string;
        override?: Record<string, unknown>;
    };
    defaultStage?: string;
    stages?: {
        [key: string]: ProjectConfig;
    };
    private static instance?;
    constructor(config: PlainObjectType<ProjectConfig>);
    constructor(projectPath: string, stage?: string);
    /**
     * Returns singleton project instance.
     * @param projectPath - Current project path.
     * @param stage - Optional stage.
     */
    static getInstance(projectPath: string, stage?: string): ProjectConfig;
    /**
     * Returns configuration, considering the stage. If no stage is set, just returns this.getConfigContent().
     */
    private load;
    /**
     * Reads and returns the content of the project's config file.
     */
    private loadContent;
    /**
     * Gets the value for a provided path from the configuration.
     * @param path
     */
    getParameter(path: string): unknown | undefined;
    /**
     * Returns the name of the Jovo config file.
     */
    static getFileName(version?: 'v4' | 'v3'): string;
}
