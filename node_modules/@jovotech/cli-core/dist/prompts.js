"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.promptSupportedLocales = exports.promptOverwrite = exports.promptOverwriteReverseBuild = void 0;
const prompts_1 = __importDefault(require("prompts"));
const constants_1 = require("./constants");
const prints_1 = require("./prints");
/**
 * Prompt if existing model files should be overwritten.
 */
async function promptOverwriteReverseBuild() {
    return await prompts_1.default({
        name: 'overwrite',
        type: 'select',
        message: 'Found existing model files. How do you want to proceed?',
        choices: [
            { title: prints_1.printUserInput('Overwrite'), value: constants_1.ANSWER_OVERWRITE },
            { title: prints_1.printUserInput('Backup old files and proceed'), value: constants_1.ANSWER_BACKUP },
            { title: prints_1.printUserInput('Cancel'), value: constants_1.ANSWER_CANCEL },
        ],
    }, {
        onCancel() {
            process.exit();
        },
    });
}
exports.promptOverwriteReverseBuild = promptOverwriteReverseBuild;
/**
 * Prompt for overwrite.
 * @param message - Message to display on prompt.
 */
async function promptOverwrite(message) {
    return await prompts_1.default({
        name: 'overwrite',
        type: 'select',
        message,
        choices: [
            {
                title: prints_1.printUserInput('Overwrite'),
                value: constants_1.ANSWER_OVERWRITE,
            },
            {
                title: prints_1.printUserInput('Cancel'),
                value: constants_1.ANSWER_CANCEL,
            },
        ],
    }, {
        onCancel(_prompt, answers) {
            answers.overwrite = constants_1.ANSWER_CANCEL;
        },
    });
}
exports.promptOverwrite = promptOverwrite;
async function promptSupportedLocales(locale, platform, supportedLocales) {
    return await prompts_1.default({
        name: 'locales',
        type: 'multiselect',
        message: `Locale ${prints_1.printHighlight(locale)} is not supported by ${platform}.\n  Please provide an alternative locale (type to filter, select with space):`,
        instructions: false,
        min: 1,
        choices: supportedLocales.map((locale) => ({
            title: prints_1.printUserInput(locale),
            value: locale,
        })),
    }, {
        onCancel() {
            process.exit();
        },
    });
}
exports.promptSupportedLocales = promptSupportedLocales;
//# sourceMappingURL=prompts.js.map