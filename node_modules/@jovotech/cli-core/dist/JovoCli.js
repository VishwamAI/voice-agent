"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JovoCli = void 0;
const fs_1 = require("fs");
const lodash_get_1 = __importDefault(require("lodash.get"));
const path_1 = require("path");
const url_1 = require("url");
const which_1 = __importDefault(require("which"));
const ProjectConfig_1 = require("./ProjectConfig");
const Logger_1 = require("./Logger");
const prints_1 = require("./prints");
const Project_1 = require("./Project");
const UserConfig_1 = require("./UserConfig");
const constants_1 = require("./constants");
class JovoCli {
    constructor() {
        this.plugins = [];
        this.projectPath = process.cwd();
        this.userConfig = UserConfig_1.UserConfig.getInstance();
        if (this.isInV3ProjectDirectory()) {
            Logger_1.Log.spacer();
            Logger_1.Log.warning(`The current project is incompatible with the Jovo CLI @v4. Consider using the Jovo CLI @v3 instead. You can access it with "${prints_1.printHighlight('jovo3')}".`);
            try {
                which_1.default.sync('jovo3');
            }
            catch (error) {
                Logger_1.Log.warning(`You can install its latest version using "npm install -g jovo-cli".`);
            }
            Logger_1.Log.spacer();
            process.exit(1);
        }
        if (this.isInProjectDirectory()) {
            Logger_1.Log.verbose(`Found Jovo project in ${this.projectPath}`);
            this.project = Project_1.Project.getInstance(this.projectPath);
        }
    }
    static getInstance() {
        if (!this.instance) {
            this.instance = new JovoCli();
        }
        return this.instance;
    }
    isInV3ProjectDirectory() {
        const packageJsonPath = path_1.join(this.projectPath, 'package.json');
        if (!fs_1.existsSync(packageJsonPath)) {
            return false;
        }
        const packageJson = require(packageJsonPath);
        if (!lodash_get_1.default(packageJson, 'dependencies["jovo-framework"]')) {
            return false;
        }
        return fs_1.existsSync(path_1.join(this.projectPath, ProjectConfig_1.ProjectConfig.getFileName('v3')));
    }
    /**
     * Checks whether current working directory is a Jovo project.
     */
    isInProjectDirectory() {
        const packageJsonPath = path_1.join(this.projectPath, 'package.json');
        if (!fs_1.existsSync(packageJsonPath)) {
            return false;
        }
        const packageJson = require(packageJsonPath);
        if (!lodash_get_1.default(packageJson, 'dependencies["@jovotech/framework"]')) {
            return false;
        }
        return fs_1.existsSync(path_1.join(this.projectPath, ProjectConfig_1.ProjectConfig.getFileName()));
    }
    collectCommandPlugins() {
        Logger_1.Log.verbose('Loading global CLI plugins');
        const globalPlugins = [];
        const plugins = this.userConfig.getParameter('cli.plugins') || [];
        const globalNpmFolder = path_1.dirname(process.env.JOVO_CLI_EXEC_PATH);
        for (const pluginId of plugins) {
            // Load plugin from global 'node_modules/'.
            const pluginPaths = [
                path_1.join(process.env.JOVO_CLI_EXEC_PATH, 'node_modules', pluginId, 'dist', 'index.js'),
                path_1.join(globalNpmFolder, pluginId, 'dist', 'index.js'),
            ];
            for (const pluginPath of pluginPaths) {
                // If the plugin does not exist, skip it quietly.
                if (!fs_1.existsSync(pluginPath)) {
                    continue;
                }
                Logger_1.Log.verbose(`Loading ${pluginId} from ${pluginPath}`, { indent: 2 });
                const plugin = new (require(pluginPath).default)();
                globalPlugins.push(plugin);
                break;
            }
        }
        return globalPlugins;
    }
    /**
     * Loads both project plugins and command plugins and returns respective classes
     */
    loadPlugins() {
        this.plugins.push(...this.collectCommandPlugins());
        if (this.project) {
            this.plugins.push(...this.project.collectPlugins());
        }
        return this.plugins;
    }
    /**
     * Returns an array of CLI plugin with the provided type.
     * @param type - Type of CLI plugin.
     */
    getPluginsWithType(type) {
        return this.plugins.filter((plugin) => plugin.type === type);
    }
    getPlatforms() {
        return this.getPluginsWithType('platform').map((el) => el.id);
    }
    /**
     * Resolves a given endpoint. If the endpoint is ${JOVO_WEBHOOK_URL},
     * it will get resolved to the actual user webhook url.
     * @param endpoint - The endpoint to resolve.
     */
    resolveEndpoint(endpoint) {
        if (endpoint === '${JOVO_WEBHOOK_URL}') {
            return this.getJovoWebhookUrl();
        }
        return endpoint;
    }
    /**
     * Returns the default Jovo Webhook URL.
     */
    getJovoWebhookUrl() {
        const { href } = new url_1.URL(this.userConfig.getWebhookUuid(), constants_1.JOVO_WEBHOOK_URL);
        return href;
    }
    /**
     * Checks, if given directory already exists.
     * @param directory - Directory name.
     */
    hasExistingProject(directory) {
        return fs_1.existsSync(path_1.join(process.cwd(), directory));
    }
}
exports.JovoCli = JovoCli;
//# sourceMappingURL=JovoCli.js.map