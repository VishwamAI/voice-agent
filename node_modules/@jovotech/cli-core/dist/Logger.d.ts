export declare enum LogLevel {
    None = 0,
    Info = 1,
    Warn = 2,
    Error = 3,
    Raw = 4,
    Debug = 5,
    Verbose = 6
}
export declare type Output = string | boolean | number | object;
export declare type LogOutput<OPTIONS extends LogOptions> = OPTIONS['dry'] extends true ? string : undefined;
export interface LogOptions {
    logLevel?: LogLevel;
    dry?: boolean;
    indent?: number;
    newLine?: boolean;
    prefix?: string;
}
export declare class Log {
    private static get level();
    /**
     * Parses the log level from string to the corresponding enum value
     */
    private static parseLogLevel;
    /**
     * Checks, if the provided level applies to the current log level
     * @param logLevel - Log level to check for
     */
    static isLogLevel(logLevel: LogLevel): boolean;
    /**
     * Checks if color output is currently supported or not.
     */
    static isRaw(): boolean;
    /**
     * Log a output to a provided stream output
     * TODO: Log to file.
     */
    private static log;
    /**
     * Prints out an empty line
     */
    static spacer(symbol?: string, repeat?: number, options?: LogOptions): string | undefined;
    static info<OPTIONS extends LogOptions>(output: Output, options?: OPTIONS): LogOutput<OPTIONS>;
    static warning<OPTIONS extends LogOptions>(output: Output, options?: OPTIONS): LogOutput<OPTIONS>;
    static error<OPTIONS extends LogOptions>(error: Error | Output, options?: OPTIONS): LogOutput<OPTIONS>;
    static debug<OPTIONS extends LogOptions>(output: Output, options?: OPTIONS): LogOutput<OPTIONS>;
    static verbose<OPTIONS extends LogOptions>(output: Output, options?: OPTIONS): LogOutput<OPTIONS>;
}
