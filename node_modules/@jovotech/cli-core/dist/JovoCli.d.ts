import { JovoCliPlugin } from './JovoCliPlugin';
import { Project } from './Project';
import { UserConfig } from './UserConfig';
import { PluginType } from './interfaces';
export declare class JovoCli {
    private static instance?;
    private plugins;
    readonly userConfig: UserConfig;
    projectPath: string;
    project?: Project;
    constructor();
    static getInstance(): JovoCli;
    isInV3ProjectDirectory(): boolean;
    /**
     * Checks whether current working directory is a Jovo project.
     */
    isInProjectDirectory(): boolean;
    collectCommandPlugins(): JovoCliPlugin[];
    /**
     * Loads both project plugins and command plugins and returns respective classes
     */
    loadPlugins(): JovoCliPlugin[];
    /**
     * Returns an array of CLI plugin with the provided type.
     * @param type - Type of CLI plugin.
     */
    getPluginsWithType(type: PluginType): JovoCliPlugin[];
    getPlatforms(): string[];
    /**
     * Resolves a given endpoint. If the endpoint is ${JOVO_WEBHOOK_URL},
     * it will get resolved to the actual user webhook url.
     * @param endpoint - The endpoint to resolve.
     */
    resolveEndpoint(endpoint: string): string;
    /**
     * Returns the default Jovo Webhook URL.
     */
    getJovoWebhookUrl(): string;
    /**
     * Checks, if given directory already exists.
     * @param directory - Directory name.
     */
    hasExistingProject(directory: string): boolean;
}
