import { Input } from '@oclif/command/lib/flags';
import * as Parser from '@oclif/parser';
import { SUPPORTED_LANGUAGES } from './constants';
import { PluginCommand } from './PluginCommand';
export declare type Events = string;
export declare type MiddlewareCollection<T extends Events = DefaultEvents> = {
    [K in T]?: Array<(...v: any[]) => void>;
};
export declare type DefaultEvents = 'install';
export declare type PluginType = 'platform' | 'target' | 'command' | '';
export interface Files {
    [key: string]: string | Files | unknown[] | boolean;
}
export interface LocaleMap {
    [locale: string]: string[];
}
export interface PluginConfig {
    files?: Files;
    locales?: LocaleMap;
}
export interface ConfigHooks {
    [key: string]: ((context: PluginContext) => any)[];
}
export interface Context {
    command: string;
}
export interface InstallContext extends Context {
    flags: Input<any>;
    args: Parser.args.Input;
}
export interface PluginContext extends Context {
}
export declare type SupportedLanguages = typeof SUPPORTED_LANGUAGES[number];
export interface MarketplacePlugin {
    name: string;
    module: string;
    cliModule?: string;
    package: string;
    description: string;
    tags: string | string[];
}
export interface ProjectProperties {
    projectName: string;
    platforms: MarketplacePlugin[];
    locales: string[];
    language: SupportedLanguages;
}
export interface Preset extends ProjectProperties {
    name: string;
}
export declare type Dependencies = Record<string, string | {
    version: string;
    dev?: boolean;
}>;
export interface PackageFile {
    dependencies?: Dependencies;
    devDependencies?: Dependencies;
}
export interface Package {
    name: string;
    version: {
        local: string;
        npm?: string;
    };
    isDev?: boolean;
}
export declare type CliFlags<COMMAND extends typeof PluginCommand> = COMMAND extends Parser.Input<infer T> ? Parser.Output<T, any>['flags'] : never;
export declare type CliArgs<COMMAND extends typeof PluginCommand> = Record<COMMAND['args'][number]['name'], COMMAND['args'][number]['multiple'] extends true ? string[] : string>;
export interface ExecResponse {
    stderr?: string;
    stdout?: string;
}
