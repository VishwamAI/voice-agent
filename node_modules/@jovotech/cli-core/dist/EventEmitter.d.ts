import { Events } from './interfaces';
export declare type EventListener = (...v: any[]) => void;
export declare class EventEmitter<T extends Events = Events> {
    private events;
    listeners<K extends T>(event: K): Function[];
    addListener<K extends T>(event: K, listener: EventListener): this;
    on<K extends T>(event: K, listener: EventListener): this;
    removeListener<K extends T>(event: K, listener: EventListener): this;
    off<K extends T>(event: K, listener: EventListener): this;
    /**
     * Calls each listener registered for event, in order of registration and synchronously.
     * @param event - The event.
     * @param args - Possible arguments that get passed to all listener functions.
     */
    run<K extends T>(event: K, ...args: unknown[]): Promise<boolean>;
}
