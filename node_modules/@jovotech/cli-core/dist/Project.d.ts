import { JovoModelData, JovoModelDataV3 } from '@jovotech/model';
import tv4 from 'tv4';
import { ProjectConfig } from './ProjectConfig';
import { JovoCliPlugin } from './JovoCliPlugin';
export declare class Project {
    private static instance?;
    private projectPath;
    readonly config: ProjectConfig;
    readonly stage?: string;
    constructor(projectPath: string);
    /**
     * Returns singleton project instance.
     * @param projectPath - Current project path.
     */
    static getInstance(projectPath: string): Project;
    /**
     * Returns directory name for build folder
     */
    getBuildDirectory(): string;
    /**
     * Returns path to build folder
     */
    getBuildPath(): string;
    /**
     * Returns directory name for models folder.
     */
    getModelsDirectory(): string;
    /**
     * Returns path to Jovo model files.
     */
    getModelsPath(): string;
    /**
     * Returns the path for a specific Jovo model.
     * @param locale - The locale under which the Jvoo model is stored.
     */
    getModelPath(locale: string): string;
    /**
     * Requires and returns Jovo model for the provided locale.
     * @param locale - Locale under which the Jovo model is stored.
     */
    getModel(locale: string): Promise<JovoModelData | JovoModelDataV3>;
    /**
     * Checks if model files for given locales exist
     * @param locales - Locales for which to check
     */
    hasModelFiles(locales?: string[]): boolean;
    validateModel(locale: string, model: JovoModelData | JovoModelDataV3, validator: tv4.JsonSchema, plugin?: string): Promise<void>;
    /**
     * Backs up model file.
     * @param locale - Locale of the model file.
     */
    backupModel(locale: string): void;
    /**
     * Saves model to file.
     * @param model - Model to save.
     * @param locale - Locale to save the model under.
     */
    saveModel(model: JovoModelData | JovoModelDataV3, locale: string): void;
    /**
     * Returns project locales from Jovo models folder.
     */
    getLocales(): string[];
    /**
     * Returns project name extracted from project path.
     */
    getProjectName(): string;
    /**
     * Returns true, if project has a platform folder in build path.
     * @param platformDir - The platform to look up inside the build folder.
     */
    hasPlatform(platformDir: string): boolean;
    /**
     * Checks if the project is a typescript project.
     */
    isTypeScriptProject(): boolean;
    collectPlugins(): JovoCliPlugin[];
}
