"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JovoCliError = void 0;
const chalk_1 = __importDefault(require("chalk"));
const constants_1 = require("./constants");
const Logger_1 = require("./Logger");
class JovoCliError extends Error {
    constructor(properties) {
        super(properties.message);
        this.properties = properties;
    }
    static addProperty(key, value, logLevel = Logger_1.LogLevel.Error) {
        Logger_1.Log.info(`${chalk_1.default.bold(key)}:`, { prefix: constants_1.ERROR_PREFIX, logLevel });
        Logger_1.Log.info(value, {
            indent: 1,
            prefix: constants_1.ERROR_PREFIX,
            logLevel,
        });
        Logger_1.Log.spacer(' ', 80, { prefix: constants_1.ERROR_PREFIX, logLevel: Logger_1.LogLevel.Error });
    }
    static print(error) {
        Logger_1.Log.spacer();
        Logger_1.Log.error(`Error: ${'-'.repeat(80)}`);
        Logger_1.Log.spacer(' ', 80, { prefix: constants_1.ERROR_PREFIX, logLevel: Logger_1.LogLevel.Error });
        this.addProperty('Message', error.properties.message);
        this.addProperty('Module', error.properties.module || 'JovoCliCore');
        if (error.properties.details) {
            this.addProperty('Details', error.properties.details);
        }
        if (error.properties.hint) {
            this.addProperty('Hint', error.properties.hint);
        }
        if (error.properties.learnMore) {
            this.addProperty('Learn more', error.properties.learnMore);
        }
        if (error.stack) {
            Logger_1.Log.info(`${constants_1.ERROR_PREFIX}`, { logLevel: Logger_1.LogLevel.Debug });
            this.addProperty('Stack', error.stack, Logger_1.LogLevel.Debug);
        }
        Logger_1.Log.info(chalk_1.default.grey('If you think this is not on you, you can submit an issue here: https://github.com/jovotech/jovo-cli/issues.'), { prefix: constants_1.ERROR_PREFIX, logLevel: Logger_1.LogLevel.Error });
        Logger_1.Log.spacer();
    }
}
exports.JovoCliError = JovoCliError;
//# sourceMappingURL=JovoCliError.js.map