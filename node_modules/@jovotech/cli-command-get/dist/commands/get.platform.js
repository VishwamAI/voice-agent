"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var GetPlatform_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetPlatform = void 0;
const cli_core_1 = require("@jovotech/cli-core");
const fs_1 = require("fs");
const lodash_merge_1 = __importDefault(require("lodash.merge"));
let GetPlatform = GetPlatform_1 = class GetPlatform extends cli_core_1.PluginCommand {
    static install(cli, plugin, emitter) {
        // Override PluginCommand.install() to fill options for --platform.
        this.availablePlatforms.push(...cli.getPlatforms());
        super.install(cli, plugin, emitter);
    }
    install() {
        this.middlewareCollection = {
            'before.get:platform': [this.beforeGet.bind(this)],
        };
    }
    beforeGet() {
        // Create build/ folder depending on user config.
        const buildPath = this.$cli.project.getBuildPath();
        if (!fs_1.existsSync(buildPath)) {
            fs_1.mkdirSync(buildPath);
        }
    }
    async run() {
        cli_core_1.Log.spacer();
        cli_core_1.Log.info(`jovo get: ${GetPlatform_1.description}`);
        cli_core_1.Log.info(cli_core_1.printSubHeadline('Learn more: https://jovo.tech/docs/get-command'));
        cli_core_1.Log.spacer();
        const { args, flags } = this.parse(GetPlatform_1);
        lodash_merge_1.default(this.$context, {
            args,
            flags,
            platforms: args.platform.length ? args.platform : this.$cli.getPlatforms(),
            locales: flags.locale || this.$cli.project.getLocales(),
            clean: flags.clean,
        });
        await this.$emitter.run('before.get:platform');
        await this.$emitter.run('get:platform');
        await this.$emitter.run('after.get:platform');
        if (flags['build-reverse']) {
            await this.$emitter.run('build:platform.reverse');
        }
        cli_core_1.Log.spacer();
        cli_core_1.Log.info(`${cli_core_1.TADA} Successfully got your platform project!`);
        cli_core_1.Log.spacer();
    }
};
GetPlatform.id = 'get:platform';
GetPlatform.description = 'Synchronize your local build files with platform developer consoles';
GetPlatform.examples = ['jovo get:platform alexa'];
GetPlatform.availablePlatforms = [];
GetPlatform.flags = Object.assign({ 'locale': cli_core_1.flags.string({
        char: 'l',
        description: 'The locales to be retrieved',
        multiple: true,
    }), 'build-reverse': cli_core_1.flags.boolean({
        description: 'Turn retrieved models into Jovo Models',
    }), 'clean': cli_core_1.flags.boolean({
        description: 'Overwrite existing files in the build folder',
    }) }, cli_core_1.PluginCommand.flags);
GetPlatform.args = [
    {
        name: 'platform',
        description: 'Platform to get files from',
        multiple: true,
        options: GetPlatform_1.availablePlatforms,
    },
];
// Allow multiple arguments by disabling argument length validation
GetPlatform.strict = false;
GetPlatform = GetPlatform_1 = __decorate([
    cli_core_1.ProjectCommand()
], GetPlatform);
exports.GetPlatform = GetPlatform;
//# sourceMappingURL=get.platform.js.map