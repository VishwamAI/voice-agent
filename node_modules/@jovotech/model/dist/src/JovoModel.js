"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JovoModel = void 0;
const _1 = require(".");
class JovoModel {
    constructor(data, locale) {
        this.data = data;
        this.locale = locale;
    }
    exportJovoModel() {
        return this.data;
    }
    exportNative() {
        if (this.data === undefined || this.locale === undefined) {
            return undefined;
        }
        return this.constructor.fromJovoModel(this.data, this.locale);
    }
    importNative(inputFiles, locale) {
        this.data = this.constructor.toJovoModel(inputFiles, locale);
        this.locale = locale;
    }
    importJovoModel(data, locale) {
        this.data = data;
        this.locale = locale;
    }
    addIntent(intent, intentData) {
        if (this.data) {
            _1.JovoModelHelper.addIntent(this.data, intent, intentData);
        }
        return this;
    }
    getIntents() {
        return this.data ? _1.JovoModelHelper.getIntents(this.data) : {};
    }
    removeIntent(intent) {
        if (this.data) {
            _1.JovoModelHelper.removeIntent(this.data, intent);
        }
        return this;
    }
    updateIntent(intent, intentData) {
        if (this.data) {
            _1.JovoModelHelper.updateIntent(this.data, intent, intentData);
        }
        return this;
    }
    getIntentByName(name) {
        return this.data ? _1.JovoModelHelper.getIntentByName(this.data, name) : undefined;
    }
    getPhrases(intent) {
        return this.data ? _1.JovoModelHelper.getPhrases(this.data, intent) : [];
    }
    addPhrase(intent, phrase) {
        if (this.data) {
            _1.JovoModelHelper.addPhrase(this.data, intent, phrase);
        }
        return this;
    }
    removePhrase(intent, phrase) {
        if (this.data) {
            _1.JovoModelHelper.removePhrase(this.data, intent, phrase);
        }
        return this;
    }
    updatePhrase(intent, oldPhrase, newPhrase) {
        if (this.data) {
            _1.JovoModelHelper.updatePhrase(this.data, intent, oldPhrase, newPhrase);
        }
        return this;
    }
    getPhraseIndex(intent, phrase) {
        return this.data ? _1.JovoModelHelper.getPhraseIndex(this.data, intent, phrase) : -1;
    }
    hasPhrase(phrase) {
        return this.data ? _1.JovoModelHelper.hasPhrase(this.data, phrase) : false;
    }
    hasEntities(intent) {
        return this.data ? _1.JovoModelHelper.hasEntities(this.data, intent) : false;
    }
    getEntities(intent) {
        return this.data ? _1.JovoModelHelper.getEntities(this.data, intent) : {};
    }
    addEntity(intent, entity, entityData, checkForDuplicates = true) {
        if (this.data) {
            _1.JovoModelHelper.addEntity(this.data, intent, entity, entityData, checkForDuplicates);
        }
        return this;
    }
    removeEntity(intent, entity) {
        if (this.data) {
            _1.JovoModelHelper.removeEntity(this.data, intent, entity);
        }
        return this;
    }
    addEntityType(entityType, entityTypeData) {
        if (this.data) {
            _1.JovoModelHelper.addEntityType(this.data, entityType, entityTypeData);
        }
        return this;
    }
    removeEntityType(entityType) {
        if (this.data) {
            _1.JovoModelHelper.removeEntityType(this.data, entityType);
        }
        return this;
    }
    updateEntityType(entityType, entityTypeData) {
        if (this.data) {
            _1.JovoModelHelper.updateEntityType(this.data, entityType, entityTypeData);
        }
        return this;
    }
    getEntityTypeByName(entityType) {
        return this.data ? _1.JovoModelHelper.getEntityTypeByName(this.data, entityType) : undefined;
    }
    getEntityTypeValues(entityType) {
        return this.data ? _1.JovoModelHelper.getEntityTypeValues(this.data, entityType) : [];
    }
    addEntityTypeValue(entityType, entityTypeValue, checkForDuplicates = true) {
        if (this.data) {
            _1.JovoModelHelper.addEntityTypeValue(this.data, entityType, entityTypeValue, checkForDuplicates);
        }
        return this;
    }
    removeEntityTypeValue(entityType, entityTypeValue) {
        if (this.data) {
            _1.JovoModelHelper.removeEntityTypeValue(this.data, entityType, entityTypeValue);
        }
        return this;
    }
    getEntityTypeValueIndex(entityType, entityTypeValue) {
        return this.data
            ? _1.JovoModelHelper.getEntityTypeValueIndex(this.data, entityType, entityTypeValue)
            : -1;
    }
    static toJovoModel(inputFiles, locale) {
        throw new Error(`Method "toJovoModel" is not implemented for model "${this.constructor.MODEL_KEY}"!`);
    }
    static fromJovoModel(model, locale) {
        throw new Error(`Method "fromJovoModel" is not implemented for model "${this.constructor.MODEL_KEY}"!`);
    }
    static getValidator(model) {
        if (_1.JovoModelHelper.isJovoModelV3(model)) {
            return _1.JovoModelValidatorV3;
        }
        else {
            return _1.JovoModelValidator;
        }
    }
}
exports.JovoModel = JovoModel;
JovoModel.MODEL_KEY = '';
//# sourceMappingURL=JovoModel.js.map