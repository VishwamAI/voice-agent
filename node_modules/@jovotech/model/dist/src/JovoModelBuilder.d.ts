import { EntityType, EntityTypeValue, InputType, Intent, IntentEntity, IntentInput, IntentV3, JovoModelData, JovoModelDataV3 } from './Interfaces';
import { JovoModelHelper, ModelEntityType, ModelEntityTypeValue } from './JovoModelHelper';
type JovoModelHelperKeys = keyof typeof JovoModelHelper;
type Keys = Exclude<JovoModelHelperKeys, 'prototype' | 'new'>;
type RemoveFirstFromTuple<T extends any[]> = T['length'] extends 0 ? [] : ((...b: T) => any) extends (a: T[0], ...b: infer I) => any ? I : [];
export type JovoModelBuilderType = {
    [key in Keys]: (...args: RemoveFirstFromTuple<Parameters<typeof JovoModelHelper[key]>>) => ReturnType<typeof JovoModelHelper[key]> extends undefined | JovoModelData ? JovoModelBuilderInterface : ReturnType<typeof JovoModelHelper[key]>;
};
export interface JovoModelBuilderInterface extends JovoModelBuilderType {
    build(): JovoModelData;
}
export declare class JovoModelBuilder implements JovoModelBuilderInterface {
    private $timestamp;
    private static $initialized;
    addEntity: (intent: string, entity: string, entityData?: IntentEntity, checkForDuplicates?: boolean) => JovoModelBuilder;
    addEntityType: (entityType: string) => JovoModelBuilder;
    addEntityTypeValue: (entityType: string, entityTypeValue: ModelEntityTypeValue, checkForDuplicates?: boolean) => JovoModelBuilder;
    addIntent: (intent: string, intentData?: Intent) => JovoModelBuilder;
    hasIntents: () => boolean;
    getIntents: () => Record<string, Intent | IntentV3>;
    addPhrase: (intent: string, phrase: string) => JovoModelBuilder;
    getEntityTypeByName: (entityType: string) => EntityType | undefined;
    getEntityTypeValueIndex: (entityType: string, entityTypeValue: string) => number;
    getEntityTypeValues: (inputType: ModelEntityType) => EntityTypeValue[];
    hasEntities: (intent: string) => boolean;
    getEntityByName: (intent: string, entity: string) => IntentEntity | IntentInput | undefined;
    getEntities: (intent: string) => Record<string, IntentEntity>;
    getIntentByName: (intent: string) => Intent | undefined;
    getPhraseIndex: (intent: string, phrase: string) => number;
    getPhrases: (intent: string) => string[];
    hasPhrase: (phrase: string) => boolean;
    prepareModel: () => JovoModelData | JovoModelDataV3;
    removeEntity: (intent: string, entity: string) => JovoModelBuilder;
    removeEntityType: (entityType: string) => JovoModelBuilder;
    removeEntityTypeValue: (entityType: string, entityTypeValue: string) => JovoModelBuilder;
    removeIntent: (intent: string) => JovoModelBuilder;
    removePhrase: (intent: string, phrase: string) => JovoModelBuilder;
    hasEntityTypes: () => boolean;
    getEntityTypes: () => Record<string, EntityType | InputType>;
    updateEntityType: (entityType: string, entityTypeData: EntityType | InputType) => JovoModelBuilder;
    updateIntent: (intent: string, intentData: Intent) => JovoModelBuilder;
    updateEntity: (intent: string, entity: string, entityData: IntentEntity) => JovoModelBuilder;
    updateEntityTypeValue: (entityType: string, entityTypeValue: string, entityTypeValueData: EntityTypeValue) => JovoModelBuilder;
    updatePhrase: (intent: string, oldPhrase: string, newPhrase: string) => JovoModelBuilder;
    addEntityTypeValueSynonym: (entityType: string, entityTypeValue: string, synonym: string, checkForDuplicates?: boolean) => JovoModelBuilder;
    removeEntityTypeValueSynonym: (entityType: string, entityTypeValue: string, synonym: string) => JovoModelBuilder;
    updateEntityTypeValueSynonym: (entityType: string, entityTypeValue: string, oldSynonym: string, newSynonym: string) => JovoModelBuilder;
    getIntentIndex: (intentName: string) => number;
    getInputIndex: (intent: string, input: string) => number;
    getInputTypeIndex: (inputType: string) => number;
    getInputTypeByName: (inputType: string) => InputType | undefined;
    getInputTypeValueIndex: (inputType: string, inputTypeValue: string) => number;
    isJovoModelV3: () => boolean;
    isIntentV3: () => boolean;
    private readonly $model;
    constructor(model?: JovoModelData, $timestamp?: number);
    build(): JovoModelData;
    private prepareBuilder;
    private loadFunctions;
}
export {};
