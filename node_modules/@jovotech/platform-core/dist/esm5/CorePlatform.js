var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { Platform, registerPlatformSpecificJovoReference, } from '@jovotech/framework';
import { Core } from './Core';
import { CoreDevice } from './CoreDevice';
import { CoreRequest } from './CoreRequest';
import { CoreRequestBuilder } from './CoreRequestBuilder';
import { CoreUser } from './CoreUser';
import { CoreOutputTemplateConverterStrategy } from './output';
var CorePlatform = /** @class */ (function (_super) {
    __extends(CorePlatform, _super);
    function CorePlatform() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.id = 'core';
        _this.outputTemplateConverterStrategy = new CoreOutputTemplateConverterStrategy();
        _this.requestClass = CoreRequest;
        _this.jovoClass = Core;
        _this.userClass = CoreUser;
        _this.deviceClass = CoreDevice;
        _this.requestBuilder = CoreRequestBuilder;
        return _this;
    }
    /**
     Returns a new platform-class with the given name that extends CorePlatform.
  
     In order to make the type-system aware of the new class, some module augmentations have to be done.
     For a reference, take a look at the example below.
  
     Example:
  
     declare module '@jovotech/framework/dist/types/Extensible' {
       interface ExtensiblePluginConfig {
         WebPlatform?: CorePlatformConfig<'web'>;
       }
  
       interface ExtensiblePlugins {
         WebPlatform?: CorePlatform<'web'>;
       }
     }
  
     declare module '@jovotech/framework/dist/types/Jovo' {
       interface Jovo {
         $web?: Core;
       }
     }
  
     declare module '@jovotech/framework/dist/types/index' {
        interface NormalizedOutputTemplatePlatforms {
          web?: NormalizedCoreOutputTemplate;
        }
     }
  
     // create the class
     const WebPlatform = CorePlatform.createCustomPlatform('WebPlatform', 'web');
     // instantiate the class
     const webPlatform = new WebPlatform();
     */
    CorePlatform.createCustomPlatform = function (className, platform, jovoReferenceKey) {
        var _a;
        if (jovoReferenceKey === void 0) { jovoReferenceKey = "$" + platform; }
        // Workaround to make the anonymous' class name equal to className
        var obj = (_a = {},
            _a[className] = /** @class */ (function (_super) {
                __extends(class_1, _super);
                function class_1(config) {
                    var _this = _super.call(this, config) || this;
                    _this.outputTemplateConverterStrategy.platformName = platform;
                    return _this;
                }
                class_1.prototype.getDefaultConfig = function () {
                    return __assign(__assign({}, _super.prototype.getDefaultConfig.call(this)), { platform: platform });
                };
                Object.defineProperty(class_1.prototype, "name", {
                    get: function () {
                        return className;
                    },
                    enumerable: false,
                    configurable: true
                });
                return class_1;
            }(CorePlatform)),
            _a);
        // Make the Core-instance that is related to this new class available to Jovo
        registerPlatformSpecificJovoReference(jovoReferenceKey, Core);
        return obj[className];
    };
    CorePlatform.prototype.getDefaultConfig = function () {
        return {
            platform: 'core',
        };
    };
    CorePlatform.prototype.isRequestRelated = function (request) {
        var _a;
        return (request.version &&
            request.timestamp &&
            ((_a = request.input) === null || _a === void 0 ? void 0 : _a.type) &&
            request.platform === this.config.platform);
    };
    CorePlatform.prototype.isResponseRelated = function (response) {
        return (response.version &&
            response.output &&
            response.context &&
            response.context.user &&
            response.context.session &&
            response.platform === this.config.platform);
    };
    CorePlatform.prototype.finalizeResponse = function (response, corePlatformApp) {
        response.platform = this.config.platform;
        response.context.session = __assign(__assign({}, response.context.session), { id: corePlatformApp.$session.id, data: corePlatformApp.$session.data, state: corePlatformApp.$session.state });
        return response;
    };
    return CorePlatform;
}(Platform));
export { CorePlatform };
//# sourceMappingURL=CorePlatform.js.map