var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { IsArray, IsNotEmpty, IsString, JovoResponse, NormalizedOutputTemplate, Type, ValidateNested, } from '@jovotech/output';
import { CoreResponseContext } from '.';
var CoreResponse = /** @class */ (function (_super) {
    __extends(CoreResponse, _super);
    function CoreResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CoreResponse.prototype.hasSessionEnded = function () {
        return this.context.session.end;
    };
    CoreResponse.prototype.getSpeech = function () {
        var speech = [];
        this.output.forEach(function (output) {
            if (output.message) {
                // The message property can either be a string or an object with a speech property.
                if (typeof output.message === 'object' && output.message.speech) {
                    speech.push(output.message.speech);
                }
                if (typeof output.message === 'string') {
                    speech.push(output.message);
                }
            }
        });
        if (speech.length === 1) {
            return speech[0];
        }
        if (speech.length === 0) {
            return undefined;
        }
        return speech;
    };
    CoreResponse.prototype.getReprompt = function () {
        var reprompts = [];
        this.output.forEach(function (output) {
            if (output.reprompt) {
                // The reprompt property can either be a string or an object with a speech property.
                if (typeof output.reprompt === 'object' && output.reprompt.speech) {
                    reprompts.push(output.reprompt.speech);
                }
                if (typeof output.reprompt === 'string') {
                    reprompts.push(output.reprompt);
                }
            }
        });
        if (reprompts.length === 1) {
            return reprompts[0];
        }
        if (reprompts.length === 0) {
            return undefined;
        }
        return reprompts;
    };
    CoreResponse.prototype.replaceSpeech = function (speech) {
        var speechArray = Array.isArray(speech) ? speech : [speech];
        for (var speechIndex = 0; speechIndex < speechArray.length; speechIndex++) {
            for (var outputIndex = speechIndex; outputIndex < this.output.length; outputIndex++) {
                if (this.output[outputIndex].message) {
                    if (typeof this.output[outputIndex].message === 'string') {
                        this.output[outputIndex].message = speechArray[speechIndex];
                        break; // continue with the next speech item (outer loop)
                    }
                    if (typeof this.output[outputIndex].message === 'object') {
                        // TODO: Clean this up
                        this.output[outputIndex].message.speech = speechArray[speechIndex];
                        break; // continue with the next speech item (outer loop)
                    }
                }
            }
        }
    };
    CoreResponse.prototype.replaceReprompt = function (reprompt) {
        var repromptArray = Array.isArray(reprompt) ? reprompt : [reprompt];
        for (var repromptIndex = 0; repromptIndex < repromptArray.length; repromptIndex++) {
            for (var outputIndex = repromptIndex; outputIndex < this.output.length; outputIndex++) {
                if (this.output[outputIndex].reprompt) {
                    if (typeof this.output[outputIndex].reprompt === 'string') {
                        this.output[outputIndex].reprompt = repromptArray[repromptIndex];
                        break; // continue with the next reprompt item (outer loop)
                    }
                    if (typeof this.output[outputIndex].reprompt === 'object') {
                        // TODO: Clean this up
                        this.output[outputIndex].reprompt.speech =
                            repromptArray[repromptIndex];
                        break; // continue with the next reprompt item (outer loop)
                    }
                }
            }
        }
    };
    __decorate([
        IsString(),
        IsNotEmpty(),
        __metadata("design:type", String)
    ], CoreResponse.prototype, "version", void 0);
    __decorate([
        IsString(),
        IsNotEmpty(),
        __metadata("design:type", String)
    ], CoreResponse.prototype, "platform", void 0);
    __decorate([
        IsArray(),
        ValidateNested({ each: true }),
        Type(function () { return NormalizedOutputTemplate; }),
        __metadata("design:type", Array)
    ], CoreResponse.prototype, "output", void 0);
    __decorate([
        ValidateNested(),
        Type(function () { return CoreResponseContext; }),
        __metadata("design:type", CoreResponseContext)
    ], CoreResponse.prototype, "context", void 0);
    return CoreResponse;
}(JovoResponse));
export { CoreResponse };
//# sourceMappingURL=CoreResponse.js.map