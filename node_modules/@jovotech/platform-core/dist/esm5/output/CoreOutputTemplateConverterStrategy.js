var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { mergeInstances, mergeListen, OutputTemplateConverterStrategy, } from '@jovotech/output';
import { CoreResponse } from '../CoreResponse';
var CoreOutputTemplateConverterStrategy = /** @class */ (function (_super) {
    __extends(CoreOutputTemplateConverterStrategy, _super);
    function CoreOutputTemplateConverterStrategy() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.responseClass = CoreResponse;
        _this.platformName = 'core';
        return _this;
    }
    CoreOutputTemplateConverterStrategy.prototype.toResponse = function (output) {
        output = Array.isArray(output) ? output : [output];
        var response = this.normalizeResponse({
            version: '4.0.0',
            platform: 'core',
            output: output,
            context: {
                request: {},
                session: {
                    end: false,
                    data: {},
                },
                user: {
                    data: {},
                },
            },
        });
        var mergedListen;
        output.forEach(function (outputItem) {
            var _a, _b;
            mergedListen = mergeListen(mergedListen, outputItem.listen);
            if ((_b = (_a = outputItem.platforms) === null || _a === void 0 ? void 0 : _a.core) === null || _b === void 0 ? void 0 : _b.nativeResponse) {
                mergeInstances(response, outputItem.platforms.core.nativeResponse);
            }
        });
        response.context.session.end = !(mergedListen !== null && mergedListen !== void 0 ? mergedListen : true);
        return response;
    };
    CoreOutputTemplateConverterStrategy.prototype.fromResponse = function (response) {
        return response.output;
    };
    return CoreOutputTemplateConverterStrategy;
}(OutputTemplateConverterStrategy));
export { CoreOutputTemplateConverterStrategy };
//# sourceMappingURL=CoreOutputTemplateConverterStrategy.js.map