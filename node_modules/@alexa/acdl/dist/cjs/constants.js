"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationErrorMessages = exports.APLFileTypes = exports.APLAFileTypes = exports.APLFileType = exports.Constants = void 0;
const ast_1 = require("./ast");
var Constants;
(function (Constants) {
    Constants.DEFAULT_CONFIG_FILE_NAME = "ask.json";
    Constants.RESERVED_PREFIXES = [
        "AMAZON",
        // TODO: add schema and conversations back to this list once we figure out how to give exception to @alexa/schema
        // issue link: https://github.com/alexa/ask-ac/issues/92
        // 'com.amazon.alexa.schema',
        // 'com.amazon.alexa.ask.conversations',
        "slotTypes",
        "prompts",
    ];
    Constants.BINARY_OPERATOR_ACTIONS_SET = new Set([
        ast_1.AlexaConversations.And,
        ast_1.AlexaConversations.Eq,
        ast_1.AlexaConversations.Gt,
        ast_1.AlexaConversations.Gte,
        ast_1.AlexaConversations.in,
        ast_1.AlexaConversations.Lt,
        ast_1.AlexaConversations.Lte,
        ast_1.AlexaConversations.Neq,
        ast_1.AlexaConversations.Or,
    ]);
    Constants.OPERATOR_ACTIONS_SET = new Set([
        // Logical operations
        ast_1.AlexaConversations.And,
        ast_1.AlexaConversations.Eq,
        ast_1.AlexaConversations.Gt,
        ast_1.AlexaConversations.Gte,
        ast_1.AlexaConversations.in,
        ast_1.AlexaConversations.Lt,
        ast_1.AlexaConversations.Lte,
        ast_1.AlexaConversations.Neq,
        ast_1.AlexaConversations.Or,
        ast_1.AlexaConversations.in,
        ast_1.AlexaConversations.is,
        ast_1.AlexaConversations.isInCatalog,
        ast_1.AlexaConversations.Not,
    ]);
    Constants.FILE_ACCESS_ACTIONS_SET = new Set([
        // Logical operations
        ast_1.AlexaConversations.apl,
        ast_1.AlexaConversations.apla,
    ]);
    /**
     * Name of the Skill Manifest at the root of a Skill Package.
     */
    Constants.SkillManifestFileName = "skill.json";
    /**
     * Name of the Skill Package Folder.
     */
    Constants.SkillPackageFolderName = "skill-package";
    /**
     * Name of the folder at the root of a Skill Package containing the Interaction Models.
     */
    Constants.InteractionsModelFolderName = "interactionModels";
    /**
     * Name of the folder under ${InteractionsModelFolderName} containing the custom Interaction Model JSON Files.
     */
    Constants.CustomFolderName = "custom";
    /**
     * Name of the folder inside the ${InteractionModelFolderName} containing the Alexa Conversations ASKIR files.
     */
    Constants.ConversationsFolderName = "conversations";
    /**
     * Name of the folder containing Responses.
     */
    Constants.ResponseFolderName = "response";
    /**
     * Name of the folder containing APL display responses.
     */
    Constants.DisplayFolderName = "display";
    /**
     * Name of the folder containing APLA prompt responses.
     */
    Constants.PromptsFolderName = "prompts";
    /**
     * Name of the folder containing Prompts.
     */
    Constants.AssetsFolderName = "assets";
    /**
     * Name of the folder containing Data Store Packages.
     */
    Constants.DataStorePackagesFolderName = "_dataStorePackages";
    /**
     * Name of the folder containing Prompts.
     */
    Constants.TasksFolderName = "tasks";
    /**
     * Name of the folder containing the In Skill Product files.
     */
    Constants.InSkillPurchaseFolderName = "isps";
    /**
     * File Extension for ACDL Files.
     */
    Constants.ACDLExtension = "acdl";
    /**
     * File Extension for ASKIR JSON Files.
     */
    Constants.ASKIRJsonExtension = "json";
    /**
     * Name of the NPM Package containing Alexa Schema.
     */
    Constants.AlexaSchemaPackageName = "@alexa/schema";
    /**
     * Name of the NPM Package containing Alexa Conversations Core Library.
     */
    Constants.ACCorePackageName = "@alexa/ac-core";
    /**
     * Name of the folder containing ASKIR Dependencies.
     */
    Constants.DependenciesFolderName = "_dependencies";
    /**
     * Name of the folder containing Compiled ASKIR Files in a `_dependencies` folder.
     */
    Constants.CompiledOutputFoldername = "compiled-output";
    /**
     * Name of the file for APLA and APL
     */
    Constants.APLADocumentFileName = "document.json";
    /**
     * The maximum size of IR is 4mb
     */
    Constants.MaximumFileSize = 4 * 1024 * 1024;
})(Constants = exports.Constants || (exports.Constants = {}));
/**
 * Enum of the allowed `type` field in an APL/A file.
 *
 * Both `APL-A` and `APLA` are allowed for APL-A files.
 *
 * Only `APL` is allowed for APL files.
 */
var APLFileType;
(function (APLFileType) {
    APLFileType["APLA"] = "APLA";
    APLFileType["APL_A"] = "APL-A";
    APLFileType["APL"] = "APL";
})(APLFileType = exports.APLFileType || (exports.APLFileType = {}));
exports.APLAFileTypes = [APLFileType.APLA, APLFileType.APL_A];
exports.APLFileTypes = [APLFileType.APL];
/**
 * Contains reusable error messages used for validations.
 */
var ValidationErrorMessages;
(function (ValidationErrorMessages) {
    ValidationErrorMessages["MustBeBackedByCatalog"] = "must be backed by a catalog - choose a type from slotTypes.* or com.amazon.ask.types.builtins.AMAZON.*.";
})(ValidationErrorMessages = exports.ValidationErrorMessages || (exports.ValidationErrorMessages = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQkFBeUM7QUFFekMsSUFBaUIsU0FBUyxDQWlJekI7QUFqSUQsV0FBaUIsU0FBUztJQUNYLGtDQUF3QixHQUFHLFVBQVUsQ0FBQztJQUN0QywyQkFBaUIsR0FBRztRQUMvQixRQUFRO1FBQ1IsaUhBQWlIO1FBQ2pILHdEQUF3RDtRQUN4RCw2QkFBNkI7UUFDN0Isd0NBQXdDO1FBQ3hDLFdBQVc7UUFDWCxTQUFTO0tBQ1YsQ0FBQztJQUVXLHFDQUEyQixHQUFnQixJQUFJLEdBQUcsQ0FBQztRQUM5RCx3QkFBa0IsQ0FBQyxHQUFHO1FBQ3RCLHdCQUFrQixDQUFDLEVBQUU7UUFDckIsd0JBQWtCLENBQUMsRUFBRTtRQUNyQix3QkFBa0IsQ0FBQyxHQUFHO1FBQ3RCLHdCQUFrQixDQUFDLEVBQUU7UUFDckIsd0JBQWtCLENBQUMsRUFBRTtRQUNyQix3QkFBa0IsQ0FBQyxHQUFHO1FBQ3RCLHdCQUFrQixDQUFDLEdBQUc7UUFDdEIsd0JBQWtCLENBQUMsRUFBRTtLQUN0QixDQUFDLENBQUM7SUFFVSw4QkFBb0IsR0FBZ0IsSUFBSSxHQUFHLENBQUM7UUFDdkQscUJBQXFCO1FBQ3JCLHdCQUFrQixDQUFDLEdBQUc7UUFDdEIsd0JBQWtCLENBQUMsRUFBRTtRQUNyQix3QkFBa0IsQ0FBQyxFQUFFO1FBQ3JCLHdCQUFrQixDQUFDLEdBQUc7UUFDdEIsd0JBQWtCLENBQUMsRUFBRTtRQUNyQix3QkFBa0IsQ0FBQyxFQUFFO1FBQ3JCLHdCQUFrQixDQUFDLEdBQUc7UUFDdEIsd0JBQWtCLENBQUMsR0FBRztRQUN0Qix3QkFBa0IsQ0FBQyxFQUFFO1FBQ3JCLHdCQUFrQixDQUFDLEVBQUU7UUFDckIsd0JBQWtCLENBQUMsRUFBRTtRQUNyQix3QkFBa0IsQ0FBQyxXQUFXO1FBQzlCLHdCQUFrQixDQUFDLEdBQUc7S0FDdkIsQ0FBQyxDQUFDO0lBRVUsaUNBQXVCLEdBQWdCLElBQUksR0FBRyxDQUFDO1FBQzFELHFCQUFxQjtRQUNyQix3QkFBa0IsQ0FBQyxHQUFHO1FBQ3RCLHdCQUFrQixDQUFDLElBQUk7S0FDeEIsQ0FBQyxDQUFDO0lBRUg7O09BRUc7SUFDVSwrQkFBcUIsR0FBRyxZQUFZLENBQUM7SUFDbEQ7O09BRUc7SUFDVSxnQ0FBc0IsR0FBRyxlQUFlLENBQUM7SUFDdEQ7O09BRUc7SUFDVSxxQ0FBMkIsR0FBRyxtQkFBbUIsQ0FBQztJQUMvRDs7T0FFRztJQUNVLDBCQUFnQixHQUFHLFFBQVEsQ0FBQztJQUN6Qzs7T0FFRztJQUNVLGlDQUF1QixHQUFHLGVBQWUsQ0FBQztJQUN2RDs7T0FFRztJQUNVLDRCQUFrQixHQUFHLFVBQVUsQ0FBQztJQUM3Qzs7T0FFRztJQUNVLDJCQUFpQixHQUFHLFNBQVMsQ0FBQztJQUMzQzs7T0FFRztJQUNVLDJCQUFpQixHQUFHLFNBQVMsQ0FBQztJQUMzQzs7T0FFRztJQUNVLDBCQUFnQixHQUFHLFFBQVEsQ0FBQztJQUN6Qzs7T0FFRztJQUNVLHFDQUEyQixHQUFHLG9CQUFvQixDQUFDO0lBQ2hFOztPQUVHO0lBQ1UseUJBQWUsR0FBRyxPQUFPLENBQUM7SUFDdkM7O09BRUc7SUFDVSxtQ0FBeUIsR0FBRyxNQUFNLENBQUM7SUFDaEQ7O09BRUc7SUFDVSx1QkFBYSxHQUFHLE1BQU0sQ0FBQztJQUNwQzs7T0FFRztJQUNVLDRCQUFrQixHQUFHLE1BQU0sQ0FBQztJQUN6Qzs7T0FFRztJQUNVLGdDQUFzQixHQUFHLGVBQWUsQ0FBQztJQUN0RDs7T0FFRztJQUNVLDJCQUFpQixHQUFHLGdCQUFnQixDQUFDO0lBQ2xEOztPQUVHO0lBQ1UsZ0NBQXNCLEdBQUcsZUFBZSxDQUFDO0lBQ3REOztPQUVHO0lBQ1Usa0NBQXdCLEdBQUcsaUJBQWlCLENBQUM7SUFFMUQ7O09BRUc7SUFDVSw4QkFBb0IsR0FBRyxlQUFlLENBQUM7SUFFcEQ7O09BRUc7SUFDVSx5QkFBZSxHQUFHLENBQUMsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ2pELENBQUMsRUFqSWdCLFNBQVMsR0FBVCxpQkFBUyxLQUFULGlCQUFTLFFBaUl6QjtBQUVEOzs7Ozs7R0FNRztBQUNILElBQVksV0FJWDtBQUpELFdBQVksV0FBVztJQUNyQiw0QkFBYSxDQUFBO0lBQ2IsOEJBQWUsQ0FBQTtJQUNmLDBCQUFXLENBQUE7QUFDYixDQUFDLEVBSlcsV0FBVyxHQUFYLG1CQUFXLEtBQVgsbUJBQVcsUUFJdEI7QUFFWSxRQUFBLGFBQWEsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLEtBQUssQ0FBVSxDQUFDO0FBQy9ELFFBQUEsWUFBWSxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBVSxDQUFDO0FBRXZEOztHQUVHO0FBQ0gsSUFBWSx1QkFFWDtBQUZELFdBQVksdUJBQXVCO0lBQ2pDLDRKQUFpSSxDQUFBO0FBQ25JLENBQUMsRUFGVyx1QkFBdUIsR0FBdkIsK0JBQXVCLEtBQXZCLCtCQUF1QixRQUVsQyJ9