"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _Type_environment, _Type_extensions, _Type_properties, _Type_propertiesIndex, _Type_locales;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Type = exports.isType = void 0;
const ask = __importStar(require("./ast"));
const apply_1 = require("./apply");
const ast_1 = require("./ast");
const util_1 = require("./util");
const thing_1 = require("./thing");
const visit_1 = require("./visit");
function isType(obj) {
    return (obj === null || obj === void 0 ? void 0 : obj.kind) === "Type";
}
exports.isType = isType;
/**
 * A Type represents an instantiated Type in some context.
 *
 * Any `genericArguments` are either explicitly substituted or inferred from the surrounding context.
 *
 * This class provides a lazily-evaluated API for querying properties of the type.
 */
class Type {
    constructor(checker, 
    /**
     * Declaration of the instantiated type.
     */
    declaration, 
    /**
     * Instantiated type arguments.
     */
    genericArguments, 
    /**
     * Source node of this Type.
     */
    // readonly source?: ask.Node,
    functionArgumentNames, 
    /**
     * Name of the function (if this is an abstract function signature)
     */
    functionName) {
        Object.defineProperty(this, "checker", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: checker
        });
        Object.defineProperty(this, "declaration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: declaration
        });
        Object.defineProperty(this, "genericArguments", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: genericArguments
        });
        Object.defineProperty(this, "functionArgumentNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: functionArgumentNames
        });
        Object.defineProperty(this, "functionName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: functionName
        });
        Object.defineProperty(this, "kind", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Type"
        });
        // cache lazily evaluated environment - use `null` to indicate "cached, but empty".
        _Type_environment.set(this, void 0);
        // cache lazily evaluated list of base types - use `null` to indicate "cached, but empty".
        _Type_extensions.set(this, void 0);
        // cache lazily evaluated properties - use `null` to indicate "cached, but empty".
        _Type_properties.set(this, void 0);
        // cache lazily evaluated property index - use `null` to indicate "cached, but empty".
        _Type_propertiesIndex.set(this, void 0);
        // cache lazily evaluated properties - use `null` to indicate "cached, but empty".
        _Type_locales.set(this, void 0);
    }
    /**
     * String representation of this Type.
     */
    toString(context) {
        var _a, _b, _c, _d;
        const inScope = context ? this.checker.lookupName(context, this.shortName) : undefined;
        const name = (inScope === null || inScope === void 0 ? void 0 : inScope.kind) === "TypeDeclaration" && ((_a = inScope.name) === null || _a === void 0 ? void 0 : _a.name) && inScope.name.name === ((_b = this.name) === null || _b === void 0 ? void 0 : _b.name) ? this.shortName : (_c = this.name) === null || _c === void 0 ? void 0 : _c.name;
        if (this.isFunctionN() && this.functionArgumentNames !== undefined) {
            const prefix = this.isAction() ? "action" : this.isDialog() ? "dialog" : "function";
            return `${prefix} ${(_d = this.getFunctionReturnType()) === null || _d === void 0 ? void 0 : _d.toString()}${this.functionName ? ` ${this.functionName}` : ""}(${this.functionArgumentNames
                .map((name, i) => {
                let argType = this.getFunctionArgumentType(i);
                const isOptional = (argType === null || argType === void 0 ? void 0 : argType.isOptional()) === true;
                if (argType === null || argType === void 0 ? void 0 : argType.isOptional()) {
                    while (argType === null || argType === void 0 ? void 0 : argType.isOptional()) {
                        argType = argType.getOptionalType();
                    }
                }
                return `${isOptional ? "optional " : ""}${argType === null || argType === void 0 ? void 0 : argType.toString()} ${name}`;
            })
                .join(", ")})`;
        }
        return `${name}${this.genericArguments ? `<${this.genericArguments.map((a) => a === null || a === void 0 ? void 0 : a.toString(context)).join(", ")}>` : ""}`;
    }
    toTypeReference(context) {
        var _a;
        const ref = new ask.TypeReference(this.name, (_a = this.genericArguments) === null || _a === void 0 ? void 0 : _a.map((arg) => arg === null || arg === void 0 ? void 0 : arg.toTypeReference()), undefined, undefined);
        if (context) {
            ref.context = context;
        }
        return ref;
    }
    get shortName() {
        var _a, _b, _c;
        return ((_b = (_a = this.declaration) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.name) ? (0, util_1.getName)((_c = this.declaration.name) === null || _c === void 0 ? void 0 : _c.name) : undefined;
    }
    /**
     * Name of this Type.
     */
    get name() {
        var _a;
        return (_a = this.declaration) === null || _a === void 0 ? void 0 : _a.name;
    }
    get namespace() {
        var _a, _b;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) ? (0, util_1.getNamespace)((_b = this.name) === null || _b === void 0 ? void 0 : _b.name) : undefined;
    }
    /**
     * The type environment of this Type.
     *
     * Maps type aliases for Type Parameters to instantiated Types.
     */
    get environment() {
        var _a, _b;
        if (__classPrivateFieldGet(this, _Type_environment, "f") === undefined) {
            if (((_a = this.declaration) === null || _a === void 0 ? void 0 : _a.kind) === "TypeDeclaration") {
                const genericArguments = this.declaration.genericArguments || [];
                __classPrivateFieldSet(this, _Type_environment, ((_b = this.genericArguments) === null || _b === void 0 ? void 0 : _b.map((arg, i) => {
                    var _a, _b;
                    const name = (_b = (_a = genericArguments === null || genericArguments === void 0 ? void 0 : genericArguments[i]) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.name;
                    return name === undefined
                        ? {}
                        : {
                            [name]: arg,
                        };
                }).reduce((a, b) => ({ ...a, ...b }), {})) || null, "f");
            }
        }
        return __classPrivateFieldGet(this, _Type_environment, "f") || undefined;
    }
    /**
     * Ordered list of this Type's base types (the types it "extends").
     */
    get extensions() {
        var _a, _b;
        if (__classPrivateFieldGet(this, _Type_extensions, "f") === undefined) {
            __classPrivateFieldSet(this, _Type_extensions, (_a = this.resolveExtensions()) !== null && _a !== void 0 ? _a : null, "f");
        }
        return (_b = __classPrivateFieldGet(this, _Type_extensions, "f")) !== null && _b !== void 0 ? _b : undefined;
    }
    resolveExtensions() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        // instantiate the base types
        if (((_a = this.declaration) === null || _a === void 0 ? void 0 : _a.kind) === "SlotType") {
            // Beta 1 loads Slot Types from the interaction model - they always extend string.
            return [this.checker.string];
        }
        if (((_b = this.declaration) === null || _b === void 0 ? void 0 : _b.kind) === "ActionDeclaration" || ((_c = this.declaration) === null || _c === void 0 ? void 0 : _c.kind) === "DialogDeclaration") {
            const actionArity = (_e = (_d = this.declaration.arguments) === null || _d === void 0 ? void 0 : _d.length) !== null && _e !== void 0 ? _e : 0;
            const typeArgs = [
                ...((_g = (_f = this.declaration.arguments) === null || _f === void 0 ? void 0 : _f.map((arg) => this.checker.getType(arg.type))) !== null && _g !== void 0 ? _g : []),
                this.checker.getType(this.declaration.returnType),
            ];
            const actionType = this.checker.instantiateTypeDeclaration(this.checker.lookupTypeDeclaration(((_h = this.declaration) === null || _h === void 0 ? void 0 : _h.kind) === "ActionDeclaration" ? (0, ast_1.ActionTypeName)(actionArity) : (0, ast_1.DialogTypeName)(actionArity)), typeArgs);
            if (actionType) {
                return [actionType];
            }
            return [this.checker.nothing];
        }
        if (((_j = this.declaration) === null || _j === void 0 ? void 0 : _j.kind) === "EnumDeclaration") {
            return [this.checker.enumeration()];
        }
        if (((_k = this.declaration) === null || _k === void 0 ? void 0 : _k.kind) === "EnumItemDeclaration") {
            const enumType = this.checker.getType(this.declaration.context);
            if (enumType) {
                return [enumType];
            }
        }
        else if (((_l = this.declaration) === null || _l === void 0 ? void 0 : _l.kind) === "TypeDeclaration" || ((_m = this.declaration) === null || _m === void 0 ? void 0 : _m.kind) === "TypeParameter") {
            const extensions = this.declaration.kind === "TypeDeclaration"
                ? this.declaration.extensions
                : this.declaration.kind === "TypeParameter"
                    ? this.declaration.constraints
                    : undefined;
            if (extensions) {
                return extensions.map((extension) => {
                    var _a;
                    // map the input typeArgs to the base-type's arguments
                    const extEnv = ((_a = extension.arguments) === null || _a === void 0 ? void 0 : _a.map((arg) => {
                        var _a;
                        return ({
                            [(_a = arg === null || arg === void 0 ? void 0 : arg.name) === null || _a === void 0 ? void 0 : _a.name]: this.checker.instantiateTypeReference(arg, this.environment),
                        });
                    }).reduce((a, b) => ({ ...a, ...b }), {})) || undefined;
                    return this.checker.instantiateTypeReference(extension, extEnv);
                });
            }
            if (((_o = this.declaration.name) === null || _o === void 0 ? void 0 : _o.name) !== ast_1.AlexaSchema.Nothing && ((_p = this.declaration.name) === null || _p === void 0 ? void 0 : _p.name) !== ast_1.AlexaSchema.Thing) {
                return [this.checker.thing];
            }
        }
        else {
            return [this.checker.nothing];
        }
        return undefined;
    }
    /**
     * Ordered list of all Properties in this Type.
     *
     * @returns list of properties if any, `null` otherwise.
     */
    get properties() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z;
        if (__classPrivateFieldGet(this, _Type_properties, "f") !== undefined) {
            return __classPrivateFieldGet(this, _Type_properties, "f");
        }
        const properties = [];
        if (((_a = this.declaration) === null || _a === void 0 ? void 0 : _a.kind) === "EnumItemDeclaration") {
            // enum item has no properties, this will change when we support values https://github.com/alexa/ask-ac/issues/198
        }
        else if (((_b = this.declaration) === null || _b === void 0 ? void 0 : _b.kind) === "ActionDeclaration" || ((_c = this.declaration) === null || _c === void 0 ? void 0 : _c.kind) === "DialogDeclaration" || this.isFunctionN()) {
            const typeType = this.checker.lookupTypeDeclaration(ast_1.AlexaSchema.Type);
            const actionType = this.checker.lookupTypeDeclaration(ast_1.AlexaConversations.Action);
            const argumentsType = this.checker.lookupTypeDeclaration(ast_1.AlexaSchema.Arguments);
            const returnType = (_d = this.getFunctionReturnType()) !== null && _d !== void 0 ? _d : this.checker.thing;
            if (actionType && typeType && returnType) {
                properties.push({
                    kind: "Property",
                    index: 0,
                    name: "arguments",
                    type: new Type(this.checker, argumentsType, [this]),
                }, {
                    kind: "Property",
                    index: 1,
                    name: "returnType",
                    type: this.checker.instantiateTypeDeclaration(typeType, [returnType]),
                });
            }
        }
        else if (((_e = this.declaration) === null || _e === void 0 ? void 0 : _e.kind) === "TypeDeclaration") {
            if (((_f = this.declaration.name) === null || _f === void 0 ? void 0 : _f.name) === ast_1.AlexaSchema.Type) {
                // this is the intrinsic `Type<T>` type that has varying behavior based on what type it references.
                const type = (_g = this.genericArguments) === null || _g === void 0 ? void 0 : _g[0];
                if (type) {
                    if (((_h = type.declaration) === null || _h === void 0 ? void 0 : _h.kind) === "EnumDeclaration") {
                        (_j = type.declaration.items) === null || _j === void 0 ? void 0 : _j.forEach((item, index) => {
                            var _a, _b;
                            if ((_a = item.name) === null || _a === void 0 ? void 0 : _a.name) {
                                properties.push({
                                    kind: "Property",
                                    index,
                                    name: (_b = item.name) === null || _b === void 0 ? void 0 : _b.name,
                                    declaration: item,
                                    type: this.checker.getType(item),
                                });
                            }
                        });
                    }
                    else {
                        const propertiesType = this.checker.lookupTypeDeclaration(ast_1.AlexaSchema.Properties);
                        if (propertiesType) {
                            properties.push({
                                kind: "Property",
                                index: 0,
                                name: "properties",
                                type: new Type(this.checker, propertiesType, [type]),
                            });
                        }
                    }
                }
            }
            else if (((_k = this.declaration.name) === null || _k === void 0 ? void 0 : _k.name) === ast_1.AlexaSchema.Properties || ((_l = this.declaration.name) === null || _l === void 0 ? void 0 : _l.name) === ast_1.AlexaSchema.ArgumentProperties) {
                const property = ((_m = this.declaration.name) === null || _m === void 0 ? void 0 : _m.name) === ast_1.AlexaSchema.Properties ? ast_1.AlexaSchema.Property : ast_1.AlexaSchema.ArgumentProperty;
                const typeType = this.checker.lookupTypeDeclaration(ast_1.AlexaSchema.Type);
                const propType = this.checker.lookupTypeDeclaration(property);
                const type = (_o = this.genericArguments) === null || _o === void 0 ? void 0 : _o[0];
                if (typeType && propType && (type === null || type === void 0 ? void 0 : type.properties) !== undefined) {
                    properties.push(...type.properties.map((prop) => ({
                        ...prop,
                        type: this.checker.instantiateTypeDeclaration(propType, [prop.type]),
                        declaration: undefined,
                    })));
                }
            }
            else if (((_p = this.declaration.name) === null || _p === void 0 ? void 0 : _p.name) === ast_1.AlexaConversations.ActionContextValues ||
                ((_q = this.declaration.name) === null || _q === void 0 ? void 0 : _q.name) === ast_1.AlexaSchema.ArgumentValues ||
                ((_r = this.declaration.name) === null || _r === void 0 ? void 0 : _r.name) === ast_1.AlexaSchema.Arguments) {
                // Arguments<F>, ArgumentValues<F> and ActionContextValues<A> all compute a type based on the arguments
                const targetType = (_s = this.genericArguments) === null || _s === void 0 ? void 0 : _s[0];
                const containerType = ((_t = this.declaration.name) === null || _t === void 0 ? void 0 : _t.name) === ast_1.AlexaConversations.ActionContextValues
                    ? this.checker.lookupTypeDeclaration(ast_1.AlexaSchema.Optional)
                    : this.declaration.name.name === ast_1.AlexaSchema.Arguments
                        ? this.checker.lookupTypeDeclaration(ast_1.AlexaSchema.Argument)
                        : undefined;
                properties.push(...((_v = (_u = targetType === null || targetType === void 0 ? void 0 : targetType.getFunctionArgumentDeclarations()) === null || _u === void 0 ? void 0 : _u.map((arg, index) => {
                    var _a, _b, _c, _d;
                    const innerType = this.checker.instantiateTypeReference(arg.type);
                    const prop = {
                        kind: "Property",
                        index,
                        name: (_a = arg.name) === null || _a === void 0 ? void 0 : _a.name,
                        type: ((_b = containerType === null || containerType === void 0 ? void 0 : containerType.name) === null || _b === void 0 ? void 0 : _b.name) === ast_1.AlexaSchema.Optional && (innerType === null || innerType === void 0 ? void 0 : innerType.isOptional())
                            ? innerType
                            : containerType
                                ? this.checker.instantiateTypeDeclaration(containerType, [innerType])
                                : ((_d = (_c = this.declaration) === null || _c === void 0 ? void 0 : _c.name) === null || _d === void 0 ? void 0 : _d.name) === ast_1.AlexaSchema.ArgumentValues
                                    ? innerType
                                    : undefined,
                        declaration: arg,
                    };
                    return prop;
                })) !== null && _v !== void 0 ? _v : []));
            }
            else if (((_w = this.declaration.name) === null || _w === void 0 ? void 0 : _w.name) === ast_1.AlexaSchema.Optional) {
                // Optional<T> type would contain all the properties of `T`.
                const argumentType = (_x = this.genericArguments) === null || _x === void 0 ? void 0 : _x[0];
                if (argumentType && argumentType.properties) {
                    properties.push(...argumentType.properties);
                }
            }
            else {
                properties.push(...(((_z = (_y = this.declaration) === null || _y === void 0 ? void 0 : _y.properties) === null || _z === void 0 ? void 0 : _z.map((prop, index) => {
                    var _a;
                    let type = prop.type !== undefined ? this.checker.instantiateTypeReference(prop.type, this.environment) : undefined;
                    if (prop.optional === true && (type === null || type === void 0 ? void 0 : type.isOptional()) === false) {
                        const optionalType = this.checker.lookupTypeDeclaration(ast_1.AlexaSchema.Optional);
                        if (optionalType) {
                            type = this.checker.instantiateTypeDeclaration(optionalType, [type]);
                        }
                    }
                    return {
                        kind: "Property",
                        declaration: prop,
                        index,
                        name: (_a = prop.name) === null || _a === void 0 ? void 0 : _a.name,
                        type,
                    };
                })) || []));
            }
        }
        const seen = new Set();
        const _properties = [];
        addProperties(properties);
        if (this.extensions) {
            for (const ext of this.extensions) {
                if (ext === null || ext === void 0 ? void 0 : ext.properties) {
                    addProperties(ext.properties);
                }
            }
        }
        __classPrivateFieldSet(this, _Type_properties, _properties || null, "f");
        return __classPrivateFieldGet(this, _Type_properties, "f") || undefined;
        function addProperties(properties) {
            if (properties) {
                for (const property of properties) {
                    if (!seen.has(property.name)) {
                        _properties.push(property);
                        seen.add(property.name);
                    }
                }
            }
        }
    }
    /**
     * Index of all Properties by name.
     */
    get propertiesIndex() {
        var _a;
        if (__classPrivateFieldGet(this, _Type_propertiesIndex, "f") === undefined) {
            __classPrivateFieldSet(this, _Type_propertiesIndex, ((_a = this.properties) === null || _a === void 0 ? void 0 : _a.map((p) => ({
                [p.name]: p,
            })).reduce((a, b) => ({ ...a, ...b }), {})) || null, "f");
        }
        return __classPrivateFieldGet(this, _Type_propertiesIndex, "f") || undefined;
    }
    /**
     * Apply a Call to this Type.
     *
     *
     * @param call expression of input to the Action.
     */
    apply(call, checker = this.checker) {
        return new apply_1.Apply(checker, call, this);
    }
    /**
     * Instantiate a new Thing of this Type.
     *
     * @param node AST node this Thing value originates from.
     * @returns a Thing instance representing this distinct Thing
     */
    getThing(token, origin, parent, apply) {
        var _a;
        // use the environment of the Application or default to this environment
        const checker = (_a = apply === null || apply === void 0 ? void 0 : apply.checker) !== null && _a !== void 0 ? _a : this.checker;
        if (this.isPrimitive()) {
            if (this.isStringLike()) {
                return new thing_1.StringThing(checker, token, this, apply, origin, parent);
            }
            if (this.isBoolean()) {
                return new thing_1.BooleanThing(checker, token, this, apply, origin, parent);
            }
            if (this.isNumber()) {
                return new thing_1.NumberThing(checker, token, this, apply, origin, parent);
            }
            if (this.isVoid()) {
                return new thing_1.VoidThing(checker, token, this, apply, origin, parent);
            }
            if (this.isNothing()) {
                return new thing_1.NothingThing(checker, token, this, apply, origin, parent);
            }
        }
        else if (this.isAction()) {
            return new thing_1.ActionThing(checker, token, this, this.declaration); // TODO
        }
        else if (this.isDialog()) {
            return new thing_1.DialogThing(checker, token, this, this.declaration); // TODO
        }
        else if (this.isFunction()) {
            return new thing_1.FunctionThing(checker, token, this, (origin === null || origin === void 0 ? void 0 : origin.kind) === "ArgumentDeclaration" ? origin : undefined);
        }
        else if (this.isList()) {
            return new thing_1.ListThing(checker, token, this, apply, origin, parent);
        }
        else if (this.isArgument()) {
            return new thing_1.ArgumentThing(checker, token, this, apply, origin, parent);
        }
        else if (this.isArguments()) {
            return new thing_1.ArgumentsThing(checker, token, this, origin, parent === null || parent === void 0 ? void 0 : parent.asFunction());
        }
        else if (this.isObject()) {
            return new thing_1.ObjectThing(checker, token, this, apply, origin, parent);
        }
        return new thing_1.AnyThing(checker, token, this, apply, origin, parent);
    }
    /**
     * Get the type of a property enclosed by this Type.
     *
     * @param argument name or index
     */
    getPropertyType(argument) {
        var _a;
        return (_a = this.getProperty(argument)) === null || _a === void 0 ? void 0 : _a.type;
    }
    /**
     * Get a property enclosed by this Type.
     *
     * @param argument name or index
     */
    getProperty(argument) {
        var _a, _b, _c;
        if (argument === undefined) {
            return undefined;
        }
        if (ask.isArgument(argument)) {
            if ((_a = argument.name) === null || _a === void 0 ? void 0 : _a.name) {
                return this.getProperty(argument.name.name);
            }
            if (typeof argument.index === "number") {
                return this.getProperty(argument.index);
            }
        }
        else if (typeof argument === "number") {
            return (_b = this.properties) === null || _b === void 0 ? void 0 : _b[argument];
        }
        else {
            const prop = (_c = this.propertiesIndex) === null || _c === void 0 ? void 0 : _c[argument];
            if (prop) {
                return prop;
            }
            if (this.extensions) {
                for (const ext of this.extensions) {
                    const prop = ext === null || ext === void 0 ? void 0 : ext.getProperty(argument);
                    if (prop) {
                        return prop;
                    }
                }
            }
        }
        return undefined;
    }
    /**
     * Get the Nodes referenced by this Type.
     */
    getReferences() {
        var _a;
        const references = new Set();
        (_a = this.properties) === null || _a === void 0 ? void 0 : _a.forEach((prop) => {
            var _a, _b;
            if (!(((_a = prop.type) === null || _a === void 0 ? void 0 : _a.isList()) || ((_b = prop.type) === null || _b === void 0 ? void 0 : _b.isOptional()))) {
                findReferences(prop.type);
            }
        });
        return references;
        function findReferences(type) {
            var _a, _b, _c;
            if ((type === null || type === void 0 ? void 0 : type.declaration) !== undefined && !references.has(type.declaration)) {
                references.add(type.declaration);
                (_a = type.genericArguments) === null || _a === void 0 ? void 0 : _a.forEach(findReferences);
                (_b = type.extensions) === null || _b === void 0 ? void 0 : _b.forEach(findReferences);
                (_c = type.properties) === null || _c === void 0 ? void 0 : _c.forEach((prop) => {
                    var _a, _b;
                    if (!(((_a = prop.type) === null || _a === void 0 ? void 0 : _a.isList()) || ((_b = prop.type) === null || _b === void 0 ? void 0 : _b.isOptional()))) {
                        findReferences(prop.type);
                    }
                });
            }
        }
    }
    /**
     * Scan this type for any type arguments or super-types that consist of TypeParameters.
     */
    hasTypeParameters() {
        var _a, _b, _c;
        if (((_a = this.declaration) === null || _a === void 0 ? void 0 : _a.kind) === "TypeParameter") {
            return true;
        }
        return (((_b = this.genericArguments) === null || _b === void 0 ? void 0 : _b.find((t) => t === null || t === void 0 ? void 0 : t.hasTypeParameters())) !== undefined ||
            ((_c = this.extensions) === null || _c === void 0 ? void 0 : _c.find((e) => e.hasTypeParameters())) !== undefined);
    }
    /**
     * A type has a catalog if it is a built-in or a custom slot type found in the interaction model.
     *
     * TODO: support catalog associations in ACDL https://github.com/alexa/ask-ac/issues/29
     */
    hasCatalog() {
        var _a, _b, _c;
        return (_c = (((_a = this.namespace) === null || _a === void 0 ? void 0 : _a.startsWith(ast_1.BuiltinsNamespace)) || ((_b = this.namespace) === null || _b === void 0 ? void 0 : _b.startsWith(ast_1.SlotTypesNamespace)))) !== null && _c !== void 0 ? _c : false;
    }
    /**
     * A custom type is one that is not defined in:
     * 1. com.amazon.alexa.schema
     * 2. com.amazon.alexa.ask.conversations
     * 3. com.amazon.ask.types.builtins.AMAZON
     *
     * TODO: validate that users can't use these namespaces: https://github.com/alexa/ask-ac/issues/3
     */
    isCustom() {
        return !(this.isBuiltIn() || this.isAlexaSchema() || this.isCoreType());
    }
    /**
     * Checks if this is a built in type provided by the platform.
     *
     * Namespace:
     * `com.amazon.ask.types.builtins.AMAZON`
     *
     * TODO: should we also consider Alexa Schema as built-in?
     */
    isBuiltIn() {
        var _a, _b;
        return (_b = (_a = this.namespace) === null || _a === void 0 ? void 0 : _a.startsWith(ast_1.BuiltinsNamespace)) !== null && _b !== void 0 ? _b : false;
    }
    /**
     * @returns true if the type can be used as the result type of an utterance
     */
    isValidForUtterance() {
        return this.isBuiltIn() || this.isCoreType() || this.isAlexaSchema() || this.isSlotType();
    }
    /**
     * Checks if this is a valid UtteranceEvent wrapper type
     */
    isValidUtteranceWrapper() {
        return (!this.isPrimitive() || this.isNothing()) && !this.isBuiltIn();
    }
    /**
     * Checks if this type is defined in an interaction model.
     *
     * Namespace:
     * `com.amazon.ask.types.builtins.AMAZON`
     */
    isSlotType() {
        var _a, _b;
        return (_b = (_a = this.namespace) === null || _a === void 0 ? void 0 : _a.startsWith(ast_1.SlotTypesNamespace)) !== null && _b !== void 0 ? _b : false;
    }
    /**
     * Checks if this type is defined in the AC core library.
     *
     * Namespace:
     * `com.amazon.alexa.ask.conversations`
     */
    isCoreType() {
        var _a, _b;
        return (_b = (_a = this.namespace) === null || _a === void 0 ? void 0 : _a.startsWith(ast_1.AlexaConversationsNamespace)) !== null && _b !== void 0 ? _b : false;
    }
    /**
     * Checks if this type is defined in Alexa Schema.
     *
     * Namespace:
     * `com.amazon.alexa.schema`
     */
    isAlexaSchema() {
        var _a, _b;
        return (_b = (_a = this.namespace) === null || _a === void 0 ? void 0 : _a.startsWith(ast_1.AlexaSchemaNamespace)) !== null && _b !== void 0 ? _b : false;
    }
    /**
     * Check if this type is the top-level Skill type.
     */
    isSkill() {
        var _a, _b;
        return ((_b = (_a = this.declaration) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.name) === ast_1.AlexaConversations.Skill;
    }
    /**
     * Check if this type is the SkillLevelResponses type.
     */
    isSkillLevelResponses() {
        var _a, _b;
        return ((_b = (_a = this.declaration) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.name) === ast_1.AlexaConversations.SkillLevelResponses;
    }
    /**
     * Check if this type is the InvocationName type.
     */
    isInvocationName() {
        var _a, _b;
        return ((_b = (_a = this.declaration) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.name) === ast_1.AlexaConversations.InvocationName;
    }
    /**
     * A complex type is one with at least one property.
     */
    isObject() {
        var _a, _b;
        return ((_b = (_a = this.properties) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0;
    }
    /**
     * Check if a name is (inclusively) found in this type's hierarchy.
     *
     * @param name name of type to find
     */
    isNameInHierarchy(name) {
        return this.findNameInHierarchy(name) !== undefined;
    }
    /**
     * Find a type by name in this type's hierarchy.
     *
     * E.g.
     * ```
     * looking for UtteranceEvent<T>
     *
     * // type is the one we're looking for
     * UtteranceEvent<T> => UtteranceEvent<T>
     *
     * // search the type's hierarchy.
     * type A : UtteranceEvent<String> => UtteranceEvent<String>
     *
     * // type does not exist
     * type B => undefined
     * ```
     *
     *
     * @param name name of the type to find
     */
    findNameInHierarchy(name) {
        var _a, _b, _c;
        if (name !== undefined) {
            if (((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) !== undefined && typeof name === "function" ? name((_b = this.name) === null || _b === void 0 ? void 0 : _b.name) : ((_c = this.name) === null || _c === void 0 ? void 0 : _c.name) === name) {
                return this;
            }
            if (this.extensions) {
                for (const ext of this.extensions) {
                    const found = ext.findNameInHierarchy(name);
                    if (found) {
                        return found;
                    }
                }
            }
        }
        return undefined;
    }
    /**
     * Check if this is the intrinsic `Properties<T>` type that computes the properties of some type, `T`.
     */
    isProperties() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaSchema.Properties;
    }
    /**
     * Check if this is the intrinsic `Property<T>`.
     */
    isProperty() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaSchema.Property;
    }
    /**
     * If this is a type `Property<T>`, return the inner type, `T`.
     */
    getPropertyTypeType() {
        var _a;
        if (this.isProperty()) {
            return (_a = this.genericArguments) === null || _a === void 0 ? void 0 : _a[0];
        }
        return undefined;
    }
    /**
     * Check if this is the `Type<T>` type.
     *
     * ```
     * type Person {
     *   String name
     * }
     *
     * // Type<Person>
     * person = Person
     * ```
     */
    isType() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaSchema.Type;
    }
    /**
     * Get the type of the `Type<T>` type - in this case, `T`.
     *
     * ```
     * Type<Person> => Person
     * ```
     */
    getTypeType() {
        var _a, _b;
        if (this.isType()) {
            return (_a = this.genericArguments) === null || _a === void 0 ? void 0 : _a[0];
        }
        return (_b = this.findNameInHierarchy(ast_1.AlexaSchema.Type)) === null || _b === void 0 ? void 0 : _b.getTypeType();
    }
    /**
     * Is the `ReturnValue<T>` intrinsic type.
     */
    isReturnValue() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaSchema.ReturnValue;
    }
    /**
     * Get the type parameter of the `ReturnValue<T>`.
     */
    getReturnValueType() {
        var _a;
        return this.isReturnValue() ? (_a = this.genericArguments) === null || _a === void 0 ? void 0 : _a[0] : undefined;
    }
    /**
     * Is this Type `alexa.schema.Nothing` (the Bottom Type)?
     */
    isNothing() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaSchema.Nothing;
    }
    /**
     * Is this Type `alexa.schema.Thing` (the Bottom Type)?
     */
    isThing() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaSchema.Thing;
    }
    /**
     * Is this type `Nothing`, `Void`, `Boolean`, `Number`, `String`, `Date` or `Time`.
     */
    isPrimitive() {
        return this.isNothing() || this.isVoid() || this.isBoolean() || this.isNumber() || this.isStringLike();
    }
    /**
     * Is this type one of 'Request', 'ConfirmArgs', 'ConfirmAction', 'Notify', 'Offer', 'ReqAlt', 'Bye', 'ReqMore'.
     */
    isResponseAct() {
        return (this.isRequest() ||
            this.isConfirmArgs() ||
            this.isConfirmAction() ||
            this.isNotify() ||
            this.isOffer() ||
            this.isReqAlt() ||
            this.isBye() ||
            this.isReqMore());
    }
    /**
     * Is this the Void type, `com.amazon.alexa.schema.Void`?
     *
     * @version 1.0.0-beta2
     */
    isVoid() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaSchema.Void;
    }
    /**
     * Is this type, `Optional<T>`?
     *
     * Also known as a union, `T | Void`.
     */
    isOptional() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaSchema.Optional;
    }
    /**
     * Is this boolean type, `com.amazon.alexa.schema.Boolean`?
     */
    isBoolean() {
        return this.isNameInHierarchy(ast_1.AlexaSchema.Boolean);
    }
    /**
     * Is this boolean type, `com.amazon.alexa.schema.Boolean`?
     */
    isNumber() {
        return this.isNameInHierarchy(ast_1.AlexaSchema.Number);
    }
    /**
     * Is this a String-like Type?
     *
     * TODO: should Date and Time really be considered String-like?
     */
    isStringLike() {
        return this.isString() || this.isUtterance();
    }
    /**
     * is this type String or a sub-type of String.
     */
    isString() {
        return this.isNameInHierarchy(ast_1.AlexaSchema.String);
    }
    /**
     * Is this the core `com.amazon.alexa.ask.conversations.UtteranceEvent` type?
     */
    isUtteranceEvent() {
        return this.isNameInHierarchy(ast_1.AlexaConversations.UtteranceEvent);
    }
    /**
     * Get the UtteranceEvent's inner type.
     *
     * E.g.
     *
     * ```
     * UtteranceEvent<Person> => Person
     * ```
     */
    getUtteranceEventType() {
        var _a, _b;
        return (_b = (_a = this.findNameInHierarchy(ast_1.AlexaConversations.UtteranceEvent)) === null || _a === void 0 ? void 0 : _a.genericArguments) === null || _b === void 0 ? void 0 : _b[0];
    }
    /**
     * Is this the intrinsic `Utterance` type, representing a type-safe sample utterance string.
     *
     * ```
     * // UtteranceEvent<Person>
     * u = utterances<Person>(
     *   // List<Utterance<Person>>
     *   [
     *     // Utterance<Person>
     *     "i am {name}"
     *   ]
     * )
     * ```
     */
    isUtterance() {
        return this.isNameInHierarchy(ast_1.AlexaConversations.Utterance);
    }
    /**
     * Is this the intrinsic com.amazon.alexa.ask.conversations.Argument type representing an argument on some action.
     *
     * ```
     * action A(String arg)
     *
     * // Argument<String>
     * a = A.arguments.arg
     * ```
     */
    isArgument() {
        return this.isNameInHierarchy(ast_1.AlexaSchema.Argument);
    }
    /**
     * @returns the type `T` in `Argument<T>`.
     */
    getArgumentType() {
        var _a, _b;
        return (_b = (_a = this.findNameInHierarchy(ast_1.AlexaSchema.Argument)) === null || _a === void 0 ? void 0 : _a.genericArguments) === null || _b === void 0 ? void 0 : _b[0];
    }
    /**
     * Is this the intrinsic com.amazon.alexa.ask.conversations.Arguments type representing the arguments of some Action.
     *
     * ```
     * action A(String arg)
     *
     * // Arguments<A>
     * a = A.arguments
     * ```
     */
    isArguments() {
        return this.isNameInHierarchy(ast_1.AlexaSchema.Arguments);
    }
    /**
     * Get the item type of a parameterized List.
     *
     * ```
     * Utterance<Person> => (type) Person
     * utterances<Person>([
     *   "hello" => (type) Person
     * ])
     * ```
     *
     * @returns the item Type if this is a List, otherwise `undefined`.
     */
    getUtteranceType() {
        var _a, _b;
        return (_b = (_a = this.findNameInHierarchy(ast_1.AlexaConversations.Utterance)) === null || _a === void 0 ? void 0 : _a.genericArguments) === null || _b === void 0 ? void 0 : _b[0];
    }
    /**
     * Get the type of an Optional.
     *
     * ```
     * Optional<String> => (type) String
     * Optional<T> => (type parameter) T
     * ```
     */
    getOptionalType() {
        var _a;
        if (this.isOptional()) {
            return (_a = this.genericArguments) === null || _a === void 0 ? void 0 : _a[0];
        }
        return undefined;
    }
    /**
     * If this is Optional<T> returns T else returns this
     * @returns
     */
    getNonOptionalType() {
        var _a;
        return this.isOptional() && ((_a = this.genericArguments) === null || _a === void 0 ? void 0 : _a[0]) ? this.genericArguments[0] : this;
    }
    /**
     * Checks if this type is the `Locale` enum type.
     */
    isLocale() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaConversations.Locale;
    }
    /**
     * Checks if this type is the `AnnotationTarget` enum type.
     */
    isAnnotationTarget() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaConversations.AnnotationTarget;
    }
    /**
     * Checks if this is a type that extends the base Function type.
     *
     * Both Action and Dialog types extend Function.
     *
     * @returns
     */
    isFunction() {
        return this.findNameInHierarchy(ast_1.AlexaSchema.Function) !== undefined;
    }
    /**
     * Checks if this Type extends one of `FunctionN` functions where `N` is a numerical value representing
     * the number of arguments in the Function.
     */
    isFunctionN() {
        return this.getFunctionN() !== undefined;
    }
    /**
     * Gets the `FunctionN` type in this Type's hierarchy if this is of type `FunctionN` where `N` is a
     * numerical value representing the number of arguments in the Function.
     */
    getFunctionN() {
        return this.findNameInHierarchy((s) => s.startsWith(ast_1.AlexaSchema.Function) && s !== ast_1.AlexaSchema.Function);
    }
    /**
     * If this Type is a Function (Dialog or Action) then
     * @returns
     */
    getFunctionReturnType() {
        var _a, _b, _c, _d;
        if (((_a = this.declaration) === null || _a === void 0 ? void 0 : _a.kind) === "ActionDeclaration" || ((_b = this.declaration) === null || _b === void 0 ? void 0 : _b.kind) === "DialogDeclaration") {
            return this.checker.instantiateTypeReference(this.declaration.returnType);
        }
        if (this.isFunctionN()) {
            const functionN = this.getFunctionN();
            return (_c = functionN === null || functionN === void 0 ? void 0 : functionN.genericArguments) === null || _c === void 0 ? void 0 : _c[((_d = functionN === null || functionN === void 0 ? void 0 : functionN.genericArguments) === null || _d === void 0 ? void 0 : _d.length) - 1];
        }
        return undefined;
    }
    getFunctionArgumentType(index) {
        var _a, _b;
        return (_b = (_a = this.getFunctionN()) === null || _a === void 0 ? void 0 : _a.genericArguments) === null || _b === void 0 ? void 0 : _b[index];
    }
    getFunctionArgumentTypes() {
        var _a, _b, _c, _d, _e;
        if (((_a = this.declaration) === null || _a === void 0 ? void 0 : _a.kind) === "ActionDeclaration" || ((_b = this.declaration) === null || _b === void 0 ? void 0 : _b.kind) === "DialogDeclaration") {
            return (_c = this.declaration.arguments) === null || _c === void 0 ? void 0 : _c.map((arg) => this.checker.getType(arg));
        }
        if (this.isFunction()) {
            if (this.functionArgumentNames) {
                return this.functionArgumentNames.map((name, i) => { var _a; return (_a = this.genericArguments) === null || _a === void 0 ? void 0 : _a[i]; });
            }
            // parse the value of N in a FunctionN/ActionN/DialogN.
            const nStr = (_d = this.shortName) === null || _d === void 0 ? void 0 : _d.replace(/[^0-9]/g, "");
            if (nStr) {
                const n = parseInt(nStr, 10);
                const args = [];
                for (let i = 0; i < n; i++) {
                    args.push((_e = this.genericArguments) === null || _e === void 0 ? void 0 : _e[i]);
                }
                return args;
            }
        }
        return undefined;
    }
    /**
     * Get the ArgumentDeclarations for this Type if the Type is a Function.
     */
    getFunctionArgumentDeclarations() {
        var _a, _b, _c, _d, _e, _f;
        if (((_a = this.declaration) === null || _a === void 0 ? void 0 : _a.kind) === "ActionDeclaration" || ((_b = this.declaration) === null || _b === void 0 ? void 0 : _b.kind) === "DialogDeclaration") {
            return this.declaration.arguments;
        }
        if (this.isFunction()) {
            if (this.functionArgumentNames) {
                return this.functionArgumentNames.map((name, i) => {
                    var _a, _b, _c;
                    const decl = new ask.ArgumentDeclaration(new ask.Name(name), (_b = (_a = this.genericArguments) === null || _a === void 0 ? void 0 : _a[i]) === null || _b === void 0 ? void 0 : _b.toTypeReference());
                    (_c = this.declaration) === null || _c === void 0 ? void 0 : _c.setAsParentOn(decl);
                    return decl;
                });
            }
            const nStr = (_c = this.shortName) === null || _c === void 0 ? void 0 : _c.replace(/[^0-9]/g, "");
            if (nStr) {
                const n = parseInt(nStr, 10);
                const args = [];
                for (let i = 0; i < n; i++) {
                    // BUG: we are moving the TypeReference to the TypeDeclaration so it has the wrong lexical scope.
                    const decl = new ask.ArgumentDeclaration(new ask.Name(`arg${i}`), (_e = (_d = this.genericArguments) === null || _d === void 0 ? void 0 : _d[i]) === null || _e === void 0 ? void 0 : _e.toTypeReference());
                    (_f = this.declaration) === null || _f === void 0 ? void 0 : _f.setAsParentOn(decl);
                    args.push(decl);
                }
                return args;
            }
        }
        return undefined;
    }
    /**
     * Takes two Function types and creates a mapping between their respective argument names based on position.
     *
     * This is the foundation on which we allow functions passed around as arguments to be compatible even
     * when they don't have the same argument names. We do not wish for argument names to be relevant for
     * the compatibility of functions.
     *
     * Ex. `foo.getFunctionArgumentDeclarationMappings(Foo)`:
     * ```
     * action String Foo(String arg)
     *
     * dialog Bar(
     *   action String foo(String str)
     * ) {
     *   sample {
     *     // here, foo's `str` will be mapped to Foo's `arg`.
     *     foo(str = "hello")
     *   }
     * }
     * ```
     *
     * @param other the other type we are mapping this argument's names to.
     * @returns resulting mappings will map from `this`'s argument names to `other`'s argument names.
     */
    getFunctionArgumentDeclarationMappings(other) {
        var _a;
        if (other === undefined || !(other.isFunction() && this.isFunction())) {
            return undefined;
        }
        const thisArgs = this.getFunctionArgumentDeclarations();
        if (thisArgs === undefined) {
            return undefined;
        }
        return (_a = other
            .getFunctionArgumentDeclarations()) === null || _a === void 0 ? void 0 : _a.map((arg, i) => {
            var _a, _b;
            const argDecl = thisArgs === null || thisArgs === void 0 ? void 0 : thisArgs[i];
            if (((_a = argDecl === null || argDecl === void 0 ? void 0 : argDecl.name) === null || _a === void 0 ? void 0 : _a.name) && ((_b = arg.name) === null || _b === void 0 ? void 0 : _b.name)) {
                return {
                    [argDecl.name.name]: arg.name.name,
                };
            }
            return {};
        }).reduce((a, b) => ({ ...a, ...b }), {});
    }
    /**
     * Checks if this type is an DialogDeclaration.
     */
    isDialogDeclaration() {
        var _a;
        return ((_a = this.declaration) === null || _a === void 0 ? void 0 : _a.kind) === "DialogDeclaration";
    }
    /**
     * Checks if this type is an DialogDeclaration.
     */
    isDialog() {
        return this.findNameInHierarchy(ast_1.AlexaConversations.Dialog) !== undefined;
    }
    /**
     * Checks if this type is a fully qualified ActionDeclaration.
     */
    isActionDeclaration() {
        var _a;
        return ((_a = this.declaration) === null || _a === void 0 ? void 0 : _a.kind) === "ActionDeclaration";
    }
    isAction() {
        return this.findNameInHierarchy(ast_1.AlexaConversations.Action) !== undefined;
    }
    /**
     * Checks if this is a type
     * @returns
     */
    isEnum() {
        var _a;
        return ((_a = this.declaration) === null || _a === void 0 ? void 0 : _a.kind) === "EnumDeclaration";
    }
    /**
     * Checks if this is a Type representing an item in an `enum`.
     * @returns
     */
    isEnumItem() {
        var _a;
        return ((_a = this.declaration) === null || _a === void 0 ? void 0 : _a.kind) === "EnumItemDeclaration";
    }
    /**
     * Is this `com.amazon.alexa.ask.conversations.Args` or a sub-type.
     *
     * This type represents var args in an Action.
     *
     * ```
     * action void A(Args<String>)
     *
     * a = A(
     *   "no need",
     *   "to surround these with",
     *   "[ and ]"
     * )
     * ```
     */
    isArgs() {
        return this.isNameInHierarchy(ast_1.AlexaConversations.Args);
    }
    /**
     * Does this Type extend `alexa.schema.List`.
     */
    isList() {
        return this.isNameInHierarchy(ast_1.AlexaSchema.List);
    }
    isTaskContextProjection() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaConversations.TaskContextProjection;
    }
    isTaskContextProjectionType() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaConversations.TaskContextProjectionType;
    }
    isTaskContextProjectionAnnotation() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaConversations.taskContextProjection;
    }
    isTaskContextProjectionInfo() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaConversations.TaskContextProjectionInfo;
    }
    /**
     * Is this type one of 'Invoke', 'Inform', 'Affirm', 'Deny', 'RequestAct'.
     */
    isRequestAct() {
        var _a;
        return this.isInvoke() || this.isInform() || this.isAffirm() || this.isDeny() || ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaConversations.RequestAct;
    }
    /**
     * Is this type "com.amazon.alexa.ask.conversations.Invoke"
     */
    isInvoke() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaConversations.Invoke;
    }
    /**
     * Is this type "com.amazon.alexa.ask.conversations.Inform"
     */
    isInform() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaConversations.Inform;
    }
    /**
     * Is this type "com.amazon.alexa.ask.conversations.Affirm"
     */
    isAffirm() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaConversations.Affirm;
    }
    /**
     * Is this type "com.amazon.alexa.ask.conversations.Deny"
     */
    isDeny() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaConversations.Deny;
    }
    /**
     * Is this type "com.amazon.alexa.ask.conversations.Offer"
     */
    isOffer() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaConversations.Offer;
    }
    /**
     * Is this type "com.amazon.alexa.ask.conversations.ReqAlt"
     */
    isReqAlt() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaConversations.ReqAlt;
    }
    /**
     * Is this type "com.amazon.alexa.ask.conversations.ReqMore"
     */
    isReqMore() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaConversations.ReqMore;
    }
    /**
     * Is this type "com.amazon.alexa.ask.conversations.Request"
     */
    isRequest() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaConversations.Request;
    }
    /**
     * Is this type "com.amazon.alexa.ask.conversations.Request"
     */
    isRequestArguments() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaConversations.RequestArguments;
    }
    /**
     * Is this type "com.amazon.alexa.ask.conversations.ConfirmAction"
     */
    isConfirmAction() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaConversations.ConfirmAction;
    }
    /**
     * Is this type "com.amazon.alexa.ask.conversations.ReqMore"
     */
    isConfirmArgs() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaConversations.ConfirmArgs;
    }
    /**
     * Is this type "com.amazon.alexa.ask.conversations.ReqMore"
     */
    isConfirmArguments() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaConversations.ConfirmArguments;
    }
    /**
     * Is this type "com.amazon.alexa.ask.conversations.Bye"
     */
    isBye() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaConversations.Bye;
    }
    /**
     * Is this type "com.amazon.alexa.ask.conversations.Notify"
     */
    isNotify() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaConversations.Notify;
    }
    /**
     * Is this type "com.amazon.alexa.ask.conversations.APLA"
     */
    isApla() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaConversations.APLA;
    }
    /**
     * Is this type "com.amazon.alexa.ask.conversations.MultiModalResponse"
     */
    isMultiModalResponse() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaConversations.MultiModalResponse;
    }
    /**
     * Is this type "com.amazon.alexa.ask.conversations.APL"
     */
    isApl() {
        var _a;
        return ((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaConversations.APL;
    }
    /**
     * Get the item type of a parameterized List.
     *
     * ```
     * List<String> => (type) String
     * List<T> => (type parameter) T
     * ```
     *
     * @returns the item Type if this is a List, otherwise `undefined`.
     */
    getListItemType() {
        var _a, _b;
        return (_b = (_a = this.findNameInHierarchy(ast_1.AlexaSchema.List)) === null || _a === void 0 ? void 0 : _a.genericArguments) === null || _b === void 0 ? void 0 : _b[0];
    }
    /**
     * Check if this type is a sub-type (or same type) as a `baseType`.
     *
     * A type, `A` extends another type, `B` if `A & B == B`.
     *
     * In other words, the intersection of A and B should be exactly B.
     *
     * @param baseType base type
     */
    extends(baseType) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        if (baseType === undefined) {
            return false;
        }
        if (this.isNothing()) {
            // Nothing is a sub type of all Things
            return true;
        }
        if (baseType.isThing()) {
            // Thing is the base type of all Things.
            return true;
        }
        if (this.isVoid() && baseType.isOptional()) {
            return true;
        }
        if (this.isVoid() && baseType.isNothing()) {
            // for backwards compatibility, we will equate `Nothing` and `Void`.
            return true;
        }
        if ((((_a = this.declaration) === null || _a === void 0 ? void 0 : _a.kind) === "ActionDeclaration" && ((_b = baseType.declaration) === null || _b === void 0 ? void 0 : _b.kind) === "ActionDeclaration") ||
            (((_c = this.declaration) === null || _c === void 0 ? void 0 : _c.kind) === "DialogDeclaration" && ((_d = baseType.declaration) === null || _d === void 0 ? void 0 : _d.kind) === "DialogDeclaration")) {
            // if we are comparing literal actions/dialogs, then their name must be identical regardless of compatibility
            // we still uphold nominal rules when comparing static references.
            return ((_e = this.declaration.name) === null || _e === void 0 ? void 0 : _e.name) === ((_f = baseType.declaration.name) === null || _f === void 0 ? void 0 : _f.name);
        }
        if (this.isFunctionN() && baseType.isFunctionN()) {
            if (baseType.isAction() && !this.isAction()) {
                return false;
            }
            if (baseType.isDialog() && !this.isDialog()) {
                return false;
            }
            const thisArgs = (_g = this.getFunctionN()) === null || _g === void 0 ? void 0 : _g.getFunctionArgumentTypes();
            const baseTypeArgs = (_h = baseType.getFunctionN()) === null || _h === void 0 ? void 0 : _h.getFunctionArgumentTypes();
            if (!((_k = (_j = this.getFunctionReturnType()) === null || _j === void 0 ? void 0 : _j.extends(baseType.getFunctionReturnType())) !== null && _k !== void 0 ? _k : false)) {
                // return types are co-variant, this function's return type must extend the base function's return type
                return false;
            }
            // Lengths are different, lets check the extraneous arguments in baseType and ensure they're optional
            if ((thisArgs === null || thisArgs === void 0 ? void 0 : thisArgs.length) !== (baseTypeArgs === null || baseTypeArgs === void 0 ? void 0 : baseTypeArgs.length) && (baseTypeArgs === null || baseTypeArgs === void 0 ? void 0 : baseTypeArgs.length)) {
                const startArgPos = (_l = thisArgs === null || thisArgs === void 0 ? void 0 : thisArgs.length) !== null && _l !== void 0 ? _l : 0;
                for (let i = startArgPos; i < baseTypeArgs.length; i++) {
                    if (!baseTypeArgs[i].isOptional() || !baseTypeArgs[i].isArgs()) {
                        return false;
                    }
                }
            }
            return ((_m = thisArgs === null || thisArgs === void 0 ? void 0 : thisArgs.map((thisArg, i) => {
                const otherArg = baseTypeArgs === null || baseTypeArgs === void 0 ? void 0 : baseTypeArgs[i];
                if (otherArg === undefined) {
                    return thisArg.isOptional() || thisArg.isArgs();
                }
                // arguments are contra-variant, the base type's argument must be a super-type of this function's argument.
                return otherArg.extends(thisArg);
            }).reduce((a, b) => a && b, true)) !== null && _m !== void 0 ? _m : false);
        }
        if (((_o = this.name) === null || _o === void 0 ? void 0 : _o.name) === ((_p = baseType.name) === null || _p === void 0 ? void 0 : _p.name)) {
            if (this.genericArguments) {
                if (this.genericArguments.length === ((_q = baseType.genericArguments) === null || _q === void 0 ? void 0 : _q.length)) {
                    return this.genericArguments.find((genericArg, i) => (genericArg === null || genericArg === void 0 ? void 0 : genericArg.extends(baseType === null || baseType === void 0 ? void 0 : baseType.genericArguments[i])) !== true) === undefined;
                }
                return false;
            }
            return true;
        }
        // Check optional types, we currently allow Optional<T> as assignable to T.
        if (baseType.isOptional()) {
            return this.extends(baseType.getOptionalType());
        }
        else if (this.isOptional()) {
            return (_s = (_r = this.getOptionalType()) === null || _r === void 0 ? void 0 : _r.extends(baseType)) !== null && _s !== void 0 ? _s : false;
        }
        return ((_t = this.extensions) === null || _t === void 0 ? void 0 : _t.find((extension) => (extension === null || extension === void 0 ? void 0 : extension.extends(baseType)) === true)) !== undefined;
    }
    /**
     * Check if two instantiated types are identical.
     *
     * @param other
     */
    equals(other) {
        var _a;
        if (this.name !== undefined && this.name === other.name) {
            if (this.genericArguments !== undefined && this.genericArguments.length === ((_a = other.genericArguments) === null || _a === void 0 ? void 0 : _a.length)) {
                for (let i = 0; i < this.genericArguments.length; i++) {
                    const _this = this.genericArguments[i];
                    const _other = other.genericArguments[i];
                    if (_this === undefined || _other === undefined) {
                        return false;
                    }
                    if (!_this.equals(_other)) {
                        return false;
                    }
                }
            }
            return true;
        }
        return false;
    }
    /**
     * Get the union of this type and another. We only have limited support for unions at this time.
     *
     * Rules:
     * 1. Void | Void = Void
     * 2. Nothing | T = T
     * 3. Void | T = Optional<T>
     * 4. Optional<T> | T = Optional<T>
     * 5. A | B = A & B
     *
     * RE: Rule #5 - when two non-Optional or Void types are unioned, we take their intersection. I.e. we
     * reduce their type to their most common denominator. We will change this once we add full support for
     * union types.
     *
     * @param other other type to union this type with
     * @returns the unioned type.
     */
    union(other) {
        var _a, _b;
        if (other === undefined) {
            return this;
        }
        if (this.equals(other)) {
            return this;
        }
        if (this.isNothing()) {
            return other;
        }
        if (other === null || other === void 0 ? void 0 : other.isNothing()) {
            return this;
        }
        if (this.isVoid() && (other === null || other === void 0 ? void 0 : other.isVoid())) {
            return this;
        }
        if (this.isVoid()) {
            return new Type(this.checker, this.checker.lookupTypeDeclaration(ast_1.AlexaSchema.Optional), [other]);
        }
        if (other.isVoid()) {
            return new Type(this.checker, this.checker.lookupTypeDeclaration(ast_1.AlexaSchema.Optional), [this]);
        }
        if (this.isOptional()) {
            return this.checker.void.union((_a = this.getOptionalType()) === null || _a === void 0 ? void 0 : _a.union(other));
        }
        if (other.isOptional()) {
            return this.checker.void.union((_b = other.getOptionalType()) === null || _b === void 0 ? void 0 : _b.union(this));
        }
        return this.intersect(other);
        // return this.getIntersection(other);
    }
    intersect(other) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        if (this.isNothing() || (other === null || other === void 0 ? void 0 : other.isNothing())) {
            return this.checker.nothing;
        }
        if (other === undefined) {
            return undefined;
        }
        if (((_a = this.name) === null || _a === void 0 ? void 0 : _a.name) === ((_b = other.name) === null || _b === void 0 ? void 0 : _b.name)) {
            if (((_c = this.genericArguments) === null || _c === void 0 ? void 0 : _c.length) === 0 && ((_d = other.genericArguments) === null || _d === void 0 ? void 0 : _d.length) === 0) {
                return this;
            }
            if (((_e = this.genericArguments) === null || _e === void 0 ? void 0 : _e.length) === ((_f = other.genericArguments) === null || _f === void 0 ? void 0 : _f.length)) {
                const genericArguments = (_g = this.genericArguments) === null || _g === void 0 ? void 0 : _g.map((genericArg, i) => { var _a, _b; return (_b = genericArg === null || genericArg === void 0 ? void 0 : genericArg.intersect((_a = other.genericArguments) === null || _a === void 0 ? void 0 : _a[i])) !== null && _b !== void 0 ? _b : this.checker.thing; });
                return new Type(this.checker, this.declaration, genericArguments);
            }
        }
        else if (this.extends(other)) {
            for (const ext of (_h = this.extensions) !== null && _h !== void 0 ? _h : []) {
                if (ext.extends(other)) {
                    return ext.intersect(other);
                }
            }
        }
        else if (other.extends(this)) {
            for (const ext of (_j = other.extensions) !== null && _j !== void 0 ? _j : []) {
                if (ext.extends(this)) {
                    return ext.intersect(this);
                }
            }
        }
        else {
            for (const thisExt of (_k = this.extensions) !== null && _k !== void 0 ? _k : []) {
                for (const otherExt of (_l = other.extensions) !== null && _l !== void 0 ? _l : []) {
                    if (thisExt.extends(otherExt)) {
                        return thisExt.intersect(otherExt);
                    }
                }
            }
        }
        return this.checker.thing;
    }
    narrow(other) {
        if (other === undefined) {
            return this;
        }
        if (other.extends(this)) {
            // if the other type is more narrow, choose it
            return other;
        }
        if (this.extends(other)) {
            // if this type is more general, choose the other
            return this;
        }
        // these types have no intersection, this case is impossible.
        return this.checker.nothing;
    }
    /**
     * Find all locales this type support
     * E.G.
     * assume slotType deOnlySlot is only available in de_DE IM, sloType commonSlotType exist in both de_DE and en_US IM
     * ```
     * type myType {
     *  optional String id
     *  optional deOnlySlot german
     * }
     * getLocales() => ["de_DE"]
     * ```
     *
     * when type have nested type
     * ```
     * type complexType {
     *   myType name1
     *   optional commonSlotType name2
     * }
     *
     * getLocales() => ["de_DE"]
     * // only return de_DE cause this is the only overlap part of deOnlySlot and commonSlotType
     * ```
     * @returns
     */
    getLocales() {
        if (__classPrivateFieldGet(this, _Type_locales, "f") !== undefined) {
            return __classPrivateFieldGet(this, _Type_locales, "f");
        }
        const slotTypes = new Set();
        const seen = new Set();
        // Find all slotTypes this type depends on
        if (this.isSlotType()) {
            slotTypes.add(this.declaration);
        }
        else {
            // recursively look up the child types
            (0, visit_1.visitEachChildType)(this, function collectSlotType(type) {
                var _a;
                if (type.declaration && !seen.has(type.toString())) {
                    seen.add(type.toString());
                    if (((_a = type.declaration) === null || _a === void 0 ? void 0 : _a.kind) === "SlotType") {
                        slotTypes.add(type.declaration);
                    }
                    (0, visit_1.visitEachChildType)(type, collectSlotType);
                }
            });
        }
        // calculate the overlap locales that all slotTypes support
        let locales;
        for (const slotType of slotTypes.values()) {
            if (!locales) {
                locales = [...slotType.locales];
            }
            else {
                locales = locales.filter((locale) => slotType.locales.includes(locale));
            }
        }
        __classPrivateFieldSet(this, _Type_locales, locales, "f");
        return __classPrivateFieldGet(this, _Type_locales, "f");
    }
    /**
     * Gets a map of required property names to properties in this.properties
     * @returns a map of required property names to properties in this.properties
     */
    getRequiredProperties() {
        var _a;
        return new Map((_a = this.properties) === null || _a === void 0 ? void 0 : _a.reduce((acc, property) => {
            var _a, _b, _c;
            if (((_a = property.type) === null || _a === void 0 ? void 0 : _a.isOptional()) || (((_b = property.declaration) === null || _b === void 0 ? void 0 : _b.kind) === "TypeProperty" && ((_c = property.declaration) === null || _c === void 0 ? void 0 : _c.optional) === true)) {
                return acc;
            }
            acc.push([property.name, property]);
            return acc;
        }, []));
    }
    /**
     * Gets a map of property names to corresponding properties
     * @returns a map of property names to corresponding properties
     */
    getPropertyMap() {
        var _a;
        return new Map(((_a = this.properties) !== null && _a !== void 0 ? _a : []).map((property) => [property.name, property]));
    }
    /**
     * Retrieves generic arguments nested in a Type declaration of the form Apply<Optional<T>,K>.
     * For such type this will return an array with two elements, a type object corresponding to T
     * and a type object corresponding to K.
     */
    getNestedGenericArguments() {
        var _a, _b;
        // This is the recursion termination case for when we reach T in  Action1<Optional<T>, Nothing>
        if (((_a = this.declaration) === null || _a === void 0 ? void 0 : _a.kind) === "TypeParameter") {
            return [this];
        }
        const typeGenericArguments = (_b = this.genericArguments) !== null && _b !== void 0 ? _b : [];
        if (typeGenericArguments.length === 0) {
            // This is a special case found in Action1<Optional<T>, Nothing>. Nothing has no
            // nested generic arguments so we just return a type object corresponding to Nothing
            return [this];
        }
        // Call getNestedGenericArguments recursively on each of this.genericArguents
        const returnValue = [];
        for (const typeGenericArgument of typeGenericArguments) {
            if (!typeGenericArgument) {
                continue;
            }
            returnValue.push(...typeGenericArgument.getNestedGenericArguments());
        }
        return returnValue;
    }
}
exports.Type = Type;
_Type_environment = new WeakMap(), _Type_extensions = new WeakMap(), _Type_properties = new WeakMap(), _Type_propertiesIndex = new WeakMap(), _Type_locales = new WeakMap();
//# sourceMappingURL=data:application/json;base64,