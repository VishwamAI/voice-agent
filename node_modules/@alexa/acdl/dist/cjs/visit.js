"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformEachChild = exports.collectArray = exports.collect = exports.visitEachChildType = exports.visitEachChild = void 0;
const ask = __importStar(require("./ast"));
/**
 * Visit each child in a Node and call a callback to process it.
 *
 * This function is a general purpose tool for building other recursive search functions.
 *
 * @param node node to visit each child of
 * @param fn function to call with each child node
 */
function visitEachChild(expr, fn) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    if (expr !== undefined) {
        if (expr.kind === "ActionDeclaration" || expr.kind === "DialogDeclaration") {
            visit(expr.returnType);
            (_a = expr.genericArguments) === null || _a === void 0 ? void 0 : _a.forEach(visit);
            (_b = expr.arguments) === null || _b === void 0 ? void 0 : _b.forEach(visit);
            if (expr.kind === "DialogDeclaration") {
                (_c = expr.samples) === null || _c === void 0 ? void 0 : _c.forEach(visit);
            }
        }
        else if (expr.kind === "Argument") {
            visit(expr.value);
        }
        else if (expr.kind === "ArgumentDeclaration") {
            visit(expr.type);
            visit(expr.defaultExpression);
        }
        else if (expr.kind === "Call") {
            if (Array.isArray(expr.arguments)) {
                expr.arguments.forEach(visit);
            }
            else if (ask.isListLiteral(expr.arguments)) {
                visit(expr.arguments);
            }
            (_d = expr.genericArguments) === null || _d === void 0 ? void 0 : _d.forEach(visit);
        }
        else if (expr.kind === "Condition") {
            visit(expr.when);
            visit(expr.then);
            visit(expr.else);
        }
        else if (expr.kind === "ListItem") {
            visit(expr.item);
        }
        else if (expr.kind === "ListLiteral") {
            (_e = expr.items) === null || _e === void 0 ? void 0 : _e.forEach(visit);
        }
        else if (expr.kind === "Module") {
            (_f = expr.expressions) === null || _f === void 0 ? void 0 : _f.forEach(visit);
        }
        else if (expr.kind === "NameDeclaration") {
            visit(expr.expression);
            visit(expr.type);
        }
        else if (expr.kind === "NameReference") {
        }
        else if (expr.kind === "PropertyReference") {
            visit(expr.expression);
        }
        else if (expr.kind === "Sample") {
            visit(expr.scope);
        }
        else if (expr.kind === "Block") {
            (_g = expr.expressions) === null || _g === void 0 ? void 0 : _g.forEach(visit);
        }
        else if (expr.kind === "TypeDeclaration") {
            (_h = expr.extensions) === null || _h === void 0 ? void 0 : _h.forEach(visit);
            (_j = expr.genericArguments) === null || _j === void 0 ? void 0 : _j.forEach(visit);
            (_k = expr.properties) === null || _k === void 0 ? void 0 : _k.forEach(visit);
        }
        else if (expr.kind === "TypeParameter") {
            (_l = expr.constraints) === null || _l === void 0 ? void 0 : _l.forEach(visit);
        }
        else if (expr.kind === "TypeProperty") {
            visit(expr.type);
        }
        else if (expr.kind === "TypeReference") {
            (_m = expr.arguments) === null || _m === void 0 ? void 0 : _m.forEach(visit);
        }
    }
    function visit(node) {
        if (node !== undefined) {
            fn(node);
        }
    }
}
exports.visitEachChild = visitEachChild;
/**
 * Visit each property type and type's generic type in a Type and call a callback to process it.
 *
 * This function is a general purpose tool for building other recursive search functions.
 *
 * E.G.
 * ```
 * type myType {
 *   type1 id
 *   optional type2 name
 *   List<type3> hobbies
 * }
 *
 * visitEachChildType(myType) will visit [type1, Optional<type2>, List<type3>]
 *
 * visitEachChildType(List<type3>) will visit [type3]
 * ```
 * ```
 *
 * @param Type type to visit each child of
 * @param fn function to call with each child node
 */
function visitEachChildType(type, fn) {
    if (type !== undefined) {
        if (type.properties) {
            // if type have property, visit each properties' type
            type.properties.forEach((property) => {
                visit(property.type);
            });
        }
        if (type === null || type === void 0 ? void 0 : type.genericArguments) {
            // if type have generic type, visit each generic type
            type === null || type === void 0 ? void 0 : type.genericArguments.forEach((genericArgument) => {
                visit(genericArgument);
            });
        }
    }
    function visit(type) {
        if (type !== undefined) {
            fn(type);
        }
    }
}
exports.visitEachChildType = visitEachChildType;
/**
 * generic collect function
 * This function visit all child of the input Node, use provided fn to find target
 * and use provided reduce function to combine all found
 * @param node The Node where to collect target
 * @param fn function used to find target in the given Node
 * @param reduce function used to combine all founds
 * @param zero the initial result
 * @returns all the found targets after combination
 */
function collect(node, fn, reduce, zero) {
    let tmp = zero;
    visitEachChild(node, (n) => {
        tmp = reduce(tmp, fn(n));
    });
    return tmp;
}
exports.collect = collect;
/**
 * visit all child of a Node and collect all target in an array
 * @param node The Node where to collect target
 * @param fn function used to find target in the given Node
 * @returns an array of target
 */
function collectArray(node, fn) {
    return collect(node, fn, (a, b) => a.concat(b), []);
}
exports.collectArray = collectArray;
/**
 * Visit each child in a Node and transform it with the provided callback.
 *
 * This function is a general purpose tool for building other recursive compilation passes.
 *
 * @param node node to visit each child of
 * @param fn function to call with each child node
 */
function transformEachChild(expr, fn) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
    if (expr !== undefined) {
        if (expr.kind === "ActionDeclaration" || expr.kind === "DialogDeclaration") {
            const returnType = visit(expr.returnType);
            const genericArguments = (_a = expr.genericArguments) === null || _a === void 0 ? void 0 : _a.map(visit);
            const args = (_b = expr.arguments) === null || _b === void 0 ? void 0 : _b.map(visit);
            const annotations = (_c = expr.annotations) === null || _c === void 0 ? void 0 : _c.map(visit);
            if (expr.kind === "DialogDeclaration") {
                const samples = (_d = expr.samples) === null || _d === void 0 ? void 0 : _d.map(visit);
                return new ask.DialogDeclaration(visit(expr.name), args, samples, returnType, genericArguments, annotations, expr.loc);
            }
            return new ask.ActionDeclaration(visit(expr.name), args, returnType, genericArguments, annotations, expr.loc);
        }
        if (expr.kind === "Argument") {
            return new ask.Argument(visit(expr.name), expr.index, visit(expr.value), expr.loc);
        }
        if (expr.kind === "ArgumentDeclaration") {
            return new ask.ArgumentDeclaration(visit(expr.name), visit(expr.type), visit(expr.defaultExpression), (_e = expr.annotations) === null || _e === void 0 ? void 0 : _e.map(visit), expr.loc);
        }
        if (expr.kind === "Call") {
            let args;
            if (Array.isArray(expr.arguments)) {
                args = expr.arguments.map(visit);
            }
            else if (ask.isListLiteral(expr.arguments)) {
                args = visit(expr.arguments);
            }
            else {
                args = expr.arguments;
            }
            return new ask.Call(visit(expr.name), args, (_f = expr.genericArguments) === null || _f === void 0 ? void 0 : _f.map(visit), (_g = expr.annotations) === null || _g === void 0 ? void 0 : _g.map(visit), expr.loc);
        }
        if (expr.kind === "Condition") {
            return new ask.Condition(visit(expr.when), visit(expr.then), visit(expr.else), (_h = expr.annotations) === null || _h === void 0 ? void 0 : _h.map(visit), expr.loc);
        }
        if (expr.kind === "ListItem") {
            return new ask.ListItem(visit(expr.item), expr.index, expr.loc);
        }
        if (expr.kind === "ListLiteral") {
            return new ask.ListLiteral((_j = expr.items) === null || _j === void 0 ? void 0 : _j.map(visit), expr.loc);
        }
        if (expr.kind === "Module") {
            return new ask.Module(expr.uri, expr.schema, (_k = expr.namespace) === null || _k === void 0 ? void 0 : _k.clone(), (_l = expr.imports) === null || _l === void 0 ? void 0 : _l.map((i) => i.clone()), expr.exports, (_m = expr.expressions) === null || _m === void 0 ? void 0 : _m.map(visit), expr.loc);
        }
        if (expr.kind === "NameDeclaration") {
            return new ask.NameDeclaration(visit(expr.name), visit(expr.type), visit(expr.expression), (_o = expr.annotations) === null || _o === void 0 ? void 0 : _o.map(visit), expr.loc);
        }
        if (expr.kind === "NameReference") {
            return new ask.NameReference(visit(expr.name), (_p = expr.annotations) === null || _p === void 0 ? void 0 : _p.map(visit), expr.loc);
        }
        if (expr.kind === "PropertyReference") {
            return new ask.PropertyReference(visit(expr.name), visit(expr.expression), (_q = expr.annotations) === null || _q === void 0 ? void 0 : _q.map(visit), expr.loc);
        }
        if (expr.kind === "Sample") {
            return new ask.Sample(visit(expr.scope), (_r = expr.annotations) === null || _r === void 0 ? void 0 : _r.map(visit), expr.loc);
        }
        if (expr.kind === "Block") {
            const clazz = expr instanceof ask.ThenScope ? ask.ThenScope : expr instanceof ask.ElseScope ? ask.ElseScope : ask.Block;
            return new clazz((_s = expr.expressions) === null || _s === void 0 ? void 0 : _s.map(visit), expr.loc);
        }
        if (expr.kind === "TypeDeclaration") {
            return new ask.TypeDeclaration(visit(expr.name), (_t = expr.properties) === null || _t === void 0 ? void 0 : _t.map(visit), (_u = expr.genericArguments) === null || _u === void 0 ? void 0 : _u.map(visit), (_v = expr.extensions) === null || _v === void 0 ? void 0 : _v.map(visit), (_w = expr.annotations) === null || _w === void 0 ? void 0 : _w.map(visit), expr.loc);
        }
        if (expr.kind === "TypeParameter") {
            return new ask.TypeParameter(visit(expr.name), (_x = expr.constraints) === null || _x === void 0 ? void 0 : _x.map(visit), expr.loc);
        }
        if (expr.kind === "TypeProperty") {
            return new ask.TypeProperty(visit(expr.name), visit(expr.type), expr.optional, (_y = expr.annotations) === null || _y === void 0 ? void 0 : _y.map(visit), expr.loc);
        }
        if (expr.kind === "TypeReference") {
            return new ask.TypeReference(visit(expr.name), (_z = expr.arguments) === null || _z === void 0 ? void 0 : _z.map(visit), (_0 = expr.annotations) === null || _0 === void 0 ? void 0 : _0.map(visit), expr.functionArgumentNames, expr.loc);
        }
        return expr.clone();
    }
    return undefined;
    function visit(node) {
        if (node !== undefined) {
            return fn(node);
        }
        return undefined;
    }
}
exports.transformEachChild = transformEachChild;
//# sourceMappingURL=data:application/json;base64,