"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseLocation = exports.parseQualifiedName = exports.parseIdentifierLocation = exports.parseIdentifier = exports.parseNameDeclaration = exports.parseArgumentDeclaration = exports.parseArgumentDeclarations = exports.parseFunctionSignature = exports.parseActionDeclaration = exports.parseListIndex = exports.parseList = exports.parseObjectProperty = exports.parseObject = exports.parseInOperator = exports.parseIsOperator = exports.createLiteral = exports.parseLiteral = exports.parseArgumentValue = exports.parseCall = exports.parseBooleanOperator = exports.parseBinaryExpression = exports.parseCorrection = exports.parseCondition = exports.parsePropertyReference = exports.parseNameReference = exports.parseExpression = exports.parseInteractionDeclaration = exports.parseScopeExpression = exports.parseScope = exports.parseSampleDeclaration = exports.parseDialogDeclaration = exports.parseNamespaceDeclaration = exports.parseTypeProperty = exports.parseTypeReference = exports.parseTypeArgumentDeclaration = exports.parseTypeArgumentDeclarations = exports.parseTypeDeclaration = exports.parseAnnotationList = exports.parseEnumItem = exports.parseEnumDeclaration = exports.parseModuleLevelNameDeclaration = exports.parseACDLFile = exports.loadACDLFile = exports.loadACDLFileSync = exports.loadModuleFile = exports.loadModuleFileSync = exports.ParseContext = exports.Counter = void 0;
const antlr = __importStar(require("antlr4ts"));
const acdl = __importStar(require("./syntax"));
const ask = __importStar(require("./ast"));
const source_file_1 = require("./source-file");
const try_1 = require("./try");
const util_1 = require("./util");
const ast_1 = require("./ast");
const error_factory_1 = require("./error-factory");
class Counter {
    constructor(counter = 0) {
        Object.defineProperty(this, "counter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: counter
        });
    }
    nextId() {
        this.counter += 1;
        return this.counter;
    }
}
exports.Counter = Counter;
class ParseContext {
    constructor(uri, namespace, nameCounter, errors, scope, imports) {
        Object.defineProperty(this, "uri", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: uri
        });
        Object.defineProperty(this, "namespace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: namespace
        });
        Object.defineProperty(this, "nameCounter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: nameCounter
        });
        Object.defineProperty(this, "errors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: errors
        });
        Object.defineProperty(this, "scope", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: scope
        });
        Object.defineProperty(this, "imports", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: imports
        });
    }
    hasOptionalImported() {
        return (this.imports.find((i) => (i.kind === "ImportName" && i.name === ast_1.AlexaSchema.Optional) ||
            (i.kind === "ImportNamespace" && i.name === (0, util_1.getNamespace)(ast_1.AlexaSchema.Optional))) !== undefined);
    }
    withScope(scope) {
        return new ParseContext(this.uri, this.namespace, this.nameCounter, this.errors, scope, this.imports);
    }
    addError(err) {
        this.errors.push(err);
    }
    newName() {
        return `var${this.nameCounter.nextId()}`;
    }
}
exports.ParseContext = ParseContext;
/**
 * Load an ASK Module file from file system.
 *
 * @param baseDir base directory that contains this file, e.g. `src/` for `src/subdir/file.json`.
 * @param uri file path of the Module File
 * @returns source file of the module if it is a valid module, otherwise `undefined`.
 */
function loadModuleFileSync(baseDir, uri) {
    const json = (0, util_1.readJsonFileSync)((0, util_1.trimScheme)(uri));
    if ((json === null || json === void 0 ? void 0 : json.schema) === ask.ModuleSchema) {
        try {
            return (0, source_file_1.sourceFile)(baseDir, uri, ask.fromASKModule(json, uri));
        }
        catch (err) {
            console.log(`failed to load module file: ${uri}`);
            console.error(err);
            throw err;
        }
    }
    else {
        return undefined;
    }
}
exports.loadModuleFileSync = loadModuleFileSync;
/**
 * Load an ASK Module file from file system.
 *
 * @param baseDir base directory that contains this file, e.g. `src/` for `src/subdir/file.json`.
 * @param uri file path of the Module File
 * @returns source file of the module if it is a valid module, otherwise `undefined`.
 */
async function loadModuleFile(baseDir, uri) {
    const json = await (0, util_1.readJsonFile)((0, util_1.trimScheme)(uri));
    if ((json === null || json === void 0 ? void 0 : json.schema) === ask.ModuleSchema) {
        try {
            return (0, source_file_1.sourceFile)(baseDir, uri, ask.fromASKModule(json, uri));
        }
        catch (err) {
            console.log(`failed to load module file: ${uri}`);
            console.error(err);
            throw err;
        }
    }
    else {
        return undefined;
    }
}
exports.loadModuleFile = loadModuleFile;
/**
 * Load an ACDL file from the file system.
 *
 * @param baseDir base directory that contains this file, e.g. `src/` for `src/subdir/file.acdl`.
 * @param uri file path of the Module File
 * @param content optionally pass the ACDL string content already read from the file
 */
function loadACDLFileSync(dir, uri, content) {
    return (0, source_file_1.sourceFile)(dir, uri, ...parseACDLFile(uri, content !== null && content !== void 0 ? content : (0, util_1.readFileSync)(uri)));
}
exports.loadACDLFileSync = loadACDLFileSync;
/**
 * Load an ACDL file from the file system.
 *
 * @param baseDir base directory that contains this file, e.g. `src/` for `src/subdir/file.acdl`.
 * @param uri file path of the Module File
 * @param content optionally pass the ACDL string content already read from the file
 */
async function loadACDLFile(dir, uri, content) {
    return (0, source_file_1.sourceFile)(dir, uri, ...parseACDLFile(uri, content !== null && content !== void 0 ? content : (await (0, util_1.readFile)(uri))));
}
exports.loadACDLFile = loadACDLFile;
/**
 * Parse an ACDL file.
 *
 * @param content ACDL file content
 */
function parseACDLFile(uri, content) {
    const lexer = new acdl.ACDLLexer(antlr.CharStreams.fromString(content));
    const tokenStream = new antlr.CommonTokenStream(lexer);
    const parser = new acdl.ACDLParser(tokenStream);
    const errors = [];
    parser.removeErrorListeners();
    parser.addErrorListener({
        syntaxError: (recognizer, offendingSymbol, line, charPositionInLine, msg) => {
            errors.push(error_factory_1.ValidationErrorFactory.SyntaxError({
                expr: {
                    uri,
                    loc: {
                        begin: { line, character: charPositionInLine },
                        end: { line, character: charPositionInLine },
                    },
                },
                overrideMessage: msg,
            }));
        },
    });
    let module;
    try {
        const unit = parser.module();
        const nameCounter = new Counter();
        const imports = [];
        const namespaceNode = (0, try_1.Try)(() => unit.namespaceDeclaration())
            .flatMap((ns) => (0, try_1.Try)(() => ns === null || ns === void 0 ? void 0 : ns.qualifiedName()))
            .getOrDefault(undefined);
        const context = new ParseContext(uri, namespaceNode === null || namespaceNode === void 0 ? void 0 : namespaceNode.text, nameCounter, errors, [], imports);
        const namespace = new ask.Name(namespaceNode === null || namespaceNode === void 0 ? void 0 : namespaceNode.text, namespaceNode ? parseLocation(namespaceNode) : undefined);
        unit.moduleExpression().forEach((expr) => {
            if (expr.importDeclaration()) {
                imports.push(new ask.Import(expr.importDeclaration().ASTERISK() ? "ImportNamespace" : "ImportName", expr.importDeclaration().qualifiedName().text, parseLocation(expr)));
            }
        });
        const expressions = unit
            .moduleExpression()
            .map((expr) => {
            if (expr.actionDeclaration()) {
                return parseActionDeclaration(expr.actionDeclaration(), context);
            }
            if (expr.dialogDeclaration()) {
                return parseDialogDeclaration(expr.dialogDeclaration(), context);
            }
            if (expr.interactionDeclaration()) {
                return parseInteractionDeclaration(expr.interactionDeclaration(), context);
            }
            if (expr.qualifiedNameDeclaration()) {
                return parseNameDeclaration(expr.qualifiedNameDeclaration(), context);
            }
            if (expr.typeDeclaration()) {
                return parseTypeDeclaration(expr.typeDeclaration(), context);
            }
            if (expr.enumDeclaration()) {
                return parseEnumDeclaration(expr.enumDeclaration(), context);
            }
            if (expr.expression()) {
                return parseExpression(expr.expression(), context);
            }
            return undefined;
        })
            .filter((e) => e !== undefined);
        const exports = expressions.map((e) => { var _a; return e.kind !== "InteractionDeclaration" && ((_a = e === null || e === void 0 ? void 0 : e.name) === null || _a === void 0 ? void 0 : _a.name); }).filter((n) => n !== undefined);
        module = new ask.Module(uri, ask.ModuleSchema, namespace, imports, exports, expressions);
    }
    catch (err) {
        module = undefined;
    }
    return [module, errors || undefined];
}
exports.parseACDLFile = parseACDLFile;
/**
 * Parse the qualified name component of a module-level declaration.
 *
 * That include:
 * - ActionDeclaration
 * - DialogDeclaration
 * - QualifiedNameDeclaration
 * - TypeDeclaration
 */
function parseModuleLevelNameDeclaration(node, context) {
    let name = parseQualifiedName(node);
    if (name.name) {
        if (name.name.includes(".")) {
            name = new ask.Name(name.name, name.loc);
        }
        else if (context.namespace) {
            name = new ask.Name(`${context.namespace}.${name.name}`, name.loc);
        }
        else {
            name = new ask.Name(name.name, name.loc);
        }
    }
    return name;
}
exports.parseModuleLevelNameDeclaration = parseModuleLevelNameDeclaration;
function parseEnumDeclaration(type, context) {
    return new ask.EnumDeclaration(parseModuleLevelNameDeclaration(type.qualifiedName(), context), type.enumItem().map((id) => parseEnumItem(id, context)), parseAnnotationList(type.annotationList(), context), parseLocation(type));
}
exports.parseEnumDeclaration = parseEnumDeclaration;
function parseEnumItem(item, context) {
    return new ask.EnumItem(parseIdentifier(item.identifier()), parseAnnotationList(item.annotationList(), context), parseLocation(item));
}
exports.parseEnumItem = parseEnumItem;
function parseAnnotationList(annotationList, context) {
    var _a;
    const list = ((_a = annotationList === null || annotationList === void 0 ? void 0 : annotationList.annotation()) === null || _a === void 0 ? void 0 : _a.map((annotation) => new ask.Annotation(parseCall(annotation.call(), context)), undefined)) || undefined;
    if (list === undefined || list.length === 0) {
        return undefined;
    }
    return list;
}
exports.parseAnnotationList = parseAnnotationList;
function parseTypeDeclaration(type, context) {
    var _a;
    const name = parseModuleLevelNameDeclaration(type.qualifiedName(), context);
    return new ask.TypeDeclaration(name, (0, util_1.sanitize)((0, try_1.Try)(() => type.typeProperties())
        .flatMap((typeBody) => (0, try_1.Try)(() => typeBody === null || typeBody === void 0 ? void 0 : typeBody.typeProperty()).map((typeProperties) => typeProperties === null || typeProperties === void 0 ? void 0 : typeProperties.map((typeProperty) => parseTypeProperty(typeProperty, context))))
        .resolve(context)), (0, util_1.sanitize)(parseTypeArgumentDeclarations(type.typeArgumentDeclarations(), context)), (0, util_1.sanitize)((_a = type.typeConstraint()) === null || _a === void 0 ? void 0 : _a.map((e) => parseTypeReference(e.typeReference(), context))), parseAnnotationList(type.annotationList(), context), parseLocation(type));
}
exports.parseTypeDeclaration = parseTypeDeclaration;
function parseTypeArgumentDeclarations(args, context) {
    return args === null || args === void 0 ? void 0 : args.typeArgumentDeclaration().map((arg) => parseTypeArgumentDeclaration(arg, context));
}
exports.parseTypeArgumentDeclarations = parseTypeArgumentDeclarations;
function parseTypeArgumentDeclaration(arg, context) {
    var _a;
    return new ask.TypeParameter(parseIdentifier(arg.identifier()), (0, util_1.sanitize)((_a = arg.typeConstraint()) === null || _a === void 0 ? void 0 : _a.map((constraint) => parseTypeReference(constraint.typeReference(), context))), parseLocation(arg));
}
exports.parseTypeArgumentDeclaration = parseTypeArgumentDeclaration;
function parseTypeReference(reference, context) {
    var _a, _b;
    let loc;
    if (reference.typeArguments() === undefined) {
        loc = parseIdentifierLocation(reference.qualifiedName());
    }
    else {
        loc = parseLocation(reference);
    }
    return new ask.TypeReference((0, try_1.Try)(() => reference.qualifiedName())
        .map((name) => parseQualifiedName(name))
        .resolve(context), (0, util_1.sanitize)((_b = (_a = reference
        .typeArguments()) === null || _a === void 0 ? void 0 : _a.typeReference()) === null || _b === void 0 ? void 0 : _b.map((ref) => parseTypeReference(ref, context))), parseAnnotationList(reference.annotationList(), context), undefined, loc);
}
exports.parseTypeReference = parseTypeReference;
function parseTypeProperty(property, context) {
    return new ask.TypeProperty(property.identifier() ? parseIdentifier(property.identifier()) : undefined, (0, try_1.Try)(() => property.typeReference())
        .map((t) => parseTypeReference(t, context))
        .resolve(context), (0, try_1.Try)(() => property.OPTIONAL())
        .map((o) => !!o)
        .resolve(context), parseAnnotationList(property.annotationList(), context), parseLocation(property));
}
exports.parseTypeProperty = parseTypeProperty;
function parseNamespaceDeclaration(namespace, context) {
    return new ask.Name((0, try_1.Try)(() => namespace.qualifiedName())
        .map((name) => name.text)
        .resolve(context), parseLocation(namespace));
}
exports.parseNamespaceDeclaration = parseNamespaceDeclaration;
function parseDialogDeclaration(dialog, context) {
    const functionDecl = parseFunctionSignature(dialog.functionSignature(), context);
    return new ask.DialogDeclaration(functionDecl.name, functionDecl.args, (0, try_1.Try)(() => dialog.dialogScope())
        .flatMap((body) => (0, try_1.Try)(() => body === null || body === void 0 ? void 0 : body.sampleDeclaration()).map((samples) => (samples === null || samples === void 0 ? void 0 : samples.map((s) => parseSampleDeclaration(s, context))) || []))
        .resolve(context), functionDecl.returnType, functionDecl.genericArguments, parseAnnotationList(dialog.annotationList(), context), parseLocation(dialog));
}
exports.parseDialogDeclaration = parseDialogDeclaration;
function parseSampleDeclaration(sample, context) {
    return new ask.Sample((0, try_1.Try)(() => sample.block())
        .map((_) => parseScope(_, context, ask.Block))
        .resolve(context), parseAnnotationList(sample.annotationList(), context), parseLocation(sample));
}
exports.parseSampleDeclaration = parseSampleDeclaration;
function parseScope(body, context, ctor) {
    return (0, try_1.Try)(() => body.blockExpression())
        .map((expressions) => {
        const scopeExpressions = [];
        const scopeContext = context;
        for (const expr of expressions) {
            const parsedExpr = parseScopeExpression(expr, scopeContext);
            if (parsedExpr !== undefined) {
                scopeExpressions.push(parsedExpr); // TODO: assert
            }
        }
        return new ctor(scopeExpressions, parseLocation(body));
    })
        .resolve(context);
}
exports.parseScope = parseScope;
function parseScopeExpression(expr, context) {
    if (expr.nameDeclaration()) {
        return parseNameDeclaration(expr.nameDeclaration(), context);
    }
    if (expr.expression()) {
        return parseExpression(expr.expression(), context);
    }
    return undefined;
}
exports.parseScopeExpression = parseScopeExpression;
function parseInteractionDeclaration(expr, context) {
    return new ask.InteractionDeclaration((0, try_1.Try)(() => expr.block())
        .map((_) => parseScope(_, context, ask.InteractionScope))
        .resolve(context), parseAnnotationList(expr.annotationList(), context), parseLocation(expr));
}
exports.parseInteractionDeclaration = parseInteractionDeclaration;
function parseExpression(expr, context) {
    if (expr instanceof acdl.ParenthesizedExprContext) {
        return (0, try_1.Try)(() => expr.expression())
            .map((expr) => parseExpression(expr, context))
            .resolve(context);
    }
    if (expr instanceof acdl.LiteralExprContext || expr instanceof acdl.LiteralContext) {
        return parseLiteral(expr, context).resolve(context);
    }
    if (expr instanceof acdl.ObjectContext) {
        return (0, try_1.Try)(() => parseObject(expr, context)).resolve(context);
    }
    if (expr instanceof acdl.PropertyReferenceContext) {
        return parsePropertyReference(expr, context);
    }
    if (expr instanceof acdl.ListIndexContext) {
        return (0, try_1.Try)(() => parseListIndex(expr, context)).resolve(context);
    }
    if (expr instanceof acdl.CallExprContext) {
        return (0, try_1.Try)(() => parseCall(expr.call(), context)).resolve(context);
    }
    if (expr instanceof acdl.BinaryExprContext) {
        return parseBinaryExpression(expr, context).resolve(context);
    }
    if (expr instanceof acdl.NameDeclarationContext || expr instanceof acdl.QualifiedNameDeclarationContext) {
        return (0, try_1.Try)(() => parseNameDeclaration(expr, context)).resolve(context);
    }
    if (expr instanceof acdl.ConditionExprContext) {
        return (0, try_1.Try)(() => parseCondition(expr.condition(), context)).resolve(context);
    }
    if (expr instanceof acdl.CorrectionExprContext) {
        return (0, try_1.Try)(() => parseCorrection(expr.correction(), context)).resolve(context);
    }
    if (expr instanceof acdl.IdentifierExprContext) {
        return parseNameReference(expr, context);
    }
    if (expr instanceof acdl.IsExprContext) {
        return parseIsOperator(expr, context);
    }
    if (expr instanceof acdl.InExprContext) {
        return parseInOperator(expr, context);
    }
    const errorFactory = expr.text
        ? error_factory_1.ValidationErrorFactory.UnexpectedOperatorWithText
        : error_factory_1.ValidationErrorFactory.UnexpectedOperator;
    const error = errorFactory({
        expr: {
            uri: context.uri,
            loc: parseLocation(expr),
        },
        attributes: {
            expressionText: expr.text,
            constructorName: expr.constructor.name,
        },
    });
    context.addError(error);
    return undefined;
}
exports.parseExpression = parseExpression;
function parseNameReference(expr, context) {
    return new ask.NameReference(parseIdentifier(expr.identifier()), undefined, parseIdentifierLocation(expr.identifier()));
}
exports.parseNameReference = parseNameReference;
function parsePropertyReference(expr, context) {
    var _a, _b;
    const child = parseExpression(expr.expression(), context); // TODO: type check
    if (child === undefined) {
        return undefined;
    }
    const id = parseIdentifier(expr.identifier());
    const loc = parseLocation(expr);
    if (loc) {
        loc.end = (_b = (_a = id === null || id === void 0 ? void 0 : id.loc) === null || _a === void 0 ? void 0 : _a.end) !== null && _b !== void 0 ? _b : loc.end;
    }
    const prop = new ask.PropertyReference(id, child, undefined, loc);
    return prop;
}
exports.parsePropertyReference = parsePropertyReference;
function parseCondition(expr, context) {
    var _a, _b, _c, _d;
    const loc = parseLocation(expr);
    let elseScope;
    if (((_a = expr.otherwise()) === null || _a === void 0 ? void 0 : _a.condition()) !== undefined) {
        const elseIfCondition = parseCondition((_b = expr.otherwise()) === null || _b === void 0 ? void 0 : _b.condition(), context);
        elseScope = new ask.ElseScope(elseIfCondition ? [elseIfCondition] : undefined);
    }
    else if (((_c = expr.otherwise()) === null || _c === void 0 ? void 0 : _c.block()) !== undefined) {
        elseScope = parseScope((_d = expr.otherwise()) === null || _d === void 0 ? void 0 : _d.block(), context, ask.ElseScope);
    }
    return new ask.Condition(new ask.When((0, try_1.Try)(() => expr.expression())
        .map((when) => parseExpression(when, context))
        .resolve(context)), // TODO: check,
    (0, try_1.Try)(() => expr.block())
        .map((body) => (body ? parseScope(body, context, ask.ThenScope) : undefined))
        .resolve(context), elseScope, undefined, loc);
}
exports.parseCondition = parseCondition;
function parseCorrection(expr, context) {
    return new ask.Correction((0, try_1.Try)(() => expr.block(0))
        .map((blockContext) => parseScope(blockContext, context, ask.CorrectionScope))
        .resolve(context), (0, try_1.Try)(() => expr.block(1))
        .map((blockContext) => parseScope(blockContext, context, ask.CorrectionScope))
        .resolve(context), parseLocation(expr));
}
exports.parseCorrection = parseCorrection;
function parseBinaryExpression(expr, context) {
    const loc = parseLocation(expr);
    return (0, try_1.Try)(() => {
        if (expr._left) {
            return new ask.Call(new ask.Name(parseBooleanOperator(expr, context)), [asArgumentValue(expr._left, "left"), asArgumentValue(expr._right, "right")], undefined, undefined, loc);
        }
        if (expr.NOT()) {
            return new ask.Call(new ask.Name(ast_1.AlexaConversations.Not), [asArgumentValue(expr._right, "right")], undefined, undefined, loc);
        }
        throw [
            error_factory_1.ValidationErrorFactory.UnexpectedBooleanExpression({
                expr: {
                    loc,
                },
                attributes: {
                    expressionText: expr.text,
                },
            }),
        ];
    });
    function asArgumentValue(expr, name) {
        return new ask.Argument(new ask.Name(name), undefined, parseExpression(expr, context), parseLocation(expr));
    }
}
exports.parseBinaryExpression = parseBinaryExpression;
function parseBooleanOperator(expr, context) {
    var _a, _b, _c, _d, _e, _f;
    const loc = parseLocation(expr);
    if (expr.AND()) {
        return ast_1.AlexaConversations.And;
    }
    if (expr.OR()) {
        return ast_1.AlexaConversations.Or;
    }
    if ((_a = expr.relational()) === null || _a === void 0 ? void 0 : _a.GE()) {
        return ast_1.AlexaConversations.Gte;
    }
    if ((_b = expr.relational()) === null || _b === void 0 ? void 0 : _b.GT()) {
        return ast_1.AlexaConversations.Gt;
    }
    if ((_c = expr.relational()) === null || _c === void 0 ? void 0 : _c.LE()) {
        return ast_1.AlexaConversations.Lte;
    }
    if ((_d = expr.relational()) === null || _d === void 0 ? void 0 : _d.LT()) {
        return ast_1.AlexaConversations.Lt;
    }
    if ((_e = expr.equality()) === null || _e === void 0 ? void 0 : _e.EQUAL()) {
        return ast_1.AlexaConversations.Eq;
    }
    if ((_f = expr.equality()) === null || _f === void 0 ? void 0 : _f.NOTEQUAL()) {
        return ast_1.AlexaConversations.Neq;
    }
    context.addError(error_factory_1.ValidationErrorFactory.UnexpectedBooleanOperator({
        expr: {
            loc,
        },
        attributes: {
            expressionText: expr.text,
        },
    }));
    return undefined;
}
exports.parseBooleanOperator = parseBooleanOperator;
function parseCall(expr, context) {
    var _a, _b;
    const name = (0, try_1.Try)(() => expr.qualifiedName())
        .map((fqn) => parseQualifiedName(fqn))
        .resolve(context);
    const args = (0, try_1.Try)(() => expr.callArguments())
        .flatMap((list) => (0, try_1.Try)(() => list === null || list === void 0 ? void 0 : list.callArgument()).map((argumentList) => argumentList === null || argumentList === void 0 ? void 0 : argumentList.map((a, i) => parseArgumentValue(a, context, i))))
        .resolve(context);
    const genericArguments = (0, util_1.sanitize)((_b = (_a = expr
        .typeArguments()) === null || _a === void 0 ? void 0 : _a.typeReference()) === null || _b === void 0 ? void 0 : _b.map((ref) => parseTypeReference(ref, context)));
    return new ask.Call(name, args, genericArguments, undefined, parseLocation(expr));
}
exports.parseCall = parseCall;
function parseArgumentValue(argument, context, index) {
    const name = (0, try_1.Try)(() => argument.identifier())
        .map((i) => (i ? parseIdentifier(i) : undefined))
        .resolve(context);
    const value = (0, try_1.Try)(() => argument.expression())
        .map((expr) => parseExpression(expr, context))
        .resolve(context); // TODO: type-check
    const loc = name && name.loc && (value === null || value === void 0 ? void 0 : value.loc) ? ask.appendLocation(name.loc, value.loc) : value === null || value === void 0 ? void 0 : value.loc;
    return new ask.Argument(name, index, value, loc);
}
exports.parseArgumentValue = parseArgumentValue;
function parseLiteral(literal, context) {
    const literalValue = literal.text;
    const litLoc = parseLocation(literal);
    const loc = {
        begin: litLoc.begin,
        end: {
            line: litLoc.begin.line,
            character: litLoc.begin.character + literal.text.length,
        },
    };
    return (0, try_1.Try)(() => {
        var _a, _b;
        if (literal.null()) {
            return createLiteral(ast_1.AlexaSchema.Void, null, loc);
        }
        if (literal.nothing()) {
            return createLiteral(ast_1.AlexaSchema.Nothing, null, loc);
        }
        if (literal.string()) {
            const vars = (_a = literal.string()) === null || _a === void 0 ? void 0 : _a.var();
            const text = literalValue.slice(1, literalValue.length - 1);
            let value = text;
            if (vars && vars.length > 0) {
                value = new ask.Utterance(text, vars.map((v) => parseQualifiedName(v.qualifiedName())), parseLocation(literal));
            }
            return createLiteral(ast_1.AlexaSchema.String, value, loc);
        }
        if (literal.number()) {
            const num = !literalValue.includes(".") ? parseInt(literalValue, 10) : parseFloat(literalValue);
            return createLiteral(ast_1.AlexaSchema.Number, num, loc);
        }
        if (literal.bool()) {
            return createLiteral(ast_1.AlexaSchema.Boolean, ((_b = literal.bool()) === null || _b === void 0 ? void 0 : _b.text.toLocaleLowerCase()) === "true", loc);
        }
        if (literal.object()) {
            return parseObject(literal.object(), context);
        }
        if (literal.list()) {
            return parseList(literal.list(), context);
        }
        console.error(literal);
        throw new Error("unexpected node type");
    });
}
exports.parseLiteral = parseLiteral;
function createLiteral(type, value, loc) {
    return new ask.Call(new ask.Name(type), value, undefined, undefined, loc);
}
exports.createLiteral = createLiteral;
function parseIsOperator(expr, context) {
    return new ask.Call(new ask.Name(ast_1.AlexaConversations.is /* TODO: map the IS token to a source location */), [new ask.Argument(new ask.Name("thing"), 0, parseExpression(expr.expression(), context))], [parseTypeReference(expr.typeReference(), context)]);
}
exports.parseIsOperator = parseIsOperator;
function parseInOperator(expr, context) {
    return new ask.Call(new ask.Name(ast_1.AlexaConversations.in), [
        new ask.Argument(new ask.Name("entity"), 0, parseExpression(expr.expression(0), context)),
        new ask.Argument(new ask.Name("entities"), 0, parseExpression(expr.expression(1), context)),
    ]);
}
exports.parseInOperator = parseInOperator;
function parseObject(obj, context) {
    const objectType = (0, try_1.Try)(() => obj.typeReference())
        .map((type) => (type ? parseTypeReference(type, context) : undefined))
        .resolve(context);
    return new ask.Call(objectType === null || objectType === void 0 ? void 0 : objectType.name, (0, try_1.Try)(() => obj.objectKeyValue())
        .map((pairs) => pairs.map((pair) => parseObjectProperty(pair, context)))
        .resolve(context), objectType === null || objectType === void 0 ? void 0 : objectType.arguments, undefined, parseLocation(obj));
}
exports.parseObject = parseObject;
function parseObjectProperty(member, context) {
    const name = parseIdentifier(member.identifier());
    const expr = member.expression();
    const value = (expr === undefined
        ? // if no value is explicitly provided, default to a name reference
            // name = "hello"
            // person Person { name }
            // equiv. { name = name }
            new ask.NameReference(name, undefined, name.loc)
        : parseExpression(expr, context));
    return new ask.Argument(name, undefined, value, parseLocation(member));
}
exports.parseObjectProperty = parseObjectProperty;
/**
 * Parse a List literal to a call
 *
 * ```
 * list = ["a", "b"]
 * // or
 * list = List<String> ["a", "b"]
 *
 * // translates to an internal representations
 * alexa.lang.expression<List<String>>(items = ["a", "b"])
 * ```
 *
 * @param expr
 * @param parent
 * @param errors
 */
function parseList(expr, context) {
    const loc = parseLocation(expr);
    const list = new ask.ListLiteral(expr
        .expression()
        .map((expr, index) => new ask.ListItem(parseExpression(expr, context), index, parseLocation(expr))), loc);
    return new ask.Call(undefined, list, undefined, undefined, parseLocation(expr));
}
exports.parseList = parseList;
/**
 * Parse syntactic sugar for accessing a list.
 *
 * ```
 * List<String> list = ...
 *
 * // access a list by index 0
 * list[0]
 *
 * // is syntactic sugar for the `inList` action:
 * com.amazon.alexa.ask.conversations.inList(list = list, index = 0)
 * com.amazon.alexa.ask.conversations.inList(list, 0)
 * ```
 *
 * TODO: support accessing properties in a List.
 * ```
 * // how should we translate this?
 * c = list[0].a.b.c
 *
 * // perhaps generate a variable for the result of accessing the list
 * var1 = inList(list, 0)
 * // and then a name expression?
 * c = var1.a.b.c
 * ```
 *
 * @param expr syntax for the list
 * @param parent
 * @param errors
 */
function parseListIndex(expr, context) {
    const list = parseExpression(expr.expression(), context); // TODO: type-check
    const listArg = new ask.Argument(new ask.Name("list"), 0, list, parseLocation(expr));
    const indexNumber = (0, try_1.Try)(() => parseInt(expr.number().text, 10)).resolve(context);
    const indexLiteral = createLiteral(ast_1.AlexaSchema.Number, indexNumber, parseLocation(expr.number()));
    const indexArg = new ask.Argument(new ask.Name("index"), 1, indexLiteral);
    return new ask.Call(new ask.Name(ast_1.AlexaConversations.getListItem), [listArg, indexArg], undefined, undefined, parseLocation(expr));
}
exports.parseListIndex = parseListIndex;
function parseActionDeclaration(action, context) {
    const functionDecl = parseFunctionSignature(action.functionSignature(), context);
    return new ask.ActionDeclaration(functionDecl.name, functionDecl.args, functionDecl.returnType, functionDecl.genericArguments, parseAnnotationList(action.annotationList(), context), parseLocation(action));
}
exports.parseActionDeclaration = parseActionDeclaration;
function parseFunctionSignature(action, context, isTopLevel = true) {
    var _a, _b;
    let returnType;
    const _void = action.void();
    if (_void !== undefined || action.typeReference() === undefined) {
        returnType = new ask.TypeReference(new ask.Name(ast_1.AlexaSchema.Void), undefined, parseAnnotationList(_void === null || _void === void 0 ? void 0 : _void.annotationList(), context), undefined, _void ? parseLocation(_void) : undefined);
    }
    else {
        returnType = parseTypeReference(action.typeReference(), context);
    }
    const functionDecl = {
        name: isTopLevel
            ? parseModuleLevelNameDeclaration((_a = action.qualifiedName()) !== null && _a !== void 0 ? _a : action.identifier(), context)
            : parseQualifiedName((_b = action.qualifiedName()) !== null && _b !== void 0 ? _b : action.identifier()),
        // TODO: what to do with this?
        args: (0, try_1.Try)(() => action.argumentDeclarations())
            .map((p) => (p ? parseArgumentDeclarations(p, context) : undefined))
            .resolve(context),
        returnType,
        genericArguments: parseTypeArgumentDeclarations(action.typeArgumentDeclarations(), context),
    };
    return functionDecl;
}
exports.parseFunctionSignature = parseFunctionSignature;
function parseArgumentDeclarations(argumentDecls, context) {
    return argumentDecls.argumentDeclaration().map((p) => parseArgumentDeclaration(p, context));
}
exports.parseArgumentDeclarations = parseArgumentDeclarations;
function parseArgumentDeclaration(argument, context) {
    var _a, _b;
    const defaultExpression = ((_a = argument.argumentDefault()) === null || _a === void 0 ? void 0 : _a.expression())
        ? parseExpression(argument.argumentDefault().expression(), context)
        : undefined;
    const isOptional = argument.OPTIONAL() !== undefined || ((defaultExpression === null || defaultExpression === void 0 ? void 0 : defaultExpression.kind) === "Call" && ((_b = defaultExpression === null || defaultExpression === void 0 ? void 0 : defaultExpression.name) === null || _b === void 0 ? void 0 : _b.name) === ast_1.AlexaSchema.Nothing);
    if (argument.functionArgumentDeclaration()) {
        return parseFunctionArgumentDeclaration(argument.functionArgumentDeclaration());
    }
    if (argument.standardArgumentDeclaration()) {
        return parseStandardArgumentDeclaration(argument.standardArgumentDeclaration());
    }
    // fatal error, only these two options should be possible.
    throw new Error(`could not parse argument declaration: ${argument.text}`);
    function parseStandardArgumentDeclaration(argDecl) {
        var _a, _b;
        let type;
        if (isOptional) {
            if ((argDecl === null || argDecl === void 0 ? void 0 : argDecl.typeReference()) !== undefined) {
                const innerType = parseTypeReference(argDecl.typeReference(), context);
                if (((_a = innerType.name) === null || _a === void 0 ? void 0 : _a.name) === ast_1.AlexaSchema.Optional || (((_b = innerType.name) === null || _b === void 0 ? void 0 : _b.name) === "Optional" && context.hasOptionalImported())) {
                    // type is already Optional, flatten.
                    // innerType.parent = self;
                    type = innerType;
                }
                else {
                    type = new ask.TypeReference(new ask.Name(ast_1.AlexaSchema.Optional), [innerType], undefined, // innerType.annotations?.map((a) => a.clone()),
                    undefined);
                }
            }
            else {
                type = new ask.TypeReference(new ask.Name(ast_1.AlexaSchema.Optional), [new ask.TypeReference(new ask.Name(ast_1.AlexaSchema.Nothing), undefined, undefined, undefined)], undefined, undefined);
            }
        }
        else if (argDecl.typeReference() !== undefined) {
            type = parseTypeReference(argDecl.typeReference(), context);
        }
        else {
            type = new ask.TypeReference(new ask.Name(ast_1.AlexaSchema.Nothing), undefined, undefined);
        }
        return new ask.ArgumentDeclaration(argDecl.identifier() ? parseIdentifier(argDecl.identifier()) : undefined, type, defaultExpression, parseAnnotationList(argument.annotationList(), context), parseLocation(argument));
    }
    function parseFunctionArgumentDeclaration(fun) {
        var _a, _b, _c, _d, _e, _f, _g;
        const functionSignature = parseFunctionSignature(fun.functionSignature(), context, false);
        const functionArgumentNames = (_c = (_b = (_a = fun
            .functionSignature()
            .argumentDeclarations()) === null || _a === void 0 ? void 0 : _a.argumentDeclaration()) === null || _b === void 0 ? void 0 : _b.map((a, i) => {
            var _a, _b, _c, _d;
            // TODO: this is probably risky??? ACDL will give syntax error though ...
            const defaultArgName = `arg${i}`;
            if (a.standardArgumentDeclaration()) {
                return (_b = (_a = a.standardArgumentDeclaration().identifier()) === null || _a === void 0 ? void 0 : _a.text) !== null && _b !== void 0 ? _b : defaultArgName;
            }
            if (a.functionArgumentDeclaration()) {
                return (_d = (_c = a.functionArgumentDeclaration().functionSignature().identifier()) === null || _c === void 0 ? void 0 : _c.text) !== null && _d !== void 0 ? _d : defaultArgName;
            }
            return defaultArgName;
        })) !== null && _c !== void 0 ? _c : [];
        const functionArity = functionArgumentNames.length;
        const typeRefLoc = ((_d = functionSignature.name) === null || _d === void 0 ? void 0 : _d.loc)
            ? ask.betweenLocations(parseLocation(fun), (_e = functionSignature.name) === null || _e === void 0 ? void 0 : _e.loc)
            : parseLocation(fun);
        const typeRefName = fun.ACTION()
            ? (0, ast_1.ActionTypeName)(functionArity)
            : fun.DIALOG()
                ? (0, ast_1.DialogTypeName)(functionArity)
                : (0, ast_1.FunctionTypeName)(functionArity);
        const type = new ask.TypeReference(new ask.Name(typeRefName, typeRefLoc), [...((_g = (_f = functionSignature.args) === null || _f === void 0 ? void 0 : _f.map((arg) => arg.type /* use an object to represent undefined */)) !== null && _g !== void 0 ? _g : []), functionSignature.returnType], undefined, functionArgumentNames, typeRefLoc);
        return new ask.ArgumentDeclaration(functionSignature.name, isOptional ? new ask.TypeReference(new ask.Name(ast_1.AlexaSchema.Optional, type.loc), [type]) : type, defaultExpression, parseAnnotationList(argument.annotationList(), context));
    }
}
exports.parseArgumentDeclaration = parseArgumentDeclaration;
/**
 * Parse a name initialization expression.
 *
 * ```acdl
 * a = <expr>
 * ```
 *
 * @param nameDecl name parse tree
 * @param parent parent expression
 */
function parseNameDeclaration(nameDecl, context) {
    const name = nameDecl instanceof acdl.QualifiedNameDeclarationContext
        ? parseModuleLevelNameDeclaration(nameDecl.qualifiedName(), context)
        : parseIdentifier(nameDecl.identifier());
    const type = nameDecl.typeReference() ? parseTypeReference(nameDecl.typeReference(), context) : undefined;
    const expr = (0, try_1.Try)(() => nameDecl.expression())
        .map((expr) => parseExpression(expr, context))
        .resolve(context);
    return new ask.NameDeclaration(name, type, expr, nameDecl instanceof acdl.QualifiedNameDeclarationContext ? parseAnnotationList(nameDecl.annotationList(), context) : undefined, parseLocation(nameDecl));
}
exports.parseNameDeclaration = parseNameDeclaration;
/**
 * Parse an identifier.
 *
 * @param id identifier parse tree
 * @param context parse context
 */
function parseIdentifier(id) {
    return new ask.Name(id.text === "<missing IDENTIFIER>" ? undefined : id.text, parseIdentifierLocation(id));
}
exports.parseIdentifier = parseIdentifier;
function parseIdentifierLocation(id) {
    const location = parseLocation(id);
    const loc = {
        begin: {
            line: location.begin.line,
            character: location.begin.character,
        },
        end: {
            line: location.begin.line,
            character: location.begin.character + id.text.length,
        },
    };
    return loc;
}
exports.parseIdentifierLocation = parseIdentifierLocation;
/**
 * Parse a qualified name.
 *
 * @param name identifier or qualified name.
 * @param parent parent expression
 */
function parseQualifiedName(name, prefix = "") {
    const fullName = name.text;
    const lastDot = fullName.indexOf(".");
    const identifier = lastDot === -1 ? fullName : fullName.substring(lastDot + 1);
    const qualifier = lastDot === -1 ? undefined : fullName.substring(0, lastDot);
    // TODO: match name with regex and report errors.
    return new ask.Name(qualifier === undefined ? `${prefix}${identifier}` : `${qualifier}.${identifier}`, parseIdentifierLocation(name));
}
exports.parseQualifiedName = parseQualifiedName;
/**
 * Parse the location from a node in the parse tree.
 *
 * @param node parse tree node.
 */
function parseLocation(node) {
    var _a, _b;
    const begin = {
        line: node.start.line,
        character: node.start.charPositionInLine,
    };
    // Antlr only gives us the "start of token" position.
    // To get "end of token" position we need to add the token length,
    // plus we need to adjust the line and column if there are newlines in the token's text
    const stopTokenText = (_a = node.stop) === null || _a === void 0 ? void 0 : _a.text;
    const stopTokenLines = (stopTokenText === null || stopTokenText === void 0 ? void 0 : stopTokenText.split("\\n")) || [];
    // Stop token has no text - no adjustment is needed
    if ((Array.isArray(stopTokenLines) && stopTokenLines.length > 0) || ((_b = node.stop) === null || _b === void 0 ? void 0 : _b.type) === antlr.Token.EOF) {
        return {
            begin,
            end: {
                line: node.stop.line,
                character: node.stop.charPositionInLine + 1,
            },
        };
    }
    const lastLineLength = stopTokenLines[stopTokenLines.length - 1].length;
    const tokenEnd = stopTokenLines.length === 1 ? node.stop.charPositionInLine + stopTokenText.length : lastLineLength;
    return {
        begin,
        end: {
            line: node.stop.line + stopTokenLines.length - 1,
            character: tokenEnd + 1,
        },
    };
}
exports.parseLocation = parseLocation;
//# sourceMappingURL=data:application/json;base64,