"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasTerminalErrors = exports.nameNotFound = exports.typeError = exports.sortErrors = exports.filterDuplicateErrors = exports.stringifyLocation = exports.stringifyProjectError = exports.logProjectError = exports.logProjectWarnings = exports.logProjectErrors = void 0;
const path_1 = __importDefault(require("path"));
const error_factory_1 = require("./error-factory");
function logProjectErrors(errors) {
    errors.forEach(logProjectError);
}
exports.logProjectErrors = logProjectErrors;
function logProjectWarnings(errors) {
    if (errors !== undefined) {
        errors.filter((error) => error.code.category === "Warning" /* ErrorCategory.Warning */).forEach(logProjectError);
    }
}
exports.logProjectWarnings = logProjectWarnings;
function logProjectError(error) {
    console.error(stringifyProjectError(error));
}
exports.logProjectError = logProjectError;
function stringifyProjectError(error) {
    const errorStringArray = [];
    if (error.code.category === "Warning" /* ErrorCategory.Warning */) {
        errorStringArray.push(error.code.category);
    }
    if (error.loc && error.uri) {
        errorStringArray.push(stringifyLocation(error.uri, error.loc));
        // return `${error.code.category}: ${stringifyLocation(error.uri, error.loc)}: ${error.message}`;
    }
    errorStringArray.push(error.message);
    return errorStringArray.join(": ");
}
exports.stringifyProjectError = stringifyProjectError;
function stringifyLocation(errorUri, loc) {
    // print the error relative to the current working directory so that links in the terminal link directly to the file
    const uri = path_1.default.isAbsolute(errorUri) ? path_1.default.relative(process.cwd(), errorUri) : errorUri;
    if (loc) {
        return `${uri}(${loc.begin.line},${loc.begin.character})`;
    }
    return uri;
}
exports.stringifyLocation = stringifyLocation;
function filterDuplicateErrors(errors) {
    const seen = new Set();
    const e = errors.filter((err) => {
        if (err === undefined) {
            return false;
        }
        const str = `${err.message}${JSON.stringify(err.loc)}`;
        if (seen.has(str)) {
            return false;
        }
        seen.add(str);
        return true;
    });
    return e;
}
exports.filterDuplicateErrors = filterDuplicateErrors;
/**
 * Sort error array based on uri and loc
 * error without uri directly compare the loc
 * error with uri first compare uri then compare the loc
 * when loc are identical, compare the error message
 * @param errors
 * @returns
 */
function sortErrors(errors) {
    return errors.sort((a, b) => {
        if (a.uri === undefined && b.uri === undefined) {
            const result = compareLoc(a.loc, b.loc);
            return result === 0 ? compareMessage(a.message, b.message) : result;
        }
        if (a.uri === undefined) {
            return -1;
        }
        if (b.uri === undefined) {
            return 1;
        }
        if (a.uri > b.uri) {
            return 1;
        }
        if (a.uri < b.uri) {
            return -1;
        }
        const result = compareLoc(a.loc, b.loc);
        return result === 0 ? compareMessage(a.message, b.message) : result;
    });
    /**
     * compare two location
     * error without loc is placed before other errors
     * when loc is exist, compare the start and then end
     * @param firstLoc
     * @param secondLoc
     * @returns
     */
    function compareLoc(firstLoc, secondLoc) {
        if (firstLoc === undefined && secondLoc === undefined) {
            return -1;
        }
        if (firstLoc === undefined) {
            return -1;
        }
        if (secondLoc === undefined) {
            return 1;
        }
        return firstLoc.begin.line !== secondLoc.begin.line
            ? firstLoc.begin.line - secondLoc.begin.line
            : firstLoc.begin.character !== secondLoc.begin.character
                ? firstLoc.begin.character - secondLoc.begin.character
                : firstLoc.end.line !== secondLoc.end.line
                    ? firstLoc.end.line - secondLoc.end.line
                    : firstLoc.end.character - secondLoc.end.character;
    }
    function compareMessage(firstMessage, secondMessage) {
        if (firstMessage <= secondMessage) {
            return -1;
        }
        return 1;
    }
}
exports.sortErrors = sortErrors;
function typeError(actual, expected, scope, errorExpr) {
    return error_factory_1.ValidationErrorFactory.TypeError({
        expr: (0, error_factory_1.getExpressionIfLocField)(errorExpr, scope),
        attributes: {
            actualType: actual.toString(scope),
            expectedType: typeof expected === "string" ? expected : expected.toString(scope),
        },
    });
}
exports.typeError = typeError;
function nameNotFound(name) {
    return error_factory_1.ValidationErrorFactory.NameNotFound({
        expr: name,
        attributes: {
            name: typeof name === "string" ? name : name.name,
        },
    });
}
exports.nameNotFound = nameNotFound;
function hasTerminalErrors(errors) {
    return errors.some((error) => isTerminalError(error));
}
exports.hasTerminalErrors = hasTerminalErrors;
function isTerminalError(error) {
    return error.code.category !== "Warning" /* ErrorCategory.Warning */;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0RBQXdCO0FBRXhCLG1EQUFzSDtBQWV0SCxTQUFnQixnQkFBZ0IsQ0FBQyxNQUFzQjtJQUNyRCxNQUFNLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ2xDLENBQUM7QUFGRCw0Q0FFQztBQUVELFNBQWdCLGtCQUFrQixDQUFDLE1BQXVCO0lBQ3hELElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtRQUN4QixNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsMENBQTBCLENBQUMsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7S0FDbEc7QUFDSCxDQUFDO0FBSkQsZ0RBSUM7QUFFRCxTQUFnQixlQUFlLENBQUMsS0FBbUI7SUFDakQsT0FBTyxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQzlDLENBQUM7QUFGRCwwQ0FFQztBQUVELFNBQWdCLHFCQUFxQixDQUFDLEtBQW1CO0lBQ3ZELE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0lBQzVCLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLDBDQUEwQixFQUFFO1FBQ2pELGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQzVDO0lBQ0QsSUFBSSxLQUFLLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLEVBQUU7UUFDMUIsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDL0QsaUdBQWlHO0tBQ2xHO0lBRUQsZ0JBQWdCLENBQUMsSUFBSSxD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