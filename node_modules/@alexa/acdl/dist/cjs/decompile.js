"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decompileProject = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const print_1 = require("./print");
const transformUIProject_1 = require("./transformUIProject");
/**
 * Transforms source ASKIR JSON files into ACDL files.
 *
 * ACDL files are written directly alongside the original ASK JSON file.
 *
 * The original ASK JSON files are copied to the `build` directory configured in `package.json`.
 *
 * If ProjectVersion is UI, then:
 *
 * locale directories are flattened (for multi-locale only),
 *
 * file names and namespaces are updated (for multi-locale only),
 *
 * and skill action is created.
 *
 * @param project ACDL Project to decompile.
 * @param options optional options to customize the behavior of the decompile.
 */
async function decompileProject(project) {
    if (await (0, transformUIProject_1.isUISkill)(project)) {
        project = await (0, transformUIProject_1.transformUIProject)(project);
    }
    const checker = project.getTypeChecker();
    const updatedFiles = await Promise.all(project.sourceModules.map(async (src) => {
        if (src.uri.endsWith(".json")) {
            const outFile = src.uri.replace(".json", ".acdl").replace(".ask.acdl", ".acdl");
            // write the new ACDL file
            await fs_extra_1.default.writeFile(outFile, (0, print_1.printModule)(src.content, checker));
            await fs_extra_1.default.unlink(src.uri);
            return src.uri;
        }
        return undefined;
    }));
    return updatedFiles.filter((f) => f !== undefined);
}
exports.decompileProject = decompileProject;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb21waWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2RlY29tcGlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSx3REFBMEI7QUFDMUIsbUNBQW9DO0FBRXBDLDZEQUFtRTtBQVNuRTs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7QUFDSSxLQUFLLFVBQVUsZ0JBQWdCLENBQUMsT0FBZ0I7SUFDckQsSUFBSSxNQUFNLElBQUEsOEJBQVMsRUFBQyxPQUFPLENBQUMsRUFBRTtRQUM1QixPQUFPLEdBQUcsTUFBTSxJQUFBLHVDQUFrQixFQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzdDO0lBQ0QsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3pDLE1BQU0sWUFBWSxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FDcEMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ3RDLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDN0IsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFFaEYsMEJBQTBCO1lBQzFCLE1BQU0sa0JBQUUsQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLElBQUEsbUJBQVcsRUFBQyxHQUFHLENBQUMsT0FBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFFaEUsTUFBTSxrQkFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFekIsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDO1NBQ2hCO1FBQ0QsT0FBTyxTQUFVLENBQUM7SUFDcEIsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUVGLE9BQU8sWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLFNBQVMsQ0FBQyxDQUFDO0FBQ3JELENBQUM7QUF0QkQsNENBc0JDIn0=