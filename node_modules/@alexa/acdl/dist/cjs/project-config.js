"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadProjectConfig = exports.loadProjectConfigSync = void 0;
const path_1 = __importDefault(require("path"));
const package_1 = require("./package");
const util_1 = require("./util");
/**
 * Load a project from a directory on disk.
 *
 * We first look for a `package.json` with an `ask` section or an `ask.json` file at the `rootDir` and use
 * it as configuration if it exists.
 *
 * Otherwise we then check if there an `ask-resources.json` file pointing to a `skill-package` folder. Failing that,
 * we then look for a `skill-package` folder at the `rootDir`. In all of these cases, we default to a `1.0.0-beta1`
 * project configuration.
 *
 * @param rootDir path of the project containing `package.json` or `ask.json` configuration file.
 * @param profile ASK CLI profile to use when inspecting `ask-resources.json`.
 */
function loadProjectConfigSync(rootDir = process.cwd(), profile = "default") {
    var _a, _b, _c, _d;
    const pkgJson = (0, package_1.loadPackageConfigSync)(rootDir);
    if (pkgJson !== undefined) {
        return validateProjectConfig(rootDir, pkgJson);
    }
    const askResources = (0, util_1.readJsonFileSync)(path_1.default.join(rootDir, "ask-resources.json"));
    const skillPackagePath = path_1.default.join(rootDir, (_d = (_c = (_b = (_a = askResources === null || askResources === void 0 ? void 0 : askResources.profiles) === null || _a === void 0 ? void 0 : _a[profile]) === null || _b === void 0 ? void 0 : _b.skillMetadata) === null || _c === void 0 ? void 0 : _c.src) !== null && _d !== void 0 ? _d : "skill-package");
    if ((0, util_1.existsSync)(skillPackagePath)) {
        return {
            rootDir,
            srcDir: "conversations",
            outDir: "build",
            projectVersion: package_1.ProjectVersion.Beta1,
            sourceRootDir: skillPackagePath,
        };
    }
    throw new Error(`expected 'package.json', 'ask-resources.json' or 'skill-package/' to exist at location: '${rootDir}'`);
}
exports.loadProjectConfigSync = loadProjectConfigSync;
/**
 * Load a project from a directory on disk.
 *
 * We first look for a `package.json` with an `ask` section or an `ask.json` file at the `rootDir` and use
 * it as configuration if it exists.
 *
 * Otherwise we then check if there an `ask-resources.json` file pointing to a `skill-package` folder. Failing that,
 * we then look for a `skill-package` folder at the `rootDir`. In all of these cases, we default to a `1.0.0-beta1`
 * project configuration.
 *
 * @param rootDir path of the project containing `package.json` or `ask.json` configuration file.
 * @param profile ASK CLI profile to use when inspecting `ask-resources.json`.
 */
async function loadProjectConfig(rootDir = process.cwd(), profile = "default") {
    var _a, _b, _c, _d;
    const pkgJson = await (0, package_1.loadPackageConfig)(rootDir);
    if (pkgJson !== undefined) {
        return validateProjectConfig(rootDir, pkgJson);
    }
    const askResources = await (0, util_1.readJsonFile)(path_1.default.join(rootDir, "ask-resources.json"));
    const skillPackagePath = path_1.default.join(rootDir, (_d = (_c = (_b = (_a = askResources === null || askResources === void 0 ? void 0 : askResources.profiles) === null || _a === void 0 ? void 0 : _a[profile]) === null || _b === void 0 ? void 0 : _b.skillMetadata) === null || _c === void 0 ? void 0 : _c.src) !== null && _d !== void 0 ? _d : "skill-package");
    if (await (0, util_1.exists)(skillPackagePath)) {
        return {
            rootDir,
            srcDir: "conversations",
            outDir: "build",
            projectVersion: package_1.ProjectVersion.Beta1,
            sourceRootDir: skillPackagePath,
        };
    }
    throw new Error(`expected 'package.json', 'ask-resources.json' or 'skill-package/' to exist at location: '${rootDir}'`);
}
exports.loadProjectConfig = loadProjectConfig;
function validateProjectConfig(rootDir, packageConfig) {
    if (packageConfig === undefined) {
        throw new Error(`missing ASK configuration, did you forget to add an 'ask' section in your 'package.json' or as a separate file: 'ask.json'?`);
    }
    return {
        ...packageConfig.ask,
        name: packageConfig.name,
        rootDir,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvamVjdC1jb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJvamVjdC1jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0RBQXdCO0FBRXhCLHVDQUFxSDtBQUNySCxpQ0FBMEU7QUEwQzFFOzs7Ozs7Ozs7Ozs7R0FZRztBQUNILFNBQWdCLHFCQUFxQixDQUFDLFVBQWtCLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxVQUFrQixTQUFTOztJQUNoRyxNQUFNLE9BQU8sR0FBRyxJQUFBLCtCQUFxQixFQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRS9DLElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTtRQUN6QixPQUFPLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNoRDtJQUNELE1BQU0sWUFBWSxHQUFHLElBQUEsdUJBQWdCLEVBQXdCLGNBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLG9CQUFvQixDQUFDLENBQUMsQ0FBQztJQUN2RyxNQUFNLGdCQUFnQixHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQUEsTUFBQSxNQUFBLE1BQUEsWUFBWSxhQUFaLFlBQVksdUJBQVosWUFBWSxDQUFFLFFBQVEsMENBQUcsT0FBTyxDQUFDLDBDQUFFLGFBQWEsMENBQUUsR0FBRyxtQ0FBSSxlQUFlLENBQUMsQ0FBQztJQUN0SCxJQUFJLElBQUEsaUJBQVUsRUFBQyxnQkFBZ0IsQ0FBQyxFQUFFO1FBQ2hDLE9BQU87WUFDTCxPQUFPO1lBQ1AsTUFBTSxFQUFFLGVBQWU7WUFDdkIsTUFBTSxFQUFFLE9BQU87WUFDZixjQUFjLEVBQUUsd0JBQWMsQ0FBQyxLQUFLO1lBQ3BDLGFBQWEsRUFBRSxnQkFBZ0I7U0FDaEMsQ0FBQztLQUNIO0lBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyw0RkFBNEYsT0FBTyxHQUFHLENBQUMsQ0FBQztBQUMxSCxDQUFDO0FBbEJELHNEQWtCQztBQUVEOzs7Ozs7Ozs7Ozs7R0FZRztBQUNJLEtBQUssVUFBVSxpQkFBaUIsQ0FBQyxVQUFrQixPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsVUFBa0IsU0FBUzs7SUFDbEcsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFBLDJCQUFpQixFQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRWpELElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTtRQUN6QixPQUFPLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNoRDtJQUNELE1BQU0sWUFBWSxHQUFHLE1BQU0sSUFBQSxtQkFBWSxFQUF3QixjQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7SUFDekcsTUFBTSxnQkFBZ0IsR0FBRyxjQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFBLE1BQUEsTUFBQSxNQUFBLFlBQVksYUFBWixZQUFZLHVCQUFaLFlBQVksQ0FBRSxRQUFRLDBDQUFHLE9BQU8sQ0FBQywwQ0FBRSxhQUFhLDBDQUFFLEdBQUcsbUNBQUksZUFBZSxDQUFDLENBQUM7SUFDdEgsSUFBSSxNQUFNLElBQUEsYUFBTSxFQUFDLGdCQUFnQixDQUFDLEVBQUU7UUFDbEMsT0FBTztZQUNMLE9BQU87WUFDUCxNQUFNLEVBQUUsZUFBZTtZQUN2QixNQUFNLEVBQUUsT0FBTztZQUNmLGNBQWMsRUFBRSx3QkFBYyxDQUFDLEtBQUs7WUFDcEMsYUFBYSxFQUFFLGdCQUFnQjtTQUNoQyxDQUFDO0tBQ0g7SUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLDRGQUE0RixPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBQzFILENBQUM7QUFsQkQsOENBa0JDO0FBRUQsU0FBUyxxQkFBcUIsQ0FBQyxPQUFlLEVBQUUsYUFBeUM7SUFDdkYsSUFBSSxhQUFhLEtBQUssU0FBUyxFQUFFO1FBQy9CLE1BQU0sSUFBSSxLQUFLLENBQ2IsNkhBQTZILENBQzlILENBQUM7S0FDSDtJQUNELE9BQU87UUFDTCxHQUFHLGFBQWEsQ0FBQyxHQUFJO1FBQ3JCLElBQUksRUFBRSxhQUFhLENBQUMsSUFBSTtRQUN4QixPQUFPO0tBQ1IsQ0FBQztBQUNKLENBQUMifQ==