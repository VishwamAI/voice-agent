#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
require("source-map-support/register");
const aws_sdk_1 = __importDefault(require("aws-sdk"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const yargs_1 = __importDefault(require("yargs"));
const smapi_1 = require("./smapi");
const project_config_1 = require("./project-config");
const synthesize_1 = require("./synthesize");
const project_1 = require("./project");
const validate_1 = require("./validate");
const util_1 = require("./util");
const bundle_1 = require("./bundle");
const decompile_1 = require("./decompile");
const package_1 = require("./package");
const parse_1 = require("./parse");
const compile_1 = require("./compile");
const error_1 = require("./error");
/**
 * ACDL Compiler CLI.
 */
async function main() {
    const { argv } = (0, yargs_1.default)(process.argv.slice(2))
        .scriptName("acc")
        .version((await getPkgManifest(__dirname)).version)
        .usage("Usage: $0")
        .alias("h", "help")
        .help("help")
        .showHelpOnFail(true)
        // .command(["$0", "build"], "compile a single ACDL file to ASKIR", () => {})
        .command("compile", "compile ACDL module", (yargs) => yargs
        .option("file", {
        type: "string",
        demandOption: true,
        requiresArg: true,
        description: "compiles a single ACDL file to ASKIR JSON, emitting it along-side the ACDL file.",
    })
        .option("skip-validation", {
        type: "boolean",
        demandOption: false,
        default: false,
        description: "Force the CLI to generate ASKIR without validation.",
    }))
        .command("package", "create a skill-package", () => { })
        .command("decompile", "decompile ASKIR files to ACDL files and move the ASKIR files to the build directory", (yargs) => yargs.option("skip-validation", {
        type: "boolean",
        demandOption: false,
        default: false,
        description: "Force the CLI to generate ACDL without validation.",
    }))
        .command("deploy", "package and deploy the skill", (yargs) => yargs
        .option("skill-id", {
        type: "string",
        demandOption: true,
        requiresArg: true,
        description: "Skill ID to deploy",
    })
        .option("profile", {
        type: "string",
        requiresArg: true,
        description: "ASK CLI profile to use when deploying the Skill.",
        default: "default",
    })
        .option("skill-package", {
        type: "string",
        requiresArg: true,
        description: "Optional path of a pre-compiled skill-package directory. If none is provided, a skill-package will be compiled from source.",
    }))
        .command("bootstrap-lwa-secrets-manager", "store LWA refresh token credentials in a secure AWS Secret managed by AWS Secrets Manager", (yargs) => yargs
        .option("secret-id", {
        type: "string",
        requiresArg: true,
        demandOption: true,
        description: "ARN of the AWS Secrets Manager credentials to upload the ASK refresh token to",
    })
        .option("profile", {
        type: "string",
        requiresArg: true,
        description: "ASK CLI profile to use when deploying the Skill.",
        default: "default",
    })
        .option("aws-profile", {
        type: "string",
        requiresArg: true,
        description: "name of profile configured in ~/.aws/config and ~/.aws/credentials",
        default: "default",
    })
        .option("aws-region", {
        type: "string",
        requiresArg: true,
        description: "AWS region the Secret Resides in",
    }))
        .command("bootstrap", "Creates a CloudFormation stack with a Secure AWS Secret Manager and uploads your LWA credentials credential to the Secret.", (yargs) => yargs
        .option("secret-name", {
        type: "string",
        requiresArg: true,
        demandOption: false,
        description: "Name of the AWS Secret to upload the ASK credentials to.",
    })
        .option("profile", {
        type: "string",
        requiresArg: true,
        description: "ASK CLI profile to use when deploying the Skill.",
        default: "default",
    })
        .option("aws-profile", {
        type: "string",
        requiresArg: true,
        description: "Name of the AWS profile configured in ~/.aws/config and ~/.aws/credentials.",
        default: "default",
    })
        .option("regions", {
        type: "string",
        requiresArg: true,
        description: "AWS Regions to create the CFN stacks and AWS secrets into.",
    })
        .option("client_id", {
        type: "string",
        requiresArg: true,
        description: "The login-with-amazon client id to store in the AWS secret.",
    })
        .option("client_secret", {
        type: "string",
        requiresArg: true,
        description: "The login-with-amazon client secret to store in the AWS secret.",
    })
        .option("skip-stack", {
        type: "boolean",
        default: false,
        description: "Skips creating a CloudFormation Stack and creates the AWS Secret. This may lead to dangling resources.",
    }))
        .option("verbose", {
        alias: "v",
        type: "boolean",
        description: "Run with verbose logging",
        default: false,
    })
        .option("skip-validation", {
        type: "boolean",
        demandOption: false,
        default: false,
        description: "Force the CLI to generate ASKIR without validation.",
    })
        .parserConfiguration({
        "camel-case-expansion": false,
    })
        .strict();
    const command = argv._[0];
    if (command === "bootstrap-lwa-secrets-manager") {
        await bootstrapLwa();
    }
    else if (command === "bootstrap") {
        await bootstrap();
    }
    else if (command === "compile") {
        const module = await (0, parse_1.loadACDLFile)(process.cwd(), argv.file);
        const project = new project_1.Project({
            config: {
                rootDir: process.cwd(),
                srcDir: "conversations",
                outDir: "build",
                projectVersion: package_1.ProjectVersion.SingleFile,
            },
            external: [await (0, package_1.loadBundledPackage)("schema"), await (0, package_1.loadBundledPackage)("ac-core")],
            source: {
                modules: [module],
            },
        });
        const errors = (0, validate_1.validateProject)(project, false, argv["skip-validation"]);
        if ((0, error_1.hasTerminalErrors)(errors)) {
            (0, error_1.logProjectErrors)(errors);
            process.exit(1);
        }
        if (module.content) {
            const outputFile = argv.file.replace(".acdl", ".json");
            await fs_extra_1.default.writeFile(outputFile, JSON.stringify((0, compile_1.compileModule)(project, module.content), null, 2));
        }
        else {
            throw new Error("");
        }
    }
    else {
        const projectConfig = await (0, project_config_1.loadProjectConfig)();
        const project = await (0, project_1.loadProject)(projectConfig);
        const errors = (0, validate_1.validateProject)(project, false, argv["skip-validation"]);
        const SyntaxErrors = errors.filter((e) => e.code.category === "SyntaxError" /* ErrorCategory.SyntaxError */);
        if (command === "decompile") {
            if (SyntaxErrors !== undefined && SyntaxErrors.length > 0 && errors !== undefined) {
                (0, error_1.logProjectErrors)(errors);
                process.exit(1);
            }
            else {
                await (0, decompile_1.decompileProject)(project);
                return;
            }
        }
        if (errors !== undefined && (0, error_1.hasTerminalErrors)(errors)) {
            (0, error_1.logProjectErrors)(errors);
            process.exit(1);
        }
        else if (command === undefined || command === "build") {
            await build();
        }
        else if (command === "package" || command === "deploy") {
            const bundleProjectOutput = await bundle();
            if ((0, error_1.hasTerminalErrors)(bundleProjectOutput.errors) && !argv["skip-validation"]) {
                (0, error_1.logProjectErrors)(bundleProjectOutput.errors);
                process.exit(1);
            }
            if (command === "deploy" && bundleProjectOutput.skillPackageZip !== undefined) {
                await deploy(bundleProjectOutput.skillPackageZip);
            }
        }
        (0, error_1.logProjectWarnings)(errors);
        async function build() {
            await (0, synthesize_1.synthesizeProject)(project);
        }
        function bundle() {
            return (0, bundle_1.bundleProjectZip)(project);
        }
        async function deploy(skillPackageZip) {
            var _a;
            const skillId = argv["skill-id"];
            const smapi = await initSmapi();
            const location = await smapi.createUploadUrl();
            await smapi.uploadSkillPackage(skillPackageZip, location);
            try {
                await smapi.importSkillPackage(skillId, location);
            }
            catch (err) {
                if (typeof ((_a = err.response) === null || _a === void 0 ? void 0 : _a.message) === "string") {
                    // catch errors thrown by SMAPI
                    throw new Error(err.response.message);
                }
                throw err;
            }
        }
    }
    async function getPkgManifest(currentDir) {
        const potentialPkgPath = path_1.default.resolve(currentDir, "package.json");
        if (await (0, util_1.isFile)(potentialPkgPath)) {
            return JSON.parse(await fs_extra_1.default.readFile(potentialPkgPath, { encoding: "utf8" }));
        }
        return getPkgManifest(path_1.default.resolve(currentDir, ".."));
    }
    /**
     * Uploads a login-with-amazon (LWA) profile to AWS secrets manager.
     *
     * TODO: get secret ID from the CFN stack output - https://github.com/aws/aws-cdk/issues/1773
     */
    async function bootstrapLwa() {
        var _a;
        // @see https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-region.html#setting-region-config-file
        process.env.AWS_SDK_LOAD_CONFIG = "true";
        const smapi = await initSmapi();
        const credentials = new aws_sdk_1.default.SharedIniFileCredentials({
            profile: (_a = argv["aws-profile"]) !== null && _a !== void 0 ? _a : "default",
        });
        const secretManager = new aws_sdk_1.default.SecretsManager({ credentials, region: argv["aws-region"] });
        // store the profile as JSON in secrets manager
        await secretManager
            .putSecretValue({
            SecretId: argv["secret-id"],
            SecretString: JSON.stringify(smapi.profile),
        })
            .promise();
    }
    /**
     * Uploads a login-with-amazon (LWA) profile to AWS secrets manager.
     *
     * TODO: get secret ID from the CFN stack output - https://github.com/aws/aws-cdk/issues/1773
     */
    async function bootstrap() {
        var _a, _b, _c, _d;
        // @see https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-region.html#setting-region-config-file
        process.env.AWS_SDK_LOAD_CONFIG = "true";
        const regions = (_b = (_a = argv.regions) === null || _a === void 0 ? void 0 : _a.split(",")) !== null && _b !== void 0 ? _b : [];
        const skipStack = argv["skip-stack"];
        // If the user doesn't provide regions, then SecretsManager will
        // use the default AWS CLI region instead of undefined
        if (regions.length === 0) {
            regions.push(undefined);
        }
        const smapi = await initSmapi();
        const clientId = argv.client_id;
        const clientSecret = argv.client_secret;
        if (clientId) {
            smapi.profile.client_id = clientId;
        }
        if (clientSecret) {
            smapi.profile.client_secret = clientSecret;
        }
        const credentials = new aws_sdk_1.default.SharedIniFileCredentials({
            profile: (_c = argv["aws-profile"]) !== null && _c !== void 0 ? _c : "default",
        });
        const secretName = (_d = argv["secret-name"]) !== null && _d !== void 0 ? _d : `ask-config-${smapi.profile.vendor_id}`;
        const CfnTemplate = {
            AWSTemplateFormatVersion: "2010-09-09",
            Resources: {
                AskConfigSecret: {
                    Type: "AWS::SecretsManager::Secret",
                    Properties: {
                        Name: secretName,
                        Description: "Secret creation for Alexa Skills Kit.",
                    },
                },
            },
        };
        const stackParams = {
            StackName: secretName,
            TemplateBody: JSON.stringify(CfnTemplate),
        };
        // Create or update the secret in each region
        for (const region of regions) {
            const cloudformation = new aws_sdk_1.default.CloudFormation({ credentials, region });
            const secretManager = new aws_sdk_1.default.SecretsManager({ credentials, region });
            // Grab the region from cloudformation if user did not input any regions
            const awsRegion = cloudformation.config.region;
            // Create the CFN stack to store the AWS Secret. If the stack already exists,
            // the CFN API returns an AlreadyExistsException
            try {
                if (skipStack) {
                    await secretManager.createSecret({ Name: secretName }).promise();
                    console.log(`Created secret ${secretName} in ${awsRegion}.`);
                }
                else {
                    const stackId = (await cloudformation.createStack(stackParams).promise()).StackId;
                    console.log(`Starting creation of ${secretName} Stack in ${awsRegion}.`);
                    await pollStackCreation(cloudformation, stackId, awsRegion);
                }
            }
            catch (err) {
                const resource = skipStack ? "Secret" : "Stack";
                if (err.code === "AlreadyExistsException") {
                    console.log(`${secretName} ${resource} already exists in ${awsRegion}. Skipping creation.`);
                }
                else {
                    console.log(`Error creating ${resource}: ${secretName} in ${awsRegion}.`);
                    console.log(err);
                    process.exit(1);
                }
            }
            // Store the ASK profile as JSON in secrets manager
            try {
                await secretManager
                    .putSecretValue({
                    SecretId: secretName,
                    SecretString: JSON.stringify(smapi.profile),
                })
                    .promise();
                console.log(`Successfully uploaded LWA credentials to AWS secret ${secretName} in ${awsRegion}.`);
            }
            catch (err) {
                console.log(`Failed uploading LWA credentials to AWS secret ${secretName} in ${awsRegion}.`);
                console.log(err);
                process.exit(1);
            }
        }
        // Polls the stack creation until the status is complete
        // Throws an error if there is an unexpected status
        async function pollStackCreation(cloudformation, stackId, region) {
            try {
                const stacks = (await cloudformation.describeStacks({ StackName: stackId }).promise()).Stacks;
                if (stacks === undefined) {
                    throw new Error("Error creating the CloudFormation stack. Stack doesn't exist.");
                }
                const stack = stacks[0];
                const status = stack.StackStatus;
                if (status === "CREATE_COMPLETE") {
                    console.log(`Created ${secretName} Stack in ${region}`);
                }
                else if (status === "REVIEW_IN_PROGRESS" || status === "CREATE_IN_PROGRESS") {
                    console.log(`Stack(${region}) status: ${status}`);
                    await new Promise((resolve) => {
                        setTimeout(resolve, 2000);
                    });
                    await pollStackCreation(cloudformation, stackId, region);
                }
                else {
                    // Occurs when the stack fails to create with a CREATE_FAILED status
                    throw new Error(`Error creating ${secretName} Stack in ${region}. Encountered ${status} status. Status reason: ${stack.StackStatusReason}.`);
                }
            }
            catch (err) {
                console.log(err);
                console.log(`You may need to manually delete the Stack(${region}) from CloudFormation.`);
                process.exit(1);
            }
        }
    }
    async function initSmapi() {
        var _a;
        const cliConfig = await (0, smapi_1.loadCliConfig)();
        const profileName = (_a = argv.profile) !== null && _a !== void 0 ? _a : "default";
        const lwaProfile = cliConfig.profiles[profileName];
        if (lwaProfile === undefined) {
            throw new Error(`could not load profile '${profileName}' from ~/.ask/cli_config`);
        }
        return new smapi_1.SmapiClient(lwaProfile);
    }
}
exports.main = main;
(0, util_1.time)("main", () => main())
    .then(() => {
    console.log("SUCCESS");
})
    .catch((err) => {
    console.log("FAILURE");
    console.error(err);
    process.exit(1);
});
//# sourceMappingURL=data:application/json;base64,