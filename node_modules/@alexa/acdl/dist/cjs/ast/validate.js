"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logValidationErrors = exports.validateModuleSchema = exports.tryValidateModuleSchema = void 0;
const ajv_1 = __importDefault(require("ajv"));
const ajv_formats_1 = __importDefault(require("ajv-formats"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const Module_json_1 = __importDefault(require("@alexa/ask-expressions-spec/schemas/Module.json"));
const schemaDir = path_1.default.resolve(path_1.default.dirname(require.resolve("@alexa/ask-expressions-spec/package.json")), "schemas");
const schemas = fs_extra_1.default.readdirSync(schemaDir).reduce((acc, schemaPathRelative) => {
    if (schemaPathRelative.endsWith(".json") && schemaPathRelative !== "Module.json") {
        const schemaPath = path_1.default.join(schemaDir, schemaPathRelative);
        return [...acc, JSON.parse(fs_extra_1.default.readFileSync(schemaPath, "utf-8"))];
    }
    return acc;
}, []);
const ajv = (0, ajv_formats_1.default)(new ajv_1.default({ schemas, strict: false }));
const validator = ajv.compile(Module_json_1.default);
/**
 * Validates a Module according to a JSON schema.
 *
 * @param module
 */
function tryValidateModuleSchema(module) {
    validator(module);
    return validator.errors;
}
exports.tryValidateModuleSchema = tryValidateModuleSchema;
function validateModuleSchema(module, uri) {
    const errors = tryValidateModuleSchema(module);
    if (errors) {
        logValidationErrors(errors);
        throw new Error(`invalid ASK Module${uri ? `: '${uri}'` : ""}`);
    }
}
exports.validateModuleSchema = validateModuleSchema;
function logValidationErrors(errors) {
    for (const e of errors) {
        console.log(e);
    }
}
exports.logValidationErrors = logValidationErrors;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYXN0L3ZhbGlkYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDhDQUFxQztBQUNyQyw4REFBcUM7QUFDckMsd0RBQTBCO0FBQzFCLGdEQUF3QjtBQUN4QixrR0FBMkU7QUFFM0UsTUFBTSxTQUFTLEdBQUcsY0FBSSxDQUFDLE9BQU8sQ0FBQyxjQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsMENBQTBDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3JILE1BQU0sT0FBTyxHQUFHLGtCQUFFLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQVEsRUFBRSxrQkFBa0IsRUFBRSxFQUFFO0lBQ2hGLElBQUksa0JBQWtCLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLGtCQUFrQixLQUFLLGFBQWEsRUFBRTtRQUNoRixNQUFNLFVBQVUsR0FBRyxjQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBQzVELE9BQU8sQ0FBQyxHQUFHLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFFLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbkU7SUFDQyxPQUFPLEdBQUcsQ0FBQztBQUVmLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUVQLE1BQU0sR0FBRyxHQUFHLElBQUEscUJBQVUsRUFBQyxJQUFJLGFBQUcsQ0FBQyxFQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFELE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMscUJBQVksQ0FBQyxDQUFDO0FBRTVDOzs7O0dBSUc7QUFDSCxTQUFnQix1QkFBdUIsQ0FBQyxNQUFXO0lBQ2pELFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsQixPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUM7QUFDMUIsQ0FBQztBQUhELDBEQUdDO0FBRUQsU0FBZ0Isb0JBQW9CLENBQUMsTUFBVyxFQUFFLEdBQVk7SUFDNUQsTUFBTSxNQUFNLEdBQUcsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0MsSUFBSSxNQUFNLEVBQUU7UUFDVixtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QixNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDakU7QUFDSCxDQUFDO0FBTkQsb0RBTUM7QUFFRCxTQUFnQixtQkFBbUIsQ0FBQyxNQUFxQjtJQUN2RCxLQUFLLE1BQU0sQ0FBQyxJQUFJLE1BQU0sRUFBRTtRQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ2hCO0FBQ0gsQ0FBQztBQUpELGtEQUlDIn0=