"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanStructure = exports.fromASKModule = exports.fromASKModuleJson = void 0;
const action_1 = require("./action");
const argument_1 = require("./argument");
const call_1 = require("./call");
const condition_1 = require("./condition");
const dialog_1 = require("./dialog");
const list_literal_1 = require("./list-literal");
const module_1 = require("./module");
const name_1 = require("./name");
const name_declaration_1 = require("./name-declaration");
const name_reference_1 = require("./name-reference");
const property_reference_1 = require("./property-reference");
const sample_1 = require("./sample");
const block_1 = require("./block");
const type_1 = require("./type");
const utterance_1 = require("./utterance");
const validate_1 = require("./validate");
const enum_1 = require("./enum");
const annotation_1 = require("./annotation");
const prelude_1 = require("./prelude");
const interaction_1 = require("./interaction");
const correction_1 = require("./correction");
/**
 * Parse a JSON form of ASK Module to the in-memory representation.
 *
 * @param data JSON string data
 * @param uri optional URI for the source of the ASKIR JSON
 */
function fromASKModuleJson(data, uri) {
    return fromASKModule(JSON.parse(data), uri);
}
exports.fromASKModuleJson = fromASKModuleJson;
/**
 * Parse a serialized form of ASK Module to the in-memory representation.
 *
 * @param data parsed JSON data
 * @param uri optional URI for the source of the ASKIR JSON
 */
function fromASKModule(data, uri) {
    var _a, _b;
    cleanStructure(data);
    (0, validate_1.validateModuleSchema)(data, uri);
    return new module_1.Module(uri, module_1.ModuleSchema, undefined, undefined, (_a = data.exports) !== null && _a !== void 0 ? _a : [], (_b = data.expressions) === null || _b === void 0 ? void 0 : _b.map((expr) => readAsk(expr)));
}
exports.fromASKModule = fromASKModule;
/**
 * Clean a parsed ASKIR JSON file that does not exactly comply with the JSON schema.
 */
function cleanStructure(data) {
    if (typeof data === "object") {
        Object.entries(data).forEach(([name, value]) => {
            if ((name === "type" || name === "annotations") && value === null) {
                // UI exporter is incorrectly writing `"type": null`
                delete data[name];
            }
            else if (value && typeof value === "object") {
                cleanStructure(value);
            }
            else if (Array.isArray(value)) {
                value.forEach(cleanStructure);
            }
        });
    }
}
exports.cleanStructure = cleanStructure;
function readAsk(expr) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    if (expr === undefined) {
        return undefined;
    }
    if (Array.isArray(expr)) {
        return expr.map((d) => readAsk(d));
    }
    if (typeof expr === "string") {
        return new name_1.Name(expr);
    }
    if (typeof expr === "object") {
        if (expr.kind === "ActionDeclaration") {
            const action = new action_1.ActionDeclaration(new name_1.Name(expr.name), (_a = expr.arguments) === null || _a === void 0 ? void 0 : _a.map((a) => {
                const arg = new argument_1.ArgumentDeclaration(new name_1.Name(a.name), readAsk(a.type), readAsk(a.defaultExpression), readAnnotations(a.annotations));
                return arg;
            }), readAsk(expr.returnType), (_b = expr.genericArguments) === null || _b === void 0 ? void 0 : _b.map((a) => {
                var _a;
                const p = new type_1.TypeParameter(new name_1.Name(a.name), (_a = a.constraints) === null || _a === void 0 ? void 0 : _a.map((c) => readAsk(c)));
                return p;
            }), readAnnotations(expr.annotations), undefined);
            return action;
        }
        if (expr.kind === "Call") {
            let args = expr.arguments;
            if (Array.isArray(expr.arguments)) {
                if (expr.name === prelude_1.AlexaSchema.List &&
                    ((_d = (_c = expr.genericArguments) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.name) === prelude_1.AlexaConversations.Argument &&
                    expr.genericArguments[0].genericArguments === undefined) {
                    // List<Argument> - this is the old version of the core library, we will instead let the compiler infer the type
                    expr.name = undefined;
                    expr.genericArguments = undefined;
                }
                // list literal arguments, wrap them in a ListLiteral type
                args = new list_literal_1.ListLiteral(expr.arguments.map((arg, i) => new list_literal_1.ListItem(readAsk(arg), i)));
            }
            else if (expr.arguments && typeof expr.arguments === "object") {
                if (expr.name === prelude_1.AlexaConversations.utterances) {
                    if (Array.isArray(expr.genericArguments) && expr.genericArguments.length === 0) {
                        // empty array should be undefined
                        expr.genericArguments = undefined;
                    }
                    const { samples } = expr.arguments;
                    if (samples &&
                        samples.kind === "Call" &&
                        samples.name === prelude_1.AlexaSchema.List &&
                        ((_f = (_e = samples.genericArguments) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.name) === prelude_1.AlexaSchema.String) {
                        // List<String> instead of List<Utterance<T>>
                        // remove the types and let the compiler infer them.
                        samples.name = undefined;
                        samples.genericArguments = undefined;
                    }
                }
                args = Object.entries(expr.arguments).map(([name, arg], i) => new argument_1.Argument(new name_1.Name(name), i, readAsk(arg)));
            }
            else if (typeof expr.arguments === "string") {
                const names = (0, utterance_1.parseUtteranceSlotNames)(expr.arguments);
                if (names) {
                    args = new utterance_1.Utterance(expr.arguments, names.map((name) => new name_1.Name(name)));
                }
            }
            // The exported IR use 'lhs' and 'rhs' for operator arguments
            // convert it to 'left' and 'right'
            if (prelude_1.OPERATOR_ACTIONS_SET.has(expr.name)) {
                for (const arg of args) {
                    if (arg.name.name === "lhs") {
                        arg.name = "left";
                    }
                    else if (arg.name.name === "rhs") {
                        arg.name = "right";
                    }
                }
            }
            return new call_1.Call(new name_1.Name(expr.name), args, readAsk(expr.genericArguments), readAnnotations(expr.annotations));
        }
        if (expr.kind === "Condition") {
            const thenScope = new condition_1.ThenScope(readAsk(expr.then));
            const elseScope = new condition_1.ElseScope(readAsk(expr.else));
            return new condition_1.Condition(new condition_1.When(readAsk(expr.when)), thenScope, elseScope, readAnnotations(expr.annotations));
        }
        if (expr.kind === "Correction") {
            const actualScope = new correction_1.CorrectionScope(readAsk(expr.actual));
            const expectedScope = new correction_1.CorrectionScope(readAsk(expr.expected));
            return new correction_1.Correction(actualScope, expectedScope);
        }
        if (expr.kind === "DialogDeclaration") {
            return new dialog_1.DialogDeclaration(new name_1.Name(expr.name), (_g = expr.arguments) === null || _g === void 0 ? void 0 : _g.map((a) => {
                const arg = new argument_1.ArgumentDeclaration(new name_1.Name(a.name), readAsk(a.type), readAsk(a.defaultExpression), readAnnotations(expr.annotations));
                return arg;
            }), readAsk(expr.samples), readAsk(expr.returnType), (_h = expr.genericArguments) === null || _h === void 0 ? void 0 : _h.map((a) => {
                var _a;
                return new type_1.TypeParameter(new name_1.Name(a.name), (_a = a.constraints) === null || _a === void 0 ? void 0 : _a.map((c) => readAsk(c)));
            }), readAnnotations(expr.annotations));
        }
        if (expr.kind === "InteractionDeclaration") {
            return new interaction_1.InteractionDeclaration(new block_1.Block(readAsk(expr.expressions)), readAnnotations(expr.annotations));
        }
        if (expr.kind === "TypeReference") {
            return new type_1.TypeReference(new name_1.Name(renameType(expr.name)), readAsk(expr.arguments), readAnnotations(expr.annotations));
        }
        if (expr.kind === "TypeDeclaration") {
            return new type_1.TypeDeclaration(new name_1.Name(expr.name), expr.properties === undefined
                ? undefined
                : expr.properties.map((prop) => {
                    const typeProperty = new type_1.TypeProperty(new name_1.Name(prop.name), readAsk(prop.type), prop.optional, readAnnotations(expr.annotations));
                    return typeProperty;
                }), (_j = expr.genericArguments) === null || _j === void 0 ? void 0 : _j.map((arg) => {
                const typeParam = new type_1.TypeParameter(new name_1.Name(arg.name), readAsk(arg.constraints));
                return typeParam;
            }), readAsk(expr.extensions), readAnnotations(expr.annotations));
        }
        if (expr.kind === "NameDeclaration" || expr.kind === "QualifiedNameDeclaration" || expr.kind === "InteractionNameDeclaration") {
            return new name_declaration_1.NameDeclaration(new name_1.Name(expr.name), readAsk(expr.type), readAsk(expr.expression), readAnnotations(expr.annotations));
        }
        if (expr.kind === "NameReference") {
            return new name_reference_1.NameReference(new name_1.Name(renameType(expr.name)), readAnnotations(expr.annotations));
        }
        if (expr.kind === "PropertyReference") {
            return new property_reference_1.PropertyReference(readAsk(expr.name), readAsk(expr.expression), readAnnotations(expr.annotations));
        }
        if (expr.kind === "Sample") {
            return new sample_1.Sample(new block_1.Block(readAsk(expr.expressions)), readAnnotations(expr.annotations));
        }
        if (expr.kind === "Scope") {
        }
        else if (expr.kind === "EnumDeclaration") {
            return new enum_1.EnumDeclaration(new name_1.Name(expr.name), Array.isArray(expr.items) ? readAsk(expr.items) : undefined, readAnnotations(expr.annotations));
        }
        else if (expr.kind === "EnumItemDeclaration") {
            return new enum_1.EnumItem(readAsk(expr.name), readAnnotations(expr.annotations));
        }
    }
    throw new Error(`unexpected expression: ${JSON.stringify(expr)}`);
}
/**
 * Renames a type from the server-side representation to the client-side representation.
 */
function renameType(name) {
    // Even though we no longer map AlexaSchema.Type to AlexaConversations.Type
    // in compile.ts's compileExpression (from ACDL to ASKIR) we keep this so decompile works
    if (name === prelude_1.AlexaConversations.Type) {
        return prelude_1.AlexaSchema.Type;
    }
    if (name === prelude_1.AlexaConversations.Argument) {
        return prelude_1.AlexaSchema.Argument;
    }
    if (name === prelude_1.AlexaConversations.Arguments) {
        return prelude_1.AlexaSchema.Arguments;
    }
    return name;
}
function readAnnotations(calls) {
    return calls === null || calls === void 0 ? void 0 : calls.map((call) => new annotation_1.Annotation(readAsk(call)));
}
//# sourceMappingURL=data:application/json;base64,