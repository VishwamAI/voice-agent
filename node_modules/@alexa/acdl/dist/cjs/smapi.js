"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmapiClient = exports.loadCliConfigSync = exports.loadCliConfig = exports.SkillStage = void 0;
const os = __importStar(require("os"));
const url = __importStar(require("url"));
const https = __importStar(require("https"));
const fs = __importStar(require("fs-extra"));
const smapi = __importStar(require("ask-smapi-sdk"));
const CLIENT_ID = "amzn1.application-oa2-client.aad322b5faab44b980c8f87f94fbac56";
const CLIENT_CONFIRMATION = "1642d8869b829dda3311d6c6539f3ead55192e3fc767b9071c888e60ef151cf9";
/**
 * Skill Stage.
 */
var SkillStage;
(function (SkillStage) {
    SkillStage["DEVELOPMENT"] = "development";
    SkillStage["CERTIFICATION"] = "certification";
    SkillStage["LIVE"] = "live";
})(SkillStage = exports.SkillStage || (exports.SkillStage = {}));
/**
 * Load the user's ASK CLI Config.
 *
 * @param path path of the cli_config - defaults to `~/.ask/cli_config`
 */
async function loadCliConfig(path) {
    const cliConfigPath = path || `${os.homedir()}/.ask/cli_config`;
    try {
        // check we have access to the file
        fs.access(cliConfigPath, fs.constants.F_OK);
    }
    catch (err) {
        throw new Error(`cannot read file: ${cliConfigPath}`);
    }
    // TODO: validate
    return JSON.parse((await fs.readFile(cliConfigPath)).toString("utf8"));
}
exports.loadCliConfig = loadCliConfig;
/**
 * Synchronusly load the user's ASK CLI Config.
 *
 * @param path path of the cli_config - defaults to `~/.ask/cli_config`
 */
function loadCliConfigSync(path) {
    const cliConfigPath = path || `${os.homedir()}/.ask/cli_config`;
    try {
        fs.existsSync(cliConfigPath);
    }
    catch (err) {
        throw new Error(`cannot read file: ${cliConfigPath}`);
    }
    // TODO: validate
    return JSON.parse(fs.readFileSync(cliConfigPath).toString("utf8"));
}
exports.loadCliConfigSync = loadCliConfigSync;
/**
 * A SMAPI client.
 */
class SmapiClient {
    constructor(
    /**
     * LWA profile to use when making calls.
     */
    profile, 
    /**
     * Optionally specify a different SMAPI endpoint.
     */
    smapiEndpoint, 
    /**
     * Optionally specify a different LWA authorization endpoint.
     */
    lwaTokenEndpoint) {
        Object.defineProperty(this, "profile", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: profile
        });
        Object.defineProperty(this, "smapiEndpoint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: smapiEndpoint
        });
        Object.defineProperty(this, "lwaTokenEndpoint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: lwaTokenEndpoint
        });
        /**
         * Instantiated `SkillManagementServiceClient`.
         */
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        let clientBuilder = new smapi.CustomSmapiClientBuilder();
        if (smapiEndpoint) {
            clientBuilder = clientBuilder.withApiEndpoint(smapiEndpoint);
        }
        if (lwaTokenEndpoint) {
            clientBuilder = clientBuilder.withAuthEndpoint(lwaTokenEndpoint);
        }
        this.client = clientBuilder
            .withRefreshTokenConfig({
            refreshToken: this.profile.token.refresh_token,
            /**
             * Client ID and Secret of the ASK CLI's default LWA client.
             *
             * @see https://github.com/alexa/ask-cli/blob/1d38e15fdf6bf6e23c2f30e4e01db94f3c2c39b6/lib/utils/constants.js#L445-L451
             */
            clientId: this.profile.client_id || getClientId(),
            clientSecret: this.profile.client_secret || getClientConfirmation(),
        })
            .client();
    }
    /**
     * Delete a Skill.
     *
     * @param skillId ID of the skill to delete.
     */
    deleteSkill(skillId) {
        return this.client.deleteSkillV1(skillId);
    }
    /**
     * Enables a skill for given stage.
     *
     * @param skillId Id of the skill to enable.
     * @param stage Stage to enable.
     * @see https://developer.amazon.com/en-US/docs/alexa/smapi/skill-enablement.html#enable-a-skill
     */
    enableSkill(skillId, stage) {
        return this.client.setSkillEnablementV1(skillId, stage);
    }
    /**
     * Create an upload URL.
     *
     * @see https://developer.amazon.com/en-US/docs/alexa/smapi/skill-package-api-reference.html#create-upload-url
     */
    async createUploadUrl() {
        const location = (await this.client.createUploadUrlV1()).uploadUrl;
        if (location === undefined) {
            throw new Error(`failed to retrieve upload url`);
        }
        return location;
    }
    /**
     * Upload a Skill Package ZIP file to a URL.
     *
     * @param skillPackageZipPath path to a Skill Package ZIP on disk
     * @param uploadUrl url to upload Skill Package
     */
    async uploadSkillPackage(skillPackageZipPath, uploadUrl) {
        const parsedUrl = url.parse(uploadUrl); // TODO: use non-deprecated function
        const skillPackage = await fs.readFile(skillPackageZipPath);
        await new Promise((resolve, reject) => {
            const req = https.request({
                method: "PUT",
                port: 443,
                hostname: parsedUrl.hostname,
                path: parsedUrl.path,
                headers: {
                    "Content-Type": "application/zip",
                    "Content-Length": skillPackage.length,
                },
            }, (res) => {
                res.on("close", resolve);
                res.on("data", console.log);
            });
            req.on("error", reject);
            req.write(skillPackage);
            req.end();
        });
    }
    /**
     * Create a new Skill with a Skill Manifest and return the new Skill ID.
     *
     * @param manifest initial Skill Manifest
     */
    async createSkill(manifest) {
        const response = await this.client.createSkillForVendorV1({
            vendorId: this.profile.vendor_id,
            manifest,
        });
        const { skillId } = response;
        if (skillId === undefined) {
            throw new Error(`failed to receive a Skill ID when creating Skill`);
        }
        const waitForSuccess = async () => {
            var _a, _b, _c, _d, _e, _f;
            console.log("Checking Skill Status", skillId);
            const status = await this.client.getSkillStatusV1(skillId, "manifest");
            console.log(JSON.stringify(status, null, 2));
            if (((_b = (_a = status.manifest) === null || _a === void 0 ? void 0 : _a.lastUpdateRequest) === null || _b === void 0 ? void 0 : _b.status) === "FAILED") {
                throw new Error("Failed to create Skill");
            }
            else if (((_d = (_c = status.manifest) === null || _c === void 0 ? void 0 : _c.lastUpdateRequest) === null || _d === void 0 ? void 0 : _d.status) === "SUCCEEDED") {
            }
            else {
                console.log("Waiting for Skill Manifest Status", (_f = (_e = status.manifest) === null || _e === void 0 ? void 0 : _e.lastUpdateRequest) === null || _f === void 0 ? void 0 : _f.status);
                await new Promise((resolve) => setTimeout(resolve, 100));
                await waitForSuccess();
            }
        };
        await waitForSuccess();
        return skillId;
    }
    /**
     * Import a Skill Package from a URL and polls until the import succeeds or fails.
     *
     * @param skillId ID of the skill to deploy
     * @param skillPackageUrl URL of the uploaded skill-package
     * @see https://developer.amazon.com/en-US/docs/alexa/smapi/skill-package-api-reference.html#import-existing-skill
     */
    async importSkillPackage(skillId, skillPackageUrl) {
        return this.pollImportStatus(await this.importSkillPackageAsync(skillId, skillPackageUrl));
    }
    /**
     * Imports a Skill Package from a URIL and returns the Import ID. This method does
     * not wait until the import completed.
     *
     * @param skillId ID of the skill to deploy
     * @param skillPackageUrl URL of the uploaded skill-package
     * @see https://developer.amazon.com/en-US/docs/alexa/smapi/skill-package-api-reference.html#import-existing-skill
     */
    async importSkillPackageAsync(skillId, skillPackageUrl) {
        var _a;
        const importResponse = await this.client.callImportSkillPackageV1({ location: skillPackageUrl }, skillId);
        const importLocation = (_a = importResponse.headers.find((header) => header.key === "location")) === null || _a === void 0 ? void 0 : _a.value;
        if (!importLocation) {
            throw new Error("failed to retrieve import location from response headers");
        }
        const importId = importLocation.split("/v1/skills/imports/").pop();
        if (importId === undefined) {
            throw new Error("failed to strip import ID off of import pkg location");
        }
        return importId;
    }
    /**
     * Gets the import status of an ongoing import.
     *
     * @param importId ID of the import.
     */
    getImportStatus(importId) {
        return this.client.getImportStatusV1(importId);
    }
    /**
     * Poll the an import's status. This API will routinely check the status until it fails or succeeds.
     *
     * @param importId ID of the import to poll.
     * @see https://developer.amazon.com/en-US/docs/alexa/smapi/skill-package-api-reference.html#get-status-for-importid
     */
    async pollImportStatus(importId) {
        const response = await this.client.getImportStatusV1(importId);
        if (response.errors) {
            throw new Error(`get import status responded with errors:\n${response.errors.map((e) => JSON.stringify(e, null, 2)).join("\n")}`);
        }
        const { status } = response;
        if (status === "SUCCEEDED") {
            console.log("import suceeded");
        }
        else if (status === "IN_PROGRESS") {
            console.log(JSON.stringify(response, null, 2));
            await new Promise((resolve) => {
                setTimeout(resolve, 1000);
            });
            return this.pollImportStatus(importId);
        }
        else {
            console.log(JSON.stringify(response, null, 2));
            throw new Error(`import status: ${status}`);
        }
    }
}
exports.SmapiClient = SmapiClient;
/**
 * Returns the default client id to be used with the SMAPI SDK
 */
function getClientId() {
    return CLIENT_ID;
}
/**
 * Returns the default client confirmation to be used with the SMAPI SDK
 */
function getClientConfirmation() {
    return CLIENT_CONFIRMATION;
}
//# sourceMappingURL=data:application/json;base64,