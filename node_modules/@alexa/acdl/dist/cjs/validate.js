"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateCorrection = exports.validateInteractionDeclaration = exports.validateEnsureArgOrder = exports.validateConditionBlock = exports.validateCondition = exports.validateUtterance = exports.validateBinaryOperator = exports.validateNamedArguments = exports.validateRequireCall = exports.validateValidateArgAnnotation = exports.validateCallContext = exports.validateVariations = exports.validateCall = exports.validateUtteranceTypeWrapper = exports.validatePropertyReference = exports.validateTypeReference = exports.validateTypeReferences = exports.validateTypeParameter = exports.validateTypeParameters = exports.validateTypeDeclarationProperties = exports.validateTypeDeclaration = exports.validateEnumDeclaration = exports.validateArgumentDeclaration = exports.validateArgumentDeclarations = exports.validateAnnotatedActionDeclaration = exports.validateActionDeclaration = exports.validateName = exports.validateNameReference = exports.validateNameDeclaration = exports.validateDuplicateNames = exports.validateSample = exports.validateDialogDeclaration = exports.validateExpression = exports.validateAnnotation = exports.validateDialogDeclarationAnnotations = exports.validateTypeDeclarationAnnotations = exports.validateNameDeclarationAnnotations = exports.validateAnnotations = exports.validateCircularReferences = exports.validateImports = exports.validateNamespace = exports.validateBlock = exports.validateModule = exports.validateProject = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const ask = __importStar(require("./ast"));
const error_1 = require("./error");
const ast_1 = require("./ast");
const util_1 = require("./util");
const constants_1 = require("./constants");
const evaluate_1 = require("./evaluate");
const flow_1 = require("./flow");
const validate_skill_1 = require("./validate-skill");
const evaluation_state_1 = require("./evaluation-state");
const visit_1 = require("./visit");
const error_factory_1 = require("./error-factory");
const property_node_1 = require("./property-node");
const lazy_1 = require("./lazy");
/**
 * Validate the entire project for correctness and return and errors.
 *
 * @param project project to validate.
 * @param isSkill whether the project is a skill
 * @param skipSemanticValidations skip semantic validations
 * @returns array of all errors if detected.
 */
function validateProject(project, isSkill, skipSemanticValidations) {
    var _a, _b, _c;
    const checker = project.getTypeChecker();
    const errors = [];
    const skills = checker.project.findSkills();
    errors.push(...project.sourceModules.flatMap((srcModule) => {
        var _a;
        return [
            // syntax errors from module errors
            ...((_a = srcModule.errors) !== null && _a !== void 0 ? _a : []),
            // syntax errors from validateRootExpressions
            ...(srcModule.content ? validateRootExpressions(srcModule.content, checker) : []),
            // semantic errors from validateModule
            ...(srcModule.content && !skipSemanticValidations ? (0, exports.validateModule)(srcModule.content, checker) : []),
        ];
    }));
    if (skipSemanticValidations) {
        return errors;
    }
    errors.push(...(0, evaluate_1.validateGlobalWelcome)(project, checker));
    // now that type checking has passed, let's pass over the AST and create a tree with all types resolved.
    // project = resolveProject(project);
    // checker = project.getTypeChecker();
    const isParsingSkill = isSkill !== null && isSkill !== void 0 ? isSkill : (project.isSkill() || skills.length > 0);
    if (!isParsingSkill) {
        // if we're not parsing a skill, then we should treat all dialogs as deployable
        // FIXME: this logic is wrong, we should validateDialogFlow of all dialogs and handle cases where the dialog "could be called"
        // e.g don't error when there is no prior expect event for a dialog that may be called.
        // This can be improved as part of our re-usability QA drive.
        (_a = checker.project
            .getRootDialogs()) === null || _a === void 0 ? void 0 : _a.forEach((dialog) => errors.push(...(0, evaluate_1.evaluateDialogFlow)(new flow_1.Flow(checker, dialog, undefined, []), new evaluation_state_1.EvaluationState(undefined))));
    }
    else {
        if (skills.length > 1) {
            errors.push(...skills.map((skill) => error_factory_1.ValidationErrorFactory.TooManySkillDeclarations({
                expr: (0, error_factory_1.getExpressionIfLocField)(skill.declaration.name, skill.declaration),
                attributes: {
                    skillNames: skills
                        .filter((s) => s !== skill)
                        .map((skill) => { var _a; return `'${(_a = skill.declaration.name) === null || _a === void 0 ? void 0 : _a.name}'`; })
                        .join(", "),
                },
            })));
        }
        if (project.config.skill === undefined) {
            // no `package.json` or `ask.json` configuration, attempt to derive it from the context
            if (skills.length === 0) {
                // this skill contains no `skill()` declarations, so look for deployable dialogs and global `response/prompts` responses.
                errors.push(...validateDeployableDialogs(checker));
                errors.push(...(0, evaluate_1.validateSkillLevelResponses)(project));
                (_b = checker.project
                    .getRootDialogs()) === null || _b === void 0 ? void 0 : _b.forEach((dialog) => errors.push(...(0, evaluate_1.evaluateDialogFlow)(new flow_1.Flow(checker, dialog, undefined, []), new evaluation_state_1.EvaluationState(undefined))));
            }
            else {
                // skill declarations exist, validate each one.
                skills.forEach((skill) => errors.push(...(0, validate_skill_1.validateSkill)(skill.apply, checker)));
            }
        }
        else {
            // the skill is configured in `package.json` or `ask.json`, let's validate it.
            const skill = checker.lookupQualifiedName(project.config.skill);
            if (skill === undefined) {
                errors.push(error_factory_1.ValidationErrorFactory.SkillNotFound({
                    attributes: {
                        skillName: project.config.skill,
                    },
                }));
            }
            else if (skill.kind === "NameDeclaration" && ((_c = skill.expression) === null || _c === void 0 ? void 0 : _c.kind) === "Call") {
                const apply = checker.getApply(skill.expression);
                if (apply) {
                    if (apply.isSkillAction()) {
                        errors.push(...(0, validate_skill_1.validateSkill)(apply, checker));
                    }
                    else {
                        errors.push(error_factory_1.ValidationErrorFactory.InvalidSkillExpression({
                            expr: skill,
                            attributes: {
                                skillName: project.config.skill,
                            },
                        }));
                    }
                }
            }
            else {
                errors.push(error_factory_1.ValidationErrorFactory.InvalidSkillExpression({
                    expr: skill,
                    attributes: {
                        skillName: project.config.skill,
                    },
                }));
            }
        }
    }
    return (0, error_1.sortErrors)((0, error_1.filterDuplicateErrors)(errors));
}
exports.validateProject = validateProject;
/**
 * validate the skill has deployable dialog
 * This function should be used when there's no skill action call
 */
function validateDeployableDialogs(checker) {
    const deployableDialogs = checker.project.getRootDialogs();
    if (deployableDialogs === undefined || deployableDialogs.length === 0) {
        return [error_factory_1.ValidationErrorFactory.NoDeployableDialog()];
    }
    return [];
}
/**
 * Validate all expressions in a module in the context of a Project.
 *
 * @param module ACDL file or ASK Module to validate.
 * @param checker type checker for querying the expressions.
 */
const validateModule = (module, checker) => [
    ...(0, exports.validateImports)(module, checker),
    ...(0, exports.validateNamespace)(module, checker),
    ...(0, exports.validateBlock)(module, checker),
];
exports.validateModule = validateModule;
/**
 * Returns errors for root expressions (expressions directly at the module level) that are not allowed in the ASKIR schema
 * @param module module we are validating
 * @param checker unused
 * @returns errors for root expressions that are not allowed in the ASKIR schema
 */
const validateRootExpressions = (module, checker) => {
    var _a;
    const errors = [];
    // As seen on https://github.com/alexa/ask-expressions/blob/9a88ebd49ea69dd49ecd2952d2cd6682d41d6b85/packages/%40alexa/ask-expressions-spec/schemas/Module.json#L37
    const validRootExpressions = new Set([
        "ActionDeclaration",
        "DialogDeclaration",
        "InteractionDeclaration",
        "EnumDeclaration",
        "NameDeclaration",
        "TypeDeclaration",
    ]);
    for (const expression of module.expressions || []) {
        if (!validRootExpressions.has(expression.kind)) {
            errors.push(error_factory_1.ValidationErrorFactory.DeclarationExpected({
                expr: expression,
                attributes: {
                    text: expression.kind === "InteractionDeclaration" ? "" : ((_a = expression.name) === null || _a === void 0 ? void 0 : _a.name) || "",
                },
            }));
        }
    }
    return errors;
};
const validateBlock = (scope, checker) => {
    var _a;
    return [
        ...(0, exports.validateDuplicateNames)(scope, checker),
        ...((_a = scope.expressions) !== null && _a !== void 0 ? _a : []).map((expr) => (0, exports.validateExpression)(expr, checker)).reduce((a, b) => a.concat(b), []),
    ];
};
exports.validateBlock = validateBlock;
const validateNamespace = (module, checker) => {
    var _a;
    const nameSpace = (_a = module.namespace) === null || _a === void 0 ? void 0 : _a.name;
    // make sure the namespace doesn't contain reserved prefix
    const errors = [];
    if (nameSpace !== undefined) {
        constants_1.Constants.RESERVED_PREFIXES.forEach((prefix) => {
            if (nameSpace.startsWith(prefix)) {
                errors.push(error_factory_1.ValidationErrorFactory.InvalidNamespace({
                    expr: module.namespace,
                    attributes: {
                        prefix,
                    },
                }));
            }
        });
    }
    return errors;
};
exports.validateNamespace = validateNamespace;
/**
 * Validate the imports in a module.
 *
 * @param module ACDL file or ASK Module to validate.
 * @param checker type checker for querying the expressions.
 */
const validateImports = (module, checker) => {
    var _a;
    return ((_a = module.imports) === null || _a === void 0 ? void 0 : _a.map((imprt) => {
        if (imprt.kind === "ImportName") {
            if (checker.lookupQualifiedName(imprt.name) === undefined) {
                return [
                    error_factory_1.ValidationErrorFactory.InvalidImport({
                        expr: imprt,
                        attributes: {
                            importName: imprt.name,
                        },
                    }),
                ];
            }
        }
        else {
            const namespace = checker.listNamespace(imprt.name);
            if (namespace === undefined) {
                return [
                    error_factory_1.ValidationErrorFactory.InvalidImportNamespace({
                        expr: imprt,
                        attributes: {
                            importName: imprt.name,
                        },
                    }),
                ];
            }
        }
        return [];
    }).reduce((a, b) => a.concat(b), [])) || [];
};
exports.validateImports = validateImports;
const validateCircularReferences = (source, checker) => {
    var _a, _b, _c, _d, _e, _f, _g;
    if (source.kind === "TypeReference" || source.kind === "TypeDeclaration") {
        const type = source.kind === "TypeReference" ? checker.getType(source) : (_a = checker.getType(source)) === null || _a === void 0 ? void 0 : _a.getTypeType();
        if (type !== undefined) {
            if ((type === null || type === void 0 ? void 0 : type.properties) && type.declaration) {
                for (const prop of type.properties) {
                    if (prop.type === undefined || ((_b = prop.type) === null || _b === void 0 ? void 0 : _b.isOptional()) || ((_c = prop.type) === null || _c === void 0 ? void 0 : _c.isList()) || prop.type.isNothing()) {
                        continue;
                    }
                    else if (prop.type.extends(type) || prop.type.getReferences().has(type.declaration)) {
                        return [
                            error_factory_1.ValidationErrorFactory.CircularReferenceType({
                                expr: source.name,
                                attributes: {
                                    typeName: (_d = type.toString(source)) !== null && _d !== void 0 ? _d : source.name,
                                },
                            }),
                        ];
                    }
                }
            }
        }
    }
    else if ((_e = checker.getReferences(source)) === null || _e === void 0 ? void 0 : _e.has(source)) {
        const expr = source.name;
        return [
            source.kind === "DialogDeclaration"
                ? error_factory_1.ValidationErrorFactory.CircularReferenceDialog({
                    expr,
                    attributes: {
                        dialogName: (_f = source.name) === null || _f === void 0 ? void 0 : _f.name,
                    },
                })
                : error_factory_1.ValidationErrorFactory.CircularReferenceName({
                    expr,
                    attributes: {
                        name: (_g = source.name) === null || _g === void 0 ? void 0 : _g.name,
                    },
                }),
        ];
    }
    return [];
};
exports.validateCircularReferences = validateCircularReferences;
/**
 * Validates all annotations on a node.
 */
const validateAnnotations = (node, checker) => {
    var _a, _b;
    return [
        ...(0, exports.validateNameDeclarationAnnotations)(node, checker),
        ...(0, exports.validateTypeDeclarationAnnotations)(node, checker),
        ...(0, exports.validateDialogDeclarationAnnotations)(node, checker),
        ...((_b = (_a = node.annotations) === null || _a === void 0 ? void 0 : _a.flatMap((ann) => (0, exports.validateAnnotation)(ann, checker))) !== null && _b !== void 0 ? _b : []),
    ];
};
exports.validateAnnotations = validateAnnotations;
/**
 * Validates annotations on name declarations.
 *
 * There are two cases:
 *
 * 1. When the value is a `NameReference`, we should not allow any annotations.
 * 2. When the value is a `variations` call, we should not allow `locale` annotations.
 */
const validateNameDeclarationAnnotations = (node, checker) => {
    var _a, _b, _c;
    const errors = [];
    if (!ask.isNameDeclaration(node)) {
        return errors;
    }
    if (ask.isNameReference(node.expression)) {
        errors.push(...((_b = (_a = node.annotations) === null || _a === void 0 ? void 0 : _a.map((ann) => error_factory_1.ValidationErrorFactory.InvalidAnnotationNameDeclarationNameReference({
            expr: ann,
        }))) !== null && _b !== void 0 ? _b : []));
    }
    if (((_c = node.expression) === null || _c === void 0 ? void 0 : _c.kind) === "Call") {
        const apply = checker.getApply(node.expression);
        if ((apply === null || apply === void 0 ? void 0 : apply.isVariations()) && (node === null || node === void 0 ? void 0 : node.annotations)) {
            for (const ann of node === null || node === void 0 ? void 0 : node.annotations) {
                if (ann.kind === "Annotation" && ann.call && ann.call.kind === "Call") {
                    const annApply = checker.getApply(ann.call);
                    if (annApply === null || annApply === void 0 ? void 0 : annApply.isLocaleAction()) {
                        errors.push(error_factory_1.ValidationErrorFactory.InvalidAnnotationNameDeclarationVariations({
                            expr: ann,
                        }));
                    }
                }
            }
        }
    }
    return errors;
};
exports.validateNameDeclarationAnnotations = validateNameDeclarationAnnotations;
/**
 * Validates annotations on type declarations, and the properties of the type.
 *
 * There is one case:
 *
 * 1. We should not allow `referable` annotation on type properties that aren't catalogs.
 */
const validateTypeDeclarationAnnotations = (node, checker) => {
    var _a, _b, _c, _d;
    const errors = [];
    if (!ask.isTypeDeclaration(node)) {
        return errors;
    }
    for (const property of (_a = node.properties) !== null && _a !== void 0 ? _a : []) {
        for (const ann of (_b = property.annotations) !== null && _b !== void 0 ? _b : []) {
            const apply = checker.getApply(ann.call);
            if (apply === null || apply === void 0 ? void 0 : apply.isReferableAction()) {
                const type = checker.getType(property.type);
                if (!(type === null || type === void 0 ? void 0 : type.hasCatalog())) {
                    errors.push(error_factory_1.ValidationErrorFactory.InvalidReferableAnnotation({
                        expr: ann,
                        attributes: {
                            typeName: (_c = node.name) === null || _c === void 0 ? void 0 : _c.name,
                            propertyName: (_d = property.name) === null || _d === void 0 ? void 0 : _d.name,
                        },
                    }));
                }
            }
        }
    }
    return errors;
};
exports.validateTypeDeclarationAnnotations = validateTypeDeclarationAnnotations;
/**
 * Validates annotations on dialog declarations.
 *
 * There are two cases:
 *
 * 1. When dialog is reusable, we should not allow the dialog to have a `locale` annotation.
 * 2. When dialog is reusable, we should not allow the dialog samples to have a `locale` annotation.
 */
const validateDialogDeclarationAnnotations = (node, checker) => {
    var _a;
    const errors = [];
    if (!ask.isDialogDeclaration(node)) {
        return errors;
    }
    // locale annotation is not allowed on reusable dialog
    if (!checker.project.isRootDialog(node)) {
        if (node.annotations && node.annotations.length > 0) {
            for (const ann of node === null || node === void 0 ? void 0 : node.annotations) {
                if (ann.kind === "Annotation" && ann.call && ann.call.kind === "Call") {
                    const annApply = checker.getApply(ann.call);
                    if (annApply === null || annApply === void 0 ? void 0 : annApply.isLocaleAction()) {
                        errors.push(error_factory_1.ValidationErrorFactory.InvalidAnnotationReusableDialog({
                            expr: ann,
                        }));
                    }
                }
            }
        }
        // locale annotation is not allowed on reusable dialogs' samples
        (_a = node.samples) === null || _a === void 0 ? void 0 : _a.forEach((sample) => {
            if (sample.annotations && sample.annotations.length > 0) {
                for (const ann of sample === null || sample === void 0 ? void 0 : sample.annotations) {
                    if (ann.kind === "Annotation" && ann.call && ann.call.kind === "Call") {
                        const annApply = checker.getApply(ann.call);
                        if (annApply === null || annApply === void 0 ? void 0 : annApply.isLocaleAction()) {
                            errors.push(error_factory_1.ValidationErrorFactory.InvalidAnnotationReusableDialogSample({
                                expr: ann,
                            }));
                        }
                    }
                }
            }
        });
        if (errors.length > 0)
            return errors;
    }
    return errors;
};
exports.validateDialogDeclarationAnnotations = validateDialogDeclarationAnnotations;
/**
 * Validate an Annotation's Call data structure:
 *
 * 1. the annotation type must also be annotated with the meta-annotation `@com.amazon.alexa.ask.conversations.Annotation`.
 * 2. the list of supported targets for the annotation must include the target this annotation is being applied to,
 */
const validateAnnotation = (annotation, checker) => {
    var _a, _b, _c;
    const errors = (0, exports.validateCall)(annotation.call, checker);
    const annotationTarget = ast_1.AnnotationTarget.from(annotation.context.kind);
    const target = checker.getApply(annotation.call);
    const decl = (target === null || target === void 0 ? void 0 : target.decl.kind) === "Type" ? target.decl.declaration : target === null || target === void 0 ? void 0 : target.decl;
    if ((decl === null || decl === void 0 ? void 0 : decl.kind) === "ActionDeclaration") {
        const annotationDescription = (_a = decl.annotations) === null || _a === void 0 ? void 0 : _a.map((a) => checker.getApply(a.call)).find((a) => a === null || a === void 0 ? void 0 : a.isAnnotationAction());
        if (annotationDescription) {
            const allowMultiple = annotationDescription.getAnnotationAllowMultiple();
            if (allowMultiple === false) {
                const duplicates = (_b = annotation.context.annotations) === null || _b === void 0 ? void 0 : _b.filter((an) => { var _a, _b, _c, _d; return ((_c = (_b = (_a = checker.getApply(an.call)) === null || _a === void 0 ? void 0 : _a.decl) === null || _b === void 0 ? void 0 : _b.name) === null || _c === void 0 ? void 0 : _c.name) === ((_d = decl.name) === null || _d === void 0 ? void 0 : _d.name); });
                if (duplicates && duplicates.length > 1) {
                    errors.push(error_factory_1.ValidationErrorFactory.InvalidAnnotationMultiple({
                        expr: annotation,
                        attributes: {
                            annotatedType: target === null || target === void 0 ? void 0 : target.getName(),
                        },
                    }));
                }
            }
            const targets = annotationDescription.getAnnotationTargets();
            if ((targets === null || targets === void 0 ? void 0 : targets.find((a) => a === annotationTarget)) === undefined) {
                errors.push(error_factory_1.ValidationErrorFactory.InvalidAnnotationTarget({
                    expr: annotation,
                    attributes: {
                        annotatedType: target === null || target === void 0 ? void 0 : target.getName(),
                        annotationTarget,
                        expectedAnnotationTargets: (_c = targets === null || targets === void 0 ? void 0 : targets.map((t) => `'AnnotationTarget.${t}'`).join(", ")) !== null && _c !== void 0 ? _c : "",
                    },
                }));
            }
        }
        else {
            errors.push(error_factory_1.ValidationErrorFactory.InvalidAnnotationMetaAnnotation({
                expr: annotation,
                attributes: {
                    annotationType: target === null || target === void 0 ? void 0 : target.getName(),
                },
            }));
        }
    }
    return errors;
};
exports.validateAnnotation = validateAnnotation;
const validateExpression = (expr, checker) => {
    if (expr === undefined) {
        return [];
    }
    if (expr.kind === "Module") {
        // return validateModule(expr, checker);
    }
    else if (expr.kind === "InteractionDeclaration") {
        return (0, exports.validateInteractionDeclaration)(expr, checker);
    }
    else if (expr.kind === "Correction") {
        return (0, exports.validateCorrection)(expr, checker);
    }
    else if (expr.kind === "ActionDeclaration") {
        return (0, exports.validateActionDeclaration)(expr, checker);
    }
    else if (expr.kind === "Argument") {
        return (0, exports.validateExpression)(expr.value, checker);
    }
    else if (expr.kind === "Call") {
        return (0, exports.validateCall)(expr, checker);
    }
    else if (expr.kind === "Condition") {
        return (0, exports.validateCondition)(expr, checker);
    }
    else if (expr.kind === "DialogDeclaration") {
        return (0, exports.validateDialogDeclaration)(expr, checker);
    }
    else if (expr.kind === "EnumDeclaration") {
        return (0, exports.validateEnumDeclaration)(expr, checker);
    }
    else if (expr.kind === "NameDeclaration") {
        return (0, exports.validateNameDeclaration)(expr, checker);
    }
    else if (expr.kind === "NameReference") {
        return (0, exports.validateNameReference)(expr, checker);
    }
    else if (expr.kind === "Sample") {
        return (0, exports.validateSample)(expr, checker);
    }
    else if (expr.kind === "TypeDeclaration") {
        return (0, exports.validateTypeDeclaration)(expr, checker);
    }
    else if (expr.kind === "Block") {
        return (0, exports.validateBlock)(expr, checker);
    }
    else if (expr.kind === "PropertyReference") {
        return (0, exports.validatePropertyReference)(expr, checker);
    }
    else if (expr.kind === "When") {
        return (0, exports.validateExpression)(expr.expression, checker);
    }
    console.warn(`can not validate expression kind '${expr.kind}'`);
    return [];
};
exports.validateExpression = validateExpression;
const validateDialogDeclaration = (dialog, checker) => {
    var _a, _b, _c;
    return [
        ...(dialog.samples === undefined || dialog.samples.length === 0
            ? [
                error_factory_1.ValidationErrorFactory.EmptyDialog({
                    expr: dialog,
                    attributes: {
                        dialogName: (_a = dialog.name) === null || _a === void 0 ? void 0 : _a.name,
                    },
                }),
            ]
            : []),
        ...(0, exports.validateTypeReference)(dialog.returnType, checker),
        ...(0, exports.validateTypeParameters)(dialog.genericArguments, checker),
        ...(dialog.arguments ? validateArgumentDeclarations(dialog.arguments, checker, true) : []),
        ...(0, exports.validateAnnotations)(dialog, checker),
        ...((_c = (_b = dialog.samples) === null || _b === void 0 ? void 0 : _b.map((sample) => (0, exports.validateSample)(sample, checker)).reduce((a, b) => a.concat(b), [])) !== null && _c !== void 0 ? _c : []),
        ...(0, exports.validateCircularReferences)(dialog, checker),
    ];
};
exports.validateDialogDeclaration = validateDialogDeclaration;
const validateSample = (sample, checker) => {
    var _a, _b;
    if (sample.scope === undefined) {
        return [];
    }
    const dialog = sample.context;
    const errors = [...(0, exports.validateBlock)(sample.scope, checker), ...(0, exports.validateAnnotations)(sample, checker)];
    if (errors.length > 0) {
        return errors; // return if basic parse errors exist for each sample, before checking from entire sample scope
    }
    if (sample.scope.expressions === undefined || sample.scope.expressions.length === 0) {
        errors.push(error_factory_1.ValidationErrorFactory.EmptySample({
            expr: sample,
            attributes: {
                dialogName: (_a = dialog.name) === null || _a === void 0 ? void 0 : _a.name,
            },
        }));
    }
    const expectedType = checker.getType(dialog.returnType) || checker.void;
    const actualType = checker.getType(sample.scope) || checker.void;
    if (!expectedType.isVoid() && !expectedType.isNothing() && !actualType.extends(expectedType)) {
        const last = sample.scope.expressions[sample.scope.expressions.length - 1];
        if (last) {
            errors.push(error_factory_1.ValidationErrorFactory.TypeErrorDialogLastExpr({
                expr: last,
                attributes: {
                    dialogName: (_b = dialog.name) === null || _b === void 0 ? void 0 : _b.name,
                    expectedType: expectedType.toString(sample),
                    actualType: actualType.toString(sample),
                },
            }));
        }
    }
    return errors;
};
exports.validateSample = validateSample;
function hasName(expr) {
    var _a;
    return ((expr.kind === "NameDeclaration" ||
        expr.kind === "TypeDeclaration" ||
        expr.kind === "ActionDeclaration" ||
        expr.kind === "DialogDeclaration") &&
        ((_a = expr.name) === null || _a === void 0 ? void 0 : _a.name) !== undefined);
}
const validateDuplicateNames = (scope, checker) => {
    var _a, _b, _c;
    const errors = [];
    if (scope.kind === "Module") {
        const moduleUri = checker.getUri(scope);
        (_a = scope.expressions) === null || _a === void 0 ? void 0 : _a.forEach((expr) => {
            var _a;
            if (expr.kind !== "InteractionDeclaration" && ((_a = expr.name) === null || _a === void 0 ? void 0 : _a.name)) {
                const declarations = checker.global.scope.get(expr.name.name);
                if (Array.isArray(declarations)) {
                    const files = Array.from(new Set(declarations
                        .map((d) => checker.getUri(d))
                        .filter((uri) => uri !== undefined && uri !== moduleUri)
                        .map((uri) => path_1.default.relative(checker.project.config.rootDir, uri))
                        .map((uri) => `'${(0, util_1.trimScheme)(uri)}'`)));
                    errors.push(error_factory_1.ValidationErrorFactory.DuplicateNameDeclarationInModule({
                        expr,
                        attributes: {
                            name: expr.name.name,
                            filesLength: files.length,
                            fileNames: files.join(", "),
                        },
                    }));
                }
            }
        });
    }
    else {
        const seen = new Set();
        const duplicates = new Set();
        const parentScope = checker.getVisibleNames(scope.context, false);
        (_b = scope.expressions) === null || _b === void 0 ? void 0 : _b.forEach((expr) => {
            if (hasName(expr)) {
                const name = expr.name.name;
                if (seen.has(name) || (parentScope === null || parentScope === void 0 ? void 0 : parentScope.has(name)) || checker.global.scope.has(name)) {
                    duplicates.add(name);
                }
                seen.add(name);
            }
        });
        (_c = scope.expressions) === null || _c === void 0 ? void 0 : _c.forEach((expr) => {
            var _a;
            if (hasName(expr) && duplicates.has((_a = expr.name) === null || _a === void 0 ? void 0 : _a.name)) {
                errors.push(error_factory_1.ValidationErrorFactory.DuplicateNameDeclaration({
                    expr: expr.name,
                    attributes: {
                        name: expr.name.name,
                    },
                }));
            }
        });
    }
    return errors;
};
exports.validateDuplicateNames = validateDuplicateNames;
/**
 * Validates a name expression.
 *
 * @param checker
 * @param name
 */
const validateNameDeclaration = (name, checker) => {
    var _a;
    const errors = name.expression ? [...(0, exports.validateExpression)(name.expression, checker)] : [];
    errors.push(...(0, exports.validateCircularReferences)(name, checker));
    errors.push(...(0, exports.validateAnnotations)(name, checker));
    const valueType = checker.getType(name.expression);
    const explicitType = name.type ? checker.instantiateTypeReference(name.type) : undefined;
    if (name.type !== undefined) {
        errors.push(...(0, exports.validateTypeReference)(name.type, checker));
    }
    if (explicitType !== undefined && valueType !== undefined) {
        if (!valueType.extends(explicitType)) {
            errors.push((0, error_1.typeError)(valueType, explicitType, name, name.name));
        }
    }
    if (valueType === undefined) {
    }
    // declare a name with an expression of type Nothing is invalid
    const nameType = checker.getType(name.expression);
    if ((nameType === null || nameType === void 0 ? void 0 : nameType.isNothing()) || (nameType === null || nameType === void 0 ? void 0 : nameType.isVoid())) {
        errors.push(error_factory_1.ValidationErrorFactory.InvalidNameDeclaration({
            expr: name.name,
            attributes: {
                name: (_a = name.name) === null || _a === void 0 ? void 0 : _a.name,
                nothingTypeName: checker.nothing.toString(name),
                voidTypeName: checker.void.toString(name),
            },
        }));
    }
    return errors;
};
exports.validateNameDeclaration = validateNameDeclaration;
const validateNameReference = (id, checker) => [...(0, exports.validateName)(id, checker)];
exports.validateNameReference = validateNameReference;
const validateName = (id, checker) => {
    var _a;
    const found = lookupName(id, id.name);
    if (found === undefined) {
        // For Call, it's valid when name is undefined, like listLiteral
        if (id.name !== undefined && id.kind !== "Call") {
            return [(0, error_1.nameNotFound)(id.name)];
        }
    }
    else if (Array.isArray(found)) {
        const declares = found
            .map((f) => {
            if (f.kind === "ResponseTemplate") {
                return f.type === ask.ResponseTemplateType.Prompt ? `'prompts.${f.name}'` : `'displays.${f.name}'`;
            }
            return `'${f.name.name}'`;
        })
            .filter((f) => f !== undefined)
            .join(", ");
        return [
            error_factory_1.ValidationErrorFactory.AmbiguousNameReference({
                expr: id,
                attributes: {
                    name: (_a = id.name) === null || _a === void 0 ? void 0 : _a.name,
                    possibleName: declares,
                },
            }),
        ];
    }
    return [];
    function lookupName(scope, name) {
        if (name === undefined) {
            return undefined;
        }
        const nameStr = typeof name === "string" ? name : name.name;
        if (checker.global.scope.has(nameStr)) {
            return checker.global.scope.get(nameStr);
        }
        const lexicalScope = checker.getVisibleNames(scope);
        if (lexicalScope === null || lexicalScope === void 0 ? void 0 : lexicalScope.has(nameStr)) {
            return lexicalScope.get(nameStr);
        }
        return undefined;
    }
};
exports.validateName = validateName;
const validateActionDeclaration = (action, checker) => [
    ...(0, exports.validateTypeReference)(action.returnType, checker),
    ...(0, exports.validateTypeParameters)(action.genericArguments, checker),
    ...(action.arguments ? validateArgumentDeclarations(action.arguments, checker, false) : []),
    ...(0, exports.validateAnnotations)(action, checker),
    ...(0, exports.validateAnnotatedActionDeclaration)(action, checker),
];
exports.validateActionDeclaration = validateActionDeclaration;
/**
 * Validates that an ActionDeclaration that is annotated with the `@annotation` meta-annotation has a return type of void.
 */
const validateAnnotatedActionDeclaration = (action, checker) => {
    var _a, _b, _c;
    if (((_a = action.annotations) === null || _a === void 0 ? void 0 : _a.find((a) => checker.qualifyName(action, a.call.name) === ast_1.AlexaConversations.annotation)) !== undefined) {
        const actionDeclType = checker.getType(action);
        if ((actionDeclType === null || actionDeclType === void 0 ? void 0 : actionDeclType.isAction()) && ((_b = actionDeclType === null || actionDeclType === void 0 ? void 0 : actionDeclType.getPropertyType("returnType")) === null || _b === void 0 ? void 0 : _b.getTypeType())) {
            const returnType = (_c = actionDeclType === null || actionDeclType === void 0 ? void 0 : actionDeclType.getPropertyType("returnType")) === null || _c === void 0 ? void 0 : _c.getTypeType();
            if (returnType && !(returnType.isVoid() || returnType.isNothing())) {
                return [
                    error_factory_1.ValidationErrorFactory.InvalidAnnotationMetaAnnotationReturnType({
                        expr: action.name,
                    }),
                ];
            }
        }
    }
    return [];
};
exports.validateAnnotatedActionDeclaration = validateAnnotatedActionDeclaration;
function validateArgumentDeclarations(args, checker, isDialogArgument) {
    var _a, _b, _c, _d, _e;
    const seen = new Set();
    const duplicates = new Set();
    const errors = [];
    let isRequiredArgAllowed = true;
    for (let i = 0; i < args.length; i++) {
        const arg = args[i];
        if ((_a = arg.name) === null || _a === void 0 ? void 0 : _a.name) {
            if (seen.has(arg.name.name)) {
                duplicates.add(arg.name.name);
            }
            seen.add((_b = arg.name) === null || _b === void 0 ? void 0 : _b.name);
        }
        const hasMoreArgs = args[i + 1] !== undefined;
        const type = checker.instantiateTypeReference(arg.type);
        if ((type === null || type === void 0 ? void 0 : type.isArgs()) && hasMoreArgs) {
            errors.push(error_factory_1.ValidationErrorFactory.VarArgsMustBeLast({
                expr: arg,
            }));
        }
        if (type === null || type === void 0 ? void 0 : type.isOptional()) {
            isRequiredArgAllowed = false;
        }
        else if (!(type === null || type === void 0 ? void 0 : type.isArgs()) && !isRequiredArgAllowed) {
            errors.push(error_factory_1.ValidationErrorFactory.RequiredArgExistAfterOptionalArg({
                expr: arg,
                attributes: {
                    argumentName: (_c = arg.name) === null || _c === void 0 ? void 0 : _c.name,
                },
            }));
        }
        errors.push(...validateArgumentDeclaration(arg, checker, isDialogArgument));
    }
    for (const arg of args) {
        if (((_d = arg.name) === null || _d === void 0 ? void 0 : _d.name) && duplicates.has((_e = arg.name) === null || _e === void 0 ? void 0 : _e.name)) {
            errors.push(error_factory_1.ValidationErrorFactory.DuplicateArgument({
                expr: arg.name,
                attributes: {
                    argumentName: arg.name.name,
                },
            }));
        }
    }
    return errors;
}
exports.validateArgumentDeclarations = validateArgumentDeclarations;
function validateArgumentDeclaration(arg, checker, isDialogArgument = false) {
    const errors = [
        ...(0, exports.validateExpression)(arg.defaultExpression, checker),
        ...(0, exports.validateTypeReference)(arg.type, checker),
        ...(0, exports.validateAnnotations)(arg, checker),
    ];
    if (arg.name === undefined) {
        errors.push(error_factory_1.ValidationErrorFactory.SyntaxError({
            expr: (0, error_factory_1.getExpressionIfLocField)(arg.type, arg),
            overrideMessage: "expected name for argument declaration.",
        }));
    }
    if (arg.defaultExpression) {
        const actualType = checker.getType(arg.defaultExpression);
        const expectedType = checker.getType(arg.type);
        if (actualType && expectedType && !actualType.extends(expectedType)) {
            errors.push((0, error_1.typeError)(actualType, expectedType, arg.defaultExpression, arg.defaultExpression));
        }
        // Arguments' default value must be nothing except dialogArgument
        if (!isDialogArgument) {
            const thing = checker.getThing(arg.defaultExpression);
            if (!((thing === null || thing === void 0 ? void 0 : thing.isNothing()) && thing.isLiteral())) {
                errors.push(error_factory_1.ValidationErrorFactory.InvalidApiArgumentDefaultValue({
                    expr: arg,
                }));
            }
        }
        else {
            // for dialogArgument, the default expression can’t call dialogs, user defined APIs or branch with conditions
        }
    }
    return errors;
}
exports.validateArgumentDeclaration = validateArgumentDeclaration;
/**
 * Validate that an EnumDeclaration has at least one item and no duplicate items.
 *
 * ```acdl
 * enum E {} // invalid
 * enum E { // invalid
 *   A
 *   A
 * }
 * enum E { // valid
 *   A
 *   B
 * }
 * ```
 */
const validateEnumDeclaration = (enumDecl, checker) => {
    var _a, _b, _c, _d;
    if (enumDecl.items === undefined || enumDecl.items.length === 0) {
        return [
            error_factory_1.ValidationErrorFactory.EmptyEnumDeclaration({
                expr: enumDecl,
                attributes: {
                    enumName: (_a = enumDecl.name) === null || _a === void 0 ? void 0 : _a.name,
                },
            }),
            ...(0, exports.validateAnnotations)(enumDecl, checker),
        ];
    }
    const names = new Set();
    const dups = new Set();
    (_b = enumDecl.items) === null || _b === void 0 ? void 0 : _b.forEach((item) => {
        var _a, _b;
        if ((_a = item.name) === null || _a === void 0 ? void 0 : _a.name) {
            if (names.has((_b = item.name) === null || _b === void 0 ? void 0 : _b.name)) {
                dups.add(item.name.name);
            }
            else {
                names.add(item.name.name);
            }
        }
    });
    if (dups.size === 0) {
        return [];
    }
    return [
        ...(0, exports.validateAnnotations)(enumDecl, checker),
        ...((_d = (_c = enumDecl.items) === null || _c === void 0 ? void 0 : _c.map((item) => {
            var _a;
            if (((_a = item.name) === null || _a === void 0 ? void 0 : _a.name) && dups.has(item.name.name)) {
                return error_factory_1.ValidationErrorFactory.DuplicateEnumItem({
                    expr: item,
                    attributes: {
                        enumItemName: item.name.name,
                    },
                });
            }
            return undefined;
        }).filter((e) => e !== undefined)) !== null && _d !== void 0 ? _d : []),
    ];
};
exports.validateEnumDeclaration = validateEnumDeclaration;
const validateTypeDeclaration = (type, checker) => {
    var _a;
    return [
        ...(0, exports.validateTypeReferences)((_a = type.properties) === null || _a === void 0 ? void 0 : _a.map((p) => p.type).filter((t) => t !== undefined), checker),
        ...(0, exports.validateTypeReferences)(type.extensions, checker),
        ...(0, exports.validateTypeParameters)(type.genericArguments, checker),
        ...(0, exports.validateCircularReferences)(type, checker),
        ...(0, exports.validateAnnotations)(type, checker),
        ...(0, exports.validateTypeDeclarationProperties)(type, checker),
    ];
};
exports.validateTypeDeclaration = validateTypeDeclaration;
/**
 * validate the properties in typeDecl are not duplicate
 */
const validateTypeDeclarationProperties = (typeDecl, checker) => {
    var _a, _b, _c;
    const seen = new Set((_a = typeDecl.extensions) === null || _a === void 0 ? void 0 : _a.map((ext) => { var _a, _b, _c; return (_c = (_b = (_a = checker.getType(ext)) === null || _a === void 0 ? void 0 : _a.properties) === null || _b === void 0 ? void 0 : _b.map((p) => p.name)) !== null && _c !== void 0 ? _c : []; }).reduce((a, b) => a.concat(b), []));
    return ((_c = (_b = typeDecl.properties) === null || _b === void 0 ? void 0 : _b.map((prop) => {
        var _a;
        const name = (_a = prop.name) === null || _a === void 0 ? void 0 : _a.name;
        if (name === undefined) {
            return error_factory_1.ValidationErrorFactory.SyntaxError({
                expr: (0, error_factory_1.getExpressionIfLocField)(prop.type, prop),
                overrideMessage: "expected property name.",
            });
        }
        if (seen.has(name)) {
            return error_factory_1.ValidationErrorFactory.DuplicatePropertyRedeclared({
                expr: prop,
                attributes: {
                    propertyName: name,
                },
            });
        }
        seen.add(name);
        return undefined;
    }).filter((e) => e !== undefined)) !== null && _c !== void 0 ? _c : []);
};
exports.validateTypeDeclarationProperties = validateTypeDeclarationProperties;
const validateTypeParameters = (params, checker) => { var _a; return (_a = params === null || params === void 0 ? void 0 : params.map((param) => (0, exports.validateTypeParameter)(param, checker)).flat()) !== null && _a !== void 0 ? _a : []; };
exports.validateTypeParameters = validateTypeParameters;
const validateTypeParameter = (param, checker) => (0, exports.validateTypeReferences)(param.constraints, checker);
exports.validateTypeParameter = validateTypeParameter;
const validateTypeReferences = (refs, checker) => { var _a; return (_a = refs === null || refs === void 0 ? void 0 : refs.map((ref) => (0, exports.validateTypeReference)(ref, checker)).flat()) !== null && _a !== void 0 ? _a : []; };
exports.validateTypeReferences = validateTypeReferences;
const validateTypeReference = (ref, checker) => {
    var _a, _b;
    const errors = [];
    if (ref) {
        // check if the call name could be resolved, error if fail to resolve call name
        errors.push(...(0, exports.validateName)(ref, checker));
        if (errors.length > 0) {
            return errors;
        }
        errors.push(...(0, exports.validateCircularReferences)(ref, checker));
        const typeDecl = checker.lookupTypeReference(ref);
        if (typeDecl === undefined) {
            errors.push((0, error_1.nameNotFound)(ref.name));
        }
        if (ref.arguments) {
            for (const arg of ref.arguments) {
                errors.push(...(0, exports.validateTypeReference)(arg, checker));
            }
        }
        if (typeDecl && errors.length === 0) {
            const type = checker.instantiateTypeReference(ref);
            if (type !== undefined) {
                if (typeDecl.kind === "TypeDeclaration") {
                    if (typeDecl.genericArguments) {
                        if (typeDecl.genericArguments.length !== ((_a = type.genericArguments) === null || _a === void 0 ? void 0 : _a.length)) {
                            errors.push(error_factory_1.ValidationErrorFactory.TypeErrorRequiredTypeArguments({
                                expr: ref,
                                attributes: {
                                    typeDeclarationName: (_b = typeDecl.name) === null || _b === void 0 ? void 0 : _b.name,
                                    numArguments: typeDecl.genericArguments.length,
                                },
                            }));
                        }
                        else {
                            type.genericArguments.forEach((genericArgument, i) => {
                                var _a, _b;
                                const typeParameter = (_a = typeDecl.genericArguments) === null || _a === void 0 ? void 0 : _a[i];
                                if (typeParameter !== undefined && typeParameter.constraints && genericArgument !== undefined) {
                                    for (const constraint of typeParameter.constraints) {
                                        const constraintType = checker.instantiateTypeReference(constraint, type.environment);
                                        if (constraintType && !genericArgument.extends(constraintType)) {
                                            errors.push((0, error_1.typeError)(genericArgument, constraintType, ref, (_b = ref.arguments) === null || _b === void 0 ? void 0 : _b[i]));
                                        }
                                    }
                                }
                            });
                        }
                    }
                }
            }
        }
    }
    return errors;
};
exports.validateTypeReference = validateTypeReference;
/**
 * Validate an `alexa.lang.property` call to access a property on a type.
 *
 * @param ref call expression representing the access of a property on another expression
 */
const validatePropertyReference = (ref, checker) => {
    // property does not exist
    const { name } = ref;
    const expr = ref.expression;
    const exprType = checker.getType(expr);
    if ((name === null || name === void 0 ? void 0 : name.name) === undefined) {
        return [
            error_factory_1.ValidationErrorFactory.IdentifierExpected({
                expr: (0, error_factory_1.getExpressionIfLocField)(ref.name, ref),
            }),
        ];
    }
    const qualifiedName = ask.PropertyReference.tryResolveQualifiedName(ref);
    if (qualifiedName !== undefined && checker.lookupQualifiedName(qualifiedName) !== undefined) {
        return [];
    }
    if (exprType !== undefined) {
        const prop = exprType.getProperty(name.name);
        if (prop === undefined) {
            return [
                ...(0, exports.validateExpression)(expr, checker),
                error_factory_1.ValidationErrorFactory.UnknownProperty({
                    expr: (0, error_factory_1.getExpressionIfLocField)(ref.name, ref),
                    attributes: {
                        propertyName: name.name,
                        typeName: exprType.toString(ref),
                    },
                }),
            ];
        }
    }
    return (0, exports.validateExpression)(expr, checker);
};
exports.validatePropertyReference = validatePropertyReference;
const validateUtteranceTypeWrapper = (apply) => {
    var _a;
    const errors = [];
    if (!apply.isUtterances()) {
        return [];
    }
    const utteranceType = (_a = apply.getReturnType()) === null || _a === void 0 ? void 0 : _a.getUtteranceEventType();
    if (!(utteranceType === null || utteranceType === void 0 ? void 0 : utteranceType.isValidUtteranceWrapper())) {
        errors.push(error_factory_1.ValidationErrorFactory.UtteranceEventTypeMustReferToWrapper({
            expr: utteranceType === null || utteranceType === void 0 ? void 0 : utteranceType.declaration,
            attributes: {
                typeName: utteranceType === null || utteranceType === void 0 ? void 0 : utteranceType.shortName,
            },
        }));
    }
    return errors;
};
exports.validateUtteranceTypeWrapper = validateUtteranceTypeWrapper;
/**
 * Validate a Call to a Type or an Action:
 *
 * - Resolve its declaration and throw errors if it cannot be found.
 * - Infer generic arguments if they aren't provided and flag errors if that cannot be achieved.
 * - Validate that all required arguments are provided and that types of arguments match declaration.
 */
const validateCall = (call, checker) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
    const errors = [];
    // check if the call name could be resolved, error if fail to resolve call name
    errors.push(...(0, exports.validateName)(call, checker));
    const getPropertyMap = (0, lazy_1.memoize)((type) => type.getPropertyMap());
    if (errors.length > 0) {
        return errors;
    }
    const apply = checker.getApply(call);
    if (call.genericArguments) {
        errors.push(...(0, exports.validateTypeReferences)(call.genericArguments, checker));
    }
    if (apply === undefined) {
        if (((_a = call.name) === null || _a === void 0 ? void 0 : _a.name) === undefined) {
            // could not infer anonymous type
            errors.push(error_factory_1.ValidationErrorFactory.CouldNotInferAnonymousType({
                expr: call,
            }));
        }
        else {
            errors.push((0, error_1.nameNotFound)(call.name));
        }
    }
    else {
        errors.push(...(0, validate_skill_1.validateSkillCallContext)(apply));
        errors.push(...(0, exports.validateRequireCall)(apply, checker));
        errors.push(...(0, exports.validateValidateArgAnnotation)(apply, checker));
        if (apply.isAnnotation()) {
            // if this is a call to an Annotation, we must ensure that it is in an Annotation context.
            if (apply.call.context.kind !== "Annotation" && apply.call.getSample() !== undefined) {
                errors.push(error_factory_1.ValidationErrorFactory.InvalidAnnotationCall({
                    expr: call,
                    attributes: {
                        annotationTarget: apply.getName(),
                    },
                }));
            }
        }
        else if (apply.isEventDecl() || apply.isFileAccessAction() || apply.isSkillAction() || apply.isWelcome() || apply.isVariations()) {
            if (apply.isSkillAction()) {
                errors.push(...(0, validate_skill_1.validateSkillCallContext)(apply));
            }
            else if (call.context.kind !== "NameDeclaration" || ((_b = call.context.context) === null || _b === void 0 ? void 0 : _b.kind) !== "Module") {
                errors.push(error_factory_1.ValidationErrorFactory.InvalidCallContextModuleNameDeclaration({
                    expr: call,
                    attributes: {
                        actionName: checker.qualifyName(call, (_c = call.name) === null || _c === void 0 ? void 0 : _c.name),
                    },
                }));
            }
            if (apply.isWelcome()) {
                const actionValue = apply.getArgumentValue("action");
                const actionType = checker.getType(actionValue);
                if (actionType === null || actionType === void 0 ? void 0 : actionType.isAction()) {
                    if (actionType.isBuiltIn()) {
                        errors.push(error_factory_1.ValidationErrorFactory.InvalidWelcomeAction({
                            expr: actionValue,
                        }));
                    }
                    const returnType = (_d = actionType.getPropertyType("returnType")) === null || _d === void 0 ? void 0 : _d.getTypeType();
                    if (returnType) {
                        if (returnType.isVoid() || returnType.isNothing()) {
                            errors.push(error_factory_1.ValidationErrorFactory.InvalidWelcomeActionReturnValue({
                                expr: actionValue,
                            }));
                        }
                    }
                }
            }
            else if (apply.isVariations()) {
                errors.push(...(0, exports.validateVariations)(call, checker));
            }
        }
        else if (apply.isType() || apply.isGetListItem()) {
            // TODO: should we allow operators and get list item?
            if (apply.isResetArguments() || apply.isResetAllArguments() || apply.isEnsureArgOrder()) {
                const argumentsValue = apply.getArgumentValue("arguments");
                // for ResetArguments, all the arguments in the list should from same api
                if (apply.isResetArguments()) {
                    errors.push(...(0, evaluate_1.validateArgumentListThing)(checker.getThing(argumentsValue), argumentsValue));
                }
                // for EnsureArgOrder, all the arguments in the list should be required args
                if (apply.isEnsureArgOrder()) {
                    errors.push(...(0, exports.validateEnsureArgOrder)(apply, checker));
                }
            }
        }
        else if (call.findInContext(ask.isAnnotation) === undefined) {
            errors.push(...(0, exports.validateCallContext)(call, checker));
        }
        if (apply.isUtterances()) {
            errors.push(...(0, exports.validateUtteranceTypeWrapper)(apply, checker));
        }
        if (apply.getName() === ast_1.AlexaConversations.utterances && checker.isNameReference((_e = apply.getArguments()) === null || _e === void 0 ? void 0 : _e.samples.value)) {
            errors.push(...(0, exports.validateNamedArguments)(apply, checker, false)); // check the arguments but don't type check - we will do this in a custom way
            // special case - we're calling utterances with a name reference to a List.
            // we need to find that list and validate
            const value = (_f = apply.getArguments()) === null || _f === void 0 ? void 0 : _f.samples.value;
            const found = checker.resolveNameReference(value);
            const foundType = checker.getType(value);
            if (ask.isCall(found) && ask.isListLiteral(found.arguments) && (foundType === null || foundType === void 0 ? void 0 : foundType.isList())) {
                // if empty list, throw error
                if (found.arguments.items.length === 0) {
                    errors.push(error_factory_1.ValidationErrorFactory.EmptyUtteranceSet({
                        expr: found.arguments,
                    }));
                }
                else if ((_g = foundType.getListItemType()) === null || _g === void 0 ? void 0 : _g.isString()) {
                    // yes, we are referencing a List<String> literal
                    const utteranceType = (_h = apply.getGenericArguments()) === null || _h === void 0 ? void 0 : _h[0];
                    for (const item of found.arguments.items) {
                        if (item.item !== undefined) {
                            // TODO: should we change the error message to provide more help? the error is associated with an afar list literal but attached to the name reference
                            errors.push(...(0, exports.validateUtterance)(item.item, utteranceType, getPropertyMap).map((e) => {
                                var _a;
                                return ({
                                    ...e,
                                    loc: value.loc,
                                    uri: (_a = e.uri) !== null && _a !== void 0 ? _a : value.uri,
                                });
                            }));
                        }
                    }
                }
            }
            else {
                errors.push(error_factory_1.ValidationErrorFactory.InvalidUtteranceArg({
                    expr: value,
                }));
            }
        }
        else {
            if (apply.getName() === ast_1.AlexaConversations.utterances) {
                const utteranceList = (_k = (_j = apply.getArguments()) === null || _j === void 0 ? void 0 : _j.samples) === null || _k === void 0 ? void 0 : _k.value;
                if ((utteranceList === null || utteranceList === void 0 ? void 0 : utteranceList.kind) === "Call" && ask.isListLiteral(utteranceList.arguments) && utteranceList.arguments.items.length === 0) {
                    errors.push(error_factory_1.ValidationErrorFactory.EmptyUtteranceSet({
                        expr: utteranceList.arguments,
                    }));
                }
            }
            errors.push(...(0, exports.validateNamedArguments)(apply, checker));
            const genericArguments = apply.getGenericArguments();
            const genericEnvironment = apply.getGenericEnvironment();
            if (apply.decl.genericArguments !== undefined && genericArguments === undefined) {
                errors.push(error_factory_1.ValidationErrorFactory.CouldNotInferGenericArguments({
                    expr: call,
                    attributes: {
                        argumentName: (_l = apply.decl.name) === null || _l === void 0 ? void 0 : _l.name,
                    },
                }));
            }
            else if (genericArguments && ((_m = apply.decl.genericArguments) === null || _m === void 0 ? void 0 : _m.length) === (genericArguments === null || genericArguments === void 0 ? void 0 : genericArguments.length)) {
                const decl = apply.decl.kind === "Type" ? apply.decl.declaration : apply.decl;
                if (decl &&
                    decl.kind !== "TypeParameter" &&
                    decl.kind !== "SlotType" &&
                    decl.kind !== "EnumDeclaration" &&
                    decl.kind !== "EnumItemDeclaration" &&
                    decl.kind !== "TypeReference") {
                    (_o = decl.genericArguments) === null || _o === void 0 ? void 0 : _o.forEach((genericArgument, i) => {
                        var _a, _b;
                        const actualType = genericArguments === null || genericArguments === void 0 ? void 0 : genericArguments[i];
                        if (actualType && genericArgument.constraints) {
                            for (const constraint of genericArgument.constraints) {
                                const expectedType = checker.instantiateTypeReference(constraint, genericEnvironment);
                                if (expectedType && !actualType.extends(expectedType)) {
                                    errors.push((0, error_1.typeError)(actualType, expectedType, (_b = (_a = call === null || call === void 0 ? void 0 : call.genericArguments) === null || _a === void 0 ? void 0 : _a[i]) !== null && _b !== void 0 ? _b : call));
                                }
                            }
                        }
                    });
                }
            }
            const returnType = apply.getReturnType();
            if (apply.isType() && returnType) {
                // this is a Type expression, e.g. `Person { name = "sam" }` or `[1, 2]` or `"hello"`
                if (call.arguments === null && !(returnType.isVoid() || returnType.isNothing() || returnType.isOptional())) {
                    errors.push((0, error_1.typeError)(returnType, checker.void, call));
                }
                else if (typeof call.arguments === "string" && !returnType.isStringLike()) {
                    errors.push((0, error_1.typeError)(returnType, checker.string, call));
                }
                else if (typeof call.arguments === "number" && !returnType.isNumber()) {
                    errors.push((0, error_1.typeError)(returnType, checker.number, call));
                }
                else if (typeof call.arguments === "boolean" && !returnType.isBoolean()) {
                    errors.push((0, error_1.typeError)(returnType, checker.boolean, call));
                }
                else if (ask.isListLiteral(call.arguments) && !returnType.isList()) {
                    errors.push(error_factory_1.ValidationErrorFactory.TypeErrorListType({
                        expr: call,
                    }));
                }
                if (returnType.isUtterance()) {
                    const utteranceType = returnType.getUtteranceType();
                    errors.push(...(0, exports.validateUtterance)(call, utteranceType, getPropertyMap));
                }
                if (ask.isListLiteral(call.arguments) && returnType.isList()) {
                    const expectedType = returnType.getListItemType();
                    if (expectedType) {
                        for (const item of call.arguments.items) {
                            errors.push(...(0, exports.validateExpression)(item.item, checker));
                            const actualType = checker.getType(item.item);
                            if (actualType) {
                                if (!actualType.extends(expectedType)) {
                                    errors.push(error_factory_1.ValidationErrorFactory.TypeErrorListItem({
                                        expr: (0, error_factory_1.getExpressionIfLocField)(item.item, item),
                                        attributes: {
                                            actualType: actualType.toString(item.item),
                                            expectedType: expectedType.toString(item.item),
                                        },
                                    }));
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return errors;
};
exports.validateCall = validateCall;
/**
 * validate the variations call
 * 1. The argument value can't use duplicate locale info
 * 2. SkillLevelResponses can't be used as an argument of variations call
 * 3. prompts.abc can't be used as an argument of variations call
 *
 * Invalid case example:
 * 1. duplicate locales
 * ```
 *  @locale(Locale.en_US)
 *  promptUS = utterances<Person>([
 *     "hi I am American my name is {name}",
 *     "hi I am American my name is {name} and i am {age} years old"
 *  ])
 *
 *  @locale(Locale.en_US, Locale.en_GB)
 *  promptGB = utterances<Person>([
 *    "hi I am British my name is {name}",
 *    "hi I am British my name is {name} and i am {age} years old"
 *  ])
 *  u = variations(promptUS, promptGB)
 * ```
 *
 * 2. SkillLevelResponses used as argument
 * ```
 * skillLevelResponsesEN = SkillLevelResponses { ... }
 * skillLevelResponsesGB = SkillLevelResponses { ... }
 *
 * skillLevelResponses = variations(skillLevelResponsesEN, skillLevelResponsesGB)
 * ```
 *
 * 3. prompts used as argument
 * ```
 * skillLevelResponses = variations(prompts.AlexaConversationsWelcome, prompts.AlexaConversationsOutOfDomain)
 * ```
 */
const validateVariations = (call, checker) => {
    const apply = checker.getApply(call);
    if (apply === undefined) {
        return [];
    }
    const errors = [];
    const usedLocale = new Map();
    const argumentValueThing = apply.getArgumentValueThing("variations");
    if (argumentValueThing === null || argumentValueThing === void 0 ? void 0 : argumentValueThing.isList()) {
        const items = argumentValueThing.getListItems();
        items === null || items === void 0 ? void 0 : items.forEach((item) => {
            var _a, _b, _c;
            if (((_a = item === null || item === void 0 ? void 0 : item.item) === null || _a === void 0 ? void 0 : _a.kind) === "NameReference" || ((_b = item === null || item === void 0 ? void 0 : item.item) === null || _b === void 0 ? void 0 : _b.kind) === "PropertyReference") {
                // TODO: validate the item is not SkillLevelResponses or prompts
                const thing = checker.getThing(item.item);
                if (thing === null || thing === void 0 ? void 0 : thing.type.isSkillLevelResponses()) {
                    // SkillLevelResponses can't be used as an argument of variations call
                    errors.push(error_factory_1.ValidationErrorFactory.InvalidVariationsArgumentSkillLevelResponses({
                        expr: (0, error_factory_1.getExpressionIfLocField)(item.item, item),
                    }));
                }
                else if (((_c = checker.resolveNameReference(item.item)) === null || _c === void 0 ? void 0 : _c.kind) === "ResponseTemplate") {
                    errors.push(error_factory_1.ValidationErrorFactory.InvalidVariationsArgumentResponsePrompts({
                        expr: (0, error_factory_1.getExpressionIfLocField)(item.item, item),
                    }));
                }
                else {
                    const locales = checker.collectLocaleInfo(item.item);
                    locales.forEach((locale) => {
                        var _a, _b;
                        if (usedLocale.has(locale)) {
                            errors.push(error_factory_1.ValidationErrorFactory.DuplicateLocale({
                                expr: (0, error_factory_1.getExpressionIfLocField)(item.item, item),
                                attributes: {
                                    locale,
                                    variationItem: usedLocale.get(locale),
                                },
                            }));
                        }
                        else {
                            usedLocale.set(locale, (_b = (_a = item.item) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.name);
                        }
                    });
                }
            }
        });
    }
    return errors;
};
exports.validateVariations = validateVariations;
/**
 * Validate that a call to a User Defined API or Dialog is not contained within another call.
 *
 * Validate that this Call is allowed in this Context.
 *
 * @param call
 * @param checker
 * @returns
 */
const validateCallContext = (call, checker) => {
    const apply = checker.getApply(call);
    if (apply !== undefined) {
        const callType = apply.isUserDefinedApi()
            ? `user defined API '${apply.getName()}'`
            : apply.isDialog()
                ? "a dialog"
                : apply.isBuiltin()
                    ? `'${apply.getShortName()}'`
                    : "an action";
        return walkCallContext(call.context);
        function walkCallContext(context) {
            if (context === undefined || ask.isDialogDeclaration(context)) {
                return [];
            }
            if (context.kind === "InteractionDeclaration" || context.kind === "Correction") {
                // TODO: add validation checks - https://github.com/alexa/ask-ac/issues/869
                return [];
            }
            if (ask.isModule(context)) {
                return [
                    error_factory_1.ValidationErrorFactory.InvalidCallContextInModule({
                        expr: call,
                        attributes: {
                            callType,
                        },
                    }),
                ];
            }
            if (context.kind === "When") {
                if (!(apply.isOperator() || apply.isNativeAction())) {
                    return [
                        error_factory_1.ValidationErrorFactory.InvalidCallContextInCondition({
                            expr: call,
                            attributes: {
                                callType,
                            },
                        }),
                    ];
                }
            }
            else if (context.kind === "Call") {
                const contextApply = checker.getApply(context);
                if ((contextApply === null || contextApply === void 0 ? void 0 : contextApply.isUserDefinedApi()) || (contextApply === null || contextApply === void 0 ? void 0 : contextApply.isDialog()) || (contextApply === null || contextApply === void 0 ? void 0 : contextApply.isType())) {
                    const contextType = contextApply.isType() ? (contextApply.isList() ? "a list item" : "a property") : "an argument";
                    const errorArguments = {
                        expr: call,
                        attributes: {
                            callType,
                            contextType,
                        },
                    };
                    if (apply.isOperator()) {
                        return [error_factory_1.ValidationErrorFactory.InvalidCallContextComparison(errorArguments)];
                    }
                    if (apply.isNativeAction()) {
                        return [error_factory_1.ValidationErrorFactory.InvalidCallContextType(errorArguments)];
                    }
                    return [error_factory_1.ValidationErrorFactory.InvalidCallContextTypeInline(errorArguments)];
                }
            }
            return walkCallContext(context.context);
        }
    }
    return [];
};
exports.validateCallContext = validateCallContext;
/**
 * Validates that a `validateArg` annotation matches the following rules:
 * 1. action must have at least one argument
 * 2. condition must reference at least one of those arguments in its boolean expression
 * 3. at least one argument must be referenced
 * 4. that argument must be from the same action that this validateArg annotation is attached to.
 *
 * @param apply Apply instance for the validateArg annotation call.
 * @param checker static TypeChecker instance
 * @returns validation errors
 * @see https://github.com/alexa/ask-ac/issues/690
 */
const validateValidateArgAnnotation = (apply, checker) => {
    var _a;
    if (!apply.isValidateArg()) {
        return [];
    }
    const action = (_a = apply.checker.getThing(apply.call.context.context)) === null || _a === void 0 ? void 0 : _a.asAction();
    if (action === undefined) {
        // we don't need to error here - validateArg's annotation targets restricts it to an Action
        return [];
    }
    if (action.origin.arguments === undefined || action.origin.arguments.length === 0) {
        return [
            error_factory_1.ValidationErrorFactory.InvalidAnnotationValidateArg({
                expr: apply.call,
            }),
        ];
    }
    const argumentsNode = apply.getArgumentValue("arguments");
    const conditionNode = apply.getArgumentValue("condition");
    const condition = apply.getArgumentValueThing("condition");
    const args = apply.getArgumentValueThing("arguments");
    const argsNode = apply.getArgumentValue("arguments");
    const requestPromptNode = apply.getArgumentValue("requestPrompt");
    const requestPrompt = apply.getArgumentValueThing("requestPrompt");
    return [
        ...validateArguments(),
        ...validateConditionReferencesAtLeastOneArgument(),
        ...validateConditionOperations(conditionNode, undefined),
        ...validateRequestPrompt(),
    ];
    function validateConditionReferencesAtLeastOneArgument() {
        var _a;
        if (conditionNode === undefined) {
            // type error
            return [];
        }
        if (condition === null || condition === void 0 ? void 0 : condition.isNothing()) {
            return [
                error_factory_1.ValidationErrorFactory.IllegalNothingValueBoolean({
                    expr: (0, error_factory_1.getExpressionIfLocField)(conditionNode, apply.call),
                }),
            ];
        }
        if (!hasAtLeastOneArgumentNameReference(conditionNode)) {
            return [
                error_factory_1.ValidationErrorFactory.InvalidAnnotationValidateArgCondition({
                    expr: conditionNode,
                    attributes: {
                        actionArguments: (_a = action === null || action === void 0 ? void 0 : action.origin.arguments) === null || _a === void 0 ? void 0 : _a.map((arg) => { var _a; return `'${(_a = arg.name) === null || _a === void 0 ? void 0 : _a.name}'`; }).join(","),
                        actionName: action.actionName,
                    },
                }),
            ];
        }
        return [];
    }
    function hasAtLeastOneArgumentNameReference(node) {
        if (node.kind === "NameReference") {
            const referencedNode = checker.resolveNameReference(node);
            if ((referencedNode === null || referencedNode === void 0 ? void 0 : referencedNode.kind) === "ArgumentDeclaration") {
                return true;
            }
        }
        return (0, visit_1.collect)(node, hasAtLeastOneArgumentNameReference, (a, b) => a || b, false);
    }
    function validateConditionOperations(node, errorExpr) {
        if (node === undefined) {
            return [];
        }
        if (node.kind === "NameReference") {
            return validateConditionOperations(checker.resolveNameReference(node), (0, error_factory_1.getExpressionIfLocField)(errorExpr, node));
        }
        if (node.kind === "PropertyReference") {
            return validateConditionOperations(checker.resolveNameReferenceToCall(node), (0, error_factory_1.getExpressionIfLocField)(errorExpr, node));
        }
        if (node.kind === "Call") {
            const apply = checker.getApply(node);
            if (apply === undefined) {
                // type error
                return [];
            }
            if (apply.isType()) {
                if (node.arguments === null ||
                    typeof node.arguments === "string" ||
                    typeof node.arguments === "number" ||
                    typeof node.arguments === "boolean" ||
                    ask.isListLiteral(node.arguments)) {
                    if (ask.isListLiteral(node.arguments)) {
                        // check that each of the values in the list are also valid
                        return node.arguments.items.map((item) => validateConditionOperations(item.item, errorExpr)).flat();
                    }
                    // literal value comparisons are allowed
                    return [];
                }
                return [
                    error_factory_1.ValidationErrorFactory.InvalidBooleanExpressionTypeLiteral({
                        expr: (0, error_factory_1.getExpressionIfLocField)(errorExpr, node, conditionNode),
                        attributes: {
                            typeName: apply.getName(),
                        },
                    }),
                ];
            }
            if (apply.isBinaryOperator()) {
                return [
                    ...validateConditionOperations(apply.getArgumentValue("left"), errorExpr),
                    ...validateConditionOperations(apply.getArgumentValue("right"), errorExpr),
                ];
            }
            if (apply.isNot() || apply.isIs() || apply.isExists()) {
                return validateConditionOperations(apply.getArgumentValue("right"), errorExpr);
            }
            if (apply.isSize()) {
                return validateConditionOperations(apply.getArgumentValue("list"), errorExpr);
            }
            if (apply.isGetListItem()) {
                return [
                    ...validateConditionOperations(apply.getArgumentValue("list"), errorExpr),
                    ...validateConditionOperations(apply.getArgumentValue("index"), errorExpr),
                ];
            }
            if (apply.isLength()) {
                return validateConditionOperations(apply.getArgumentValue("s"), errorExpr);
            }
            return [
                error_factory_1.ValidationErrorFactory.InvalidBooleanExpressionAction({
                    expr: (0, error_factory_1.getExpressionIfLocField)(errorExpr, node, conditionNode),
                    attributes: {
                        actionName: apply.getName(),
                    },
                }),
            ];
        }
        return [];
    }
    function validateRequestPrompt() {
        if (requestPromptNode === undefined) {
            // type error
            return [];
        }
        if (requestPrompt === null || requestPrompt === void 0 ? void 0 : requestPrompt.isNothing()) {
            return [
                error_factory_1.ValidationErrorFactory.IllegalNothingValueResponsePrompt({
                    expr: (0, error_factory_1.getExpressionIfLocField)(requestPromptNode, apply.call),
                }),
            ];
        }
        return [];
    }
    function validateArguments() {
        var _a, _b;
        if (argumentsNode === undefined || (args === null || args === void 0 ? void 0 : args.isNothing())) {
            return [
                error_factory_1.ValidationErrorFactory.ExpectedNonEmptyList({
                    expr: apply.call,
                    attributes: {
                        actionName: (_a = action.name) === null || _a === void 0 ? void 0 : _a.name,
                    },
                }),
            ];
        }
        if (!(args === null || args === void 0 ? void 0 : args.isLiteral())) {
            return [
                error_factory_1.ValidationErrorFactory.ExpectedLiteralValue({
                    expr: (0, error_factory_1.getExpressionIfLocField)(argumentsNode, apply.call),
                }),
            ];
        }
        if (!args.isList()) {
            return [];
        }
        const items = args.getItems();
        if (!(items === null || items === void 0 ? void 0 : items.length)) {
            return [
                error_factory_1.ValidationErrorFactory.ExpectedNonEmptyList({
                    expr: (0, error_factory_1.getExpressionIfLocField)(argumentsNode, apply.call),
                    attributes: {
                        actionName: (_b = action.name) === null || _b === void 0 ? void 0 : _b.name,
                    },
                }),
            ];
        }
        return items.flatMap((arg, i) => {
            var _a;
            // if this arguments is an inline literal list, we will place the error on the specific item in the list
            const argsExpr = (argsNode === null || argsNode === void 0 ? void 0 : argsNode.kind) === "Call" && ask.isListLiteral(argsNode.arguments)
                ? (_a = argsNode.arguments.items[i]) === null || _a === void 0 ? void 0 : _a.item
                : (0, error_factory_1.getExpressionIfLocField)(argumentsNode, apply.call);
            if (arg === undefined) {
                return []; // type error;
            }
            if (arg.isNothing()) {
                return [
                    error_factory_1.ValidationErrorFactory.IllegalNothingValueActionArgument({
                        expr: argsExpr,
                        attributes: {
                            actionName: action === null || action === void 0 ? void 0 : action.actionName,
                        },
                    }),
                ];
            }
            if (arg.isArgument() && arg.action && !arg.action.equals(action)) {
                return [
                    error_factory_1.ValidationErrorFactory.MismatchedActionArgumentsValidateArguments({
                        expr: argsExpr,
                        attributes: {
                            argumentName: arg.argumentName,
                            actualActionName: arg.action.actionName,
                            expectedActionName: action.actionName,
                        },
                    }),
                ];
            }
            return [];
        });
    }
    return [];
};
exports.validateValidateArgAnnotation = validateValidateArgAnnotation;
/**
 * Validate a call to `require` - an internal action to reference a file from disk.
 */
const validateRequireCall = (apply, checker) => {
    var _a, _b;
    const name = apply.getName();
    if (name === ast_1.AlexaConversations.apl || name === ast_1.AlexaConversations.apla) {
        const pathArg = (_a = apply.getArguments()) === null || _a === void 0 ? void 0 : _a.path;
        if (((_b = pathArg === null || pathArg === void 0 ? void 0 : pathArg.value) === null || _b === void 0 ? void 0 : _b.kind) === "Call") {
            const filePath = ask.isUtterance(pathArg.value.arguments)
                ? pathArg.value.arguments.text
                : typeof pathArg.value.arguments === "string"
                    ? pathArg.value.arguments
                    : undefined;
            if (filePath !== undefined) {
                const uri = checker.getUri(apply.call);
                if (uri !== undefined) {
                    let absolutePath;
                    if (path_1.default.isAbsolute(filePath)) {
                        absolutePath = filePath;
                    }
                    else {
                        absolutePath = path_1.default.join(uri, "..", filePath);
                    }
                    if (!fs_extra_1.default.existsSync(absolutePath)) {
                        // TODO: don't use synchronous IO in the validators
                        // see: https://github.com/alexa/ask-ac/issues/504
                        return [
                            error_factory_1.ValidationErrorFactory.PathNotAccessible({
                                expr: pathArg.value,
                                attributes: {
                                    filePath,
                                },
                            }),
                        ];
                    }
                    // developer could provide folder name only
                    // auto fill the 'document.json' in path
                    const status = fs_extra_1.default.statSync(absolutePath);
                    let documentPath;
                    if (status.isFile()) {
                        documentPath = absolutePath;
                    }
                    else {
                        documentPath = path_1.default.join(absolutePath, constants_1.Constants.APLADocumentFileName);
                    }
                    // The document can only use the name 'document.json'
                    if (path_1.default.basename(documentPath) !== constants_1.Constants.APLADocumentFileName) {
                        const errorArguments = {
                            expr: pathArg.value,
                            attributes: {
                                documentName: path_1.default.basename(documentPath),
                            },
                        };
                        return [
                            name === ast_1.AlexaConversations.apl
                                ? error_factory_1.ValidationErrorFactory.InvalidAplDocumentName(errorArguments)
                                : error_factory_1.ValidationErrorFactory.InvalidAplaDocumentName(errorArguments),
                        ];
                    }
                    // if no document.json found
                    if (!fs_extra_1.default.existsSync(documentPath)) {
                        return [
                            error_factory_1.ValidationErrorFactory.FileNotFound({
                                expr: pathArg.value,
                                attributes: {
                                    filePath,
                                },
                            }),
                        ];
                    }
                    // Type check to make sure apla action point to APLA document
                    // and apl action point to APL document
                    try {
                        const content = fs_extra_1.default.readFileSync(documentPath);
                        const json = JSON.parse(content.toString("utf8"));
                        const { type } = json;
                        const errorArguments = {
                            expr: pathArg.value,
                            attributes: {
                                filePath,
                                fileType: type === undefined ? type : `"${type}"`,
                            },
                        };
                        if (name === ast_1.AlexaConversations.apl && type !== constants_1.APLFileType.APL) {
                            return [error_factory_1.ValidationErrorFactory.InvalidFileTypeApl(errorArguments)];
                        }
                        if (name === ast_1.AlexaConversations.apla && !constants_1.APLAFileTypes.includes(type)) {
                            return [error_factory_1.ValidationErrorFactory.InvalidFileTypeApla(errorArguments)];
                        }
                    }
                    catch (err) {
                        return [
                            error_factory_1.ValidationErrorFactory.FileReadError({
                                expr: pathArg.value,
                                attributes: {
                                    filePath,
                                },
                                overrideMessage: err.message,
                            }),
                        ];
                    }
                }
            }
        }
    }
    return [];
};
exports.validateRequireCall = validateRequireCall;
/**
 * Validate the arguments passed to a Call against the target declaration.
 *
 * - Finds missing required arguments.
 * - Detect unknown arguments, whether by name or position. Account for var-args.
 * - Detect when positional arguments are used after named ones.
 * - Check that the types of arguments.
 *
 * @param apply
 * @param checker
 * @param checkType should we type check? default true
 */
const validateNamedArguments = (apply, checker, checkType = true) => {
    var _a, _b, _c;
    if (apply.isType() && ((_a = apply.getReturnType()) === null || _a === void 0 ? void 0 : _a.isPrimitive())) {
        return [];
    }
    const { call } = apply;
    const errors = [];
    let isPositionalAllowed = true;
    let position = 0;
    const seenNamedArgs = new Set();
    if (Array.isArray(call.arguments)) {
        for (const argument of call.arguments) {
            // recursively descend and validate this argument
            errors.push(...(0, exports.validateExpression)(argument, checker));
            if ((_b = argument.name) === null || _b === void 0 ? void 0 : _b.name) {
                isPositionalAllowed = false;
                const decl = apply.argumentDeclIndex[argument.name.name];
                if (decl === undefined) {
                    unknown();
                }
                if (seenNamedArgs.has(argument.name.name)) {
                    errors.push(error_factory_1.ValidationErrorFactory.InvalidApiArgumentRedeclare({
                        expr: argument,
                        attributes: {
                            argumentName: argument.name.name,
                        },
                    }));
                }
                else {
                    seenNamedArgs.add(argument.name.name);
                }
            }
            else if (isPositionalAllowed) {
                const decl = (_c = apply.argumentDeclarations) === null || _c === void 0 ? void 0 : _c[position];
                const env = apply.getGenericEnvironment();
                const declType = (decl === null || decl === void 0 ? void 0 : decl.kind) === "ArgumentDeclaration" ? checker.instantiateTypeReference(decl.type, env) : decl === null || decl === void 0 ? void 0 : decl.type;
                if (declType === undefined) {
                    unknown();
                }
                if ((declType === null || declType === void 0 ? void 0 : declType.isArgs()) !== true) {
                    // if this is not var args, increment the declaration position
                    // otherwise, subsequent arguments are considered an item in the var-args list
                    position += 1;
                }
            }
            else {
                errors.push(error_factory_1.ValidationErrorFactory.PositionalArgumentAfterName({
                    expr: argument,
                }));
                // If positional arguments are used after a named argument, skip the rest validation
                return errors;
            }
            function unknown() {
                var _a, _b, _c;
                let error;
                const expr = (0, error_factory_1.getExpressionIfLocField)(argument.name, argument);
                if ((_a = argument.name) === null || _a === void 0 ? void 0 : _a.name) {
                    error = apply.isType()
                        ? error_factory_1.ValidationErrorFactory.UnknownProperty({
                            expr,
                            attributes: {
                                propertyName: argument.name.name,
                                typeName: (_c = (_b = apply.getReturnType()) === null || _b === void 0 ? void 0 : _b.name) === null || _c === void 0 ? void 0 : _c.name,
                            },
                        })
                        : error_factory_1.ValidationErrorFactory.UnknownArgument({
                            expr,
                            attributes: {
                                argumentName: argument.name.name,
                                callName: apply.getName(),
                            },
                        });
                }
                else {
                    const errorArguments = {
                        expr,
                        attributes: {
                            index: argument.index,
                        },
                    };
                    error = apply.isType()
                        ? error_factory_1.ValidationErrorFactory.UnknownPropertyIndex(errorArguments)
                        : error_factory_1.ValidationErrorFactory.UnknownArgumentIndex(errorArguments);
                }
                errors.push(error);
            }
        }
    }
    const missing = new Set(apply.requiredArguments);
    const sanitizedArguments = apply.getArguments();
    if (sanitizedArguments !== undefined) {
        // arguments are grouped by name and var-args are assembled into a List.
        // now go through each argument and type check it.
        for (const [name, argument] of Object.entries(sanitizedArguments || {})) {
            missing.delete(name);
            if (checkType) {
                // special case: when property of an event result is of type optional, and there's request prompt available for that property
                // Then we should treat this property as not optional
                let actualType = checker.getType(argument.value);
                if (actualType === null || actualType === void 0 ? void 0 : actualType.isOptional()) {
                    // for backwards compatibility
                    // Temporarily make Optional<T> assignable to T
                    // TODO: get argumentEnsured condition back once we are ready to ship breaking changes
                    // if (checker.isArgumentEnsured(call, apply.decl, name)) {
                    while (actualType === null || actualType === void 0 ? void 0 : actualType.isOptional()) {
                        actualType = actualType.getOptionalType();
                    }
                }
                const expectedType = apply === null || apply === void 0 ? void 0 : apply.getType(argument);
                if (actualType && expectedType) {
                    if (!actualType.extends(expectedType)) {
                        errors.push((0, error_1.typeError)(actualType, expectedType, apply.call, argument));
                    }
                }
            }
        }
    }
    if (missing.size > 0) {
        errors.push(apply.isType()
            ? error_factory_1.ValidationErrorFactory.MissingProperties({
                expr: call,
                attributes: { properties: Array.from(missing.values()).join(",") },
            })
            : error_factory_1.ValidationErrorFactory.MissingArguments({
                expr: call,
                attributes: { args: Array.from(missing.values()).join(",") },
            }));
    }
    errors.push(...validateBinaryOperator(apply));
    return errors;
};
exports.validateNamedArguments = validateNamedArguments;
function validateBinaryOperator(apply) {
    var _a, _b;
    if (apply.isBinaryOperator()) {
        // special-case logic for binary operators - the types must match
        // for example, if we have `1 == "hello"`, then it will be inferred as
        // `equals<Thing>(1, "hello")` // there is no type error here
        // for these cases, we will explicitly check that either:
        // 1. left extends right
        // 2. right extends left
        const left = (_a = apply.getArgumentValueThing("left")) === null || _a === void 0 ? void 0 : _a.type;
        const right = (_b = apply.getArgumentValueThing("right")) === null || _b === void 0 ? void 0 : _b.type;
        if (left && right) {
            if (!left.extends(right) && !right.extends(left)) {
                return [
                    error_factory_1.ValidationErrorFactory.TypeErrorIncomparableExpr({
                        expr: apply.call,
                        attributes: {
                            leftExpr: left.toString(apply.call),
                            rightExpr: right.toString(apply.call),
                        },
                    }),
                ];
            }
        }
    }
    return [];
}
exports.validateBinaryOperator = validateBinaryOperator;
/**
 * Validates the utterance in expr
 * @param expr expression containing the utterance to validate
 * @param utteranceType type for utterance
 * @param getPropertyMap memoized type's getPropertyMap
 * @returns
 */
const validateUtterance = (expr, utteranceType, getPropertyMap) => {
    var _a;
    let errors = [];
    // throw error if the item in a list is not literal string
    if (expr.kind !== "Call" || (!(typeof expr.arguments === "string") && !ask.isUtterance(expr.arguments))) {
        return [error_factory_1.ValidationErrorFactory.InvalidUtteranceItem({ expr })];
    }
    let utterance;
    if (ask.isUtterance(expr.arguments)) {
        utterance = expr.arguments.text;
    }
    else {
        utterance = expr.arguments;
    }
    // Validate the utterance text here. Currently only validating it's not an empty string
    if (utterance.trim().length === 0) {
        return [error_factory_1.ValidationErrorFactory.EmptyUtteranceString({ expr })];
    }
    if (!utteranceType) {
        return errors;
    }
    const utteranceTypeRequiredProperties = utteranceType.getRequiredProperties();
    if (typeof expr.arguments === "string" && utteranceTypeRequiredProperties.size > 0) {
        errors.push(error_factory_1.ValidationErrorFactory.MissingPropertiesOnType({
            expr,
            attributes: {
                requiredProperties: Array.from(utteranceTypeRequiredProperties.values())
                    .map((p) => `${p.name}`)
                    .join(", "),
                typeName: utteranceType.toString(expr),
            },
        }));
    }
    else if (ask.isUtterance(expr.arguments)) {
        const propertyPaths = [];
        const pathsSeen = new Set();
        for (const name of expr.arguments.names || []) {
            if (!name.name) {
                continue;
            }
            if (pathsSeen.has(name.name)) {
                errors.push(error_factory_1.ValidationErrorFactory.DuplicateProperty({
                    expr: name,
                    attributes: {
                        propertyName: name.name,
                    },
                }));
            }
            pathsSeen.add(name.name);
            propertyPaths.push(name.name);
        }
        const { errors: propertyTreeErrors, root: propertyTreeRoot } = property_node_1.PropertyNode.buildPropertyTree(expr.arguments.names || [], utteranceType, expr, getPropertyMap);
        errors = [...errors, ...propertyTreeErrors];
        // Verify required properties at each tree level.
        // The tree traversal algorithm is the standard queue breadth first
        // (level by level) logic where we quee the root and while the queue
        // is not empty we unqueue element and queue its children.
        const queue = [propertyTreeRoot];
        while (queue.length !== 0) {
            const propertyNode = queue.shift();
            const requiredProperties = propertyNode === null || propertyNode === void 0 ? void 0 : propertyNode.propertyType.getRequiredProperties();
            for (const child of propertyNode.children.values()) {
                // mark this child as present by removing from requiredProperties
                requiredProperties.delete(child.property.name);
                // queue child which is a part of standard queue traversal
                queue.push(child);
            }
            for (const requiredProperty of requiredProperties.values()) {
                // if it's a list, then it's allowed to be omitted - omitted means empty list?
                if (!((_a = requiredProperty.type) === null || _a === void 0 ? void 0 : _a.isList())) {
                    errors.push(error_factory_1.ValidationErrorFactory.MissingPropertiesOnUtteranceType({
                        expr,
                        attributes: {
                            utterance: expr.arguments.text,
                            propertyName: requiredProperty.name,
                            typeName: utteranceType.toString(expr),
                        },
                    }));
                }
            }
        }
    }
    return errors;
};
exports.validateUtterance = validateUtterance;
const validateCondition = (condition, checker) => {
    const errors = [];
    if (condition.when !== undefined) {
        errors.push(...(0, exports.validateExpression)(condition.when, checker));
    }
    if (condition.then === undefined) {
        console.warn("undefined then");
    }
    else {
        errors.push(...(0, exports.validateConditionBlock)(condition.then, checker));
        errors.push(...(0, exports.validateBlock)(condition.then, checker));
    }
    if (condition.else) {
        errors.push(...(0, exports.validateConditionBlock)(condition.else, checker));
        errors.push(...(0, exports.validateBlock)(condition.else, checker));
    }
    const whenType = checker.getType(condition.when);
    if ((whenType === null || whenType === void 0 ? void 0 : whenType.isBoolean()) === false) {
        errors.push(error_factory_1.ValidationErrorFactory.TypeErrorWhenBoolean({
            expr: (0, error_factory_1.getExpressionIfLocField)(condition.when, condition),
            attributes: {
                whenType: whenType.toString(condition.when),
                whenCondition: checker.boolean.toString(condition.when),
            },
        }));
    }
    return errors;
};
exports.validateCondition = validateCondition;
/**
 * Validate that a Condition Block has expressions.
 */
const validateConditionBlock = (scope) => {
    var _a;
    return scope.expressions === undefined || ((_a = scope.expressions) === null || _a === void 0 ? void 0 : _a.length) === 0
        ? [
            error_factory_1.ValidationErrorFactory.EmptyConditionBlock({
                expr: scope,
            }),
        ]
        : [];
};
exports.validateConditionBlock = validateConditionBlock;
/**
 * Validate EnsureOrder action call
 * 1. All the args in the list should from same api
 * 2. All the args in the list should be required args
 *
 * Related Github feature request:
 * https://github.com/alexa/ask-ac/issues/553
 */
const validateEnsureArgOrder = (apply, checker) => {
    const errors = [];
    if (apply.isEnsureArgOrder()) {
        const argumentsValue = apply.getArgumentValue("arguments");
        const argumentsValueThing = checker.getThing(argumentsValue);
        // all the arguments in the list should be required args
        errors.push(...(0, evaluate_1.validateArgumentListThing)(argumentsValueThing, argumentsValue));
        if ((argumentsValueThing === null || argumentsValueThing === void 0 ? void 0 : argumentsValueThing.isLiteral()) && argumentsValueThing.isList()) {
            const items = argumentsValueThing.getItems();
            items === null || items === void 0 ? void 0 : items.forEach((item) => {
                var _a, _b, _c;
                if (item === null || item === void 0 ? void 0 : item.isArgument()) {
                    const referencedArgumentDeclaration = item.getReferencedActionArgumentDeclaration();
                    const type = checker.getType(referencedArgumentDeclaration === null || referencedArgumentDeclaration === void 0 ? void 0 : referencedArgumentDeclaration.type);
                    if (type === null || type === void 0 ? void 0 : type.isOptional()) {
                        errors.push(error_factory_1.ValidationErrorFactory.InvalidEnsureArgOptional({
                            expr: item,
                            attributes: {
                                argumentName: (_a = referencedArgumentDeclaration === null || referencedArgumentDeclaration === void 0 ? void 0 : referencedArgumentDeclaration.name) === null || _a === void 0 ? void 0 : _a.name,
                                actionName: (_c = (_b = referencedArgumentDeclaration === null || referencedArgumentDeclaration === void 0 ? void 0 : referencedArgumentDeclaration.context) === null || _b === void 0 ? void 0 : _b.name) === null || _c === void 0 ? void 0 : _c.name,
                            },
                        }));
                    }
                }
            });
        }
    }
    return errors;
};
exports.validateEnsureArgOrder = validateEnsureArgOrder;
const validateInteractionDeclaration = (action, checker) => [
    ...(0, exports.validateAnnotations)(action, checker),
    ...(0, exports.validateExpression)(action.scope, checker),
];
exports.validateInteractionDeclaration = validateInteractionDeclaration;
const validateCorrection = (action, checker) => [
    ...(0, exports.validateExpression)(action.actual, checker),
    ...(0, exports.validateExpression)(action.expected, checker),
];
exports.validateCorrection = validateCorrection;
//# sourceMappingURL=data:application/json;base64,