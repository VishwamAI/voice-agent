import { guard } from "./guard";
import { Tree } from "./tree";
/**
 * Check whether an expression is an `ActionDeclaration`.
 */
export const isActionDeclaration = guard("ActionDeclaration");
/**
 * This node in AST represents an Action Declaration.
 * <code>
 *     action ReturnType actionName(Type1 arg1, Type2 arg2)
 *     action S actionName&lt;T, S&gt;(Type1 arg1, T arg2)
 * </code>
 */
export class ActionDeclaration extends Tree {
    constructor(
    /**
     * Name of the Action.
     */
    name, 
    /**
     * List of arguments to action.
     */
    args, 
    /**
     * Return type for the Action.
     *
     * If an action doesn't define an output, it will be set Nothing.
     */
    returnType, 
    /**
     * List of generic arguments in action.
     * <code>action S actionName<T, S>(Type1 arg1, T arg2)</code>
     * T and S are type parameters here.
     */
    genericArguments, 
    /**
     * Annotations attached to this Action Declaration.
     */
    annotations, loc) {
        super("ActionDeclaration", loc);
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: name
        });
        Object.defineProperty(this, "returnType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: returnType
        });
        Object.defineProperty(this, "genericArguments", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: genericArguments
        });
        Object.defineProperty(this, "annotations", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: annotations
        });
        /**
         * List of arguments to action.
         */
        Object.defineProperty(this, "arguments", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.arguments = args;
        this.setAsParentOn(name);
        this.setAsParentOn(args);
        this.setAsParentOn(returnType);
        this.setAsParentOn(genericArguments);
        this.setAsParentOn(annotations);
    }
    clone() {
        var _a, _b, _c, _d, _e;
        return new ActionDeclaration((_a = this.name) === null || _a === void 0 ? void 0 : _a.clone(), (_b = this.arguments) === null || _b === void 0 ? void 0 : _b.map((a) => a.clone()), (_c = this.returnType) === null || _c === void 0 ? void 0 : _c.clone(), (_d = this.genericArguments) === null || _d === void 0 ? void 0 : _d.map((a) => a.clone()), (_e = this.annotations) === null || _e === void 0 ? void 0 : _e.map((a) => a.clone()), this.loc);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FzdC9hY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUc5QixPQUFPLEVBQUMsSUFBSSxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBSzVCOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFFOUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxPQUFPLGlCQUFrQixTQUFRLElBQWlDO0lBTXRFO0lBQ0U7O09BRUc7SUFDTSxJQUFXO0lBQ3BCOztPQUVHO0lBQ0gsSUFBNEI7SUFDNUI7Ozs7T0FJRztJQUNNLFVBQTBCO0lBQ25DOzs7O09BSUc7SUFDTSxnQkFBa0M7SUFDM0M7O09BRUc7SUFDTSxXQUEwQixFQUNuQyxHQUFvQjtRQUVwQixLQUFLLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxDQUFDLENBQUM7Ozs7O21CQXZCdkI7Ozs7OzttQkFVQTs7Ozs7O21CQU1BOzs7Ozs7bUJBSUE7O1FBN0JYOztXQUVHO1FBQ0g7Ozs7O1dBQTJDO1FBOEJ6QyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRU0sS0FBSzs7UUFDVixPQUFPLElBQUksaUJBQWlCLENBQzFCLE1BQUEsSUFBSSxDQUFDLElBQUksMENBQUUsS0FBSyxFQUFFLEVBQ2xCLE1BQUEsSUFBSSxDQUFDLFNBQVMsMENBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsRUFDckMsTUFBQSxJQUFJLENBQUMsVUFBVSwwQ0FBRSxLQUFLLEVBQUUsRUFDeEIsTUFBQSxJQUFJLENBQUMsZ0JBQWdCLDBDQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQzVDLE1BQUEsSUFBSSxDQUFDLFdBQVcsMENBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsRUFDdkMsSUFBSSxDQUFDLEdBQUcsQ0FDRCxDQUFDO0lBQ1osQ0FBQztDQUNGIn0=