// Generated from src/syntax/ACDLParser.g4 by ANTLR 4.9.0-SNAPSHOT
import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { Token } from "antlr4ts/Token";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";
import * as Utils from "antlr4ts/misc/Utils";
export class ACDLParser extends Parser {
    constructor(input) {
        super(input);
        this._interp = new ParserATNSimulator(ACDLParser._ATN, this);
    }
    // @Override
    // @NotNull
    get vocabulary() {
        return ACDLParser.VOCABULARY;
    }
    // tslint:enable:no-trailing-whitespace
    // @Override
    get grammarFileName() { return "ACDLParser.g4"; }
    // @Override
    get ruleNames() { return ACDLParser.ruleNames; }
    // @Override
    get serializedATN() { return ACDLParser._serializedATN; }
    createFailedPredicateException(predicate, message) {
        return new FailedPredicateException(this, predicate, message);
    }
    // @RuleVersion(0)
    line() {
        let _localctx = new LineContext(this._ctx, this.state);
        this.enterRule(_localctx, 0, ACDLParser.RULE_line);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 116;
                this.singleLineExpr();
                this.state = 117;
                this.match(ACDLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    singleLineExpr() {
        let _localctx = new SingleLineExprContext(this._ctx, this.state);
        this.enterRule(_localctx, 2, ACDLParser.RULE_singleLineExpr);
        try {
            this.state = 125;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 0, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 119;
                        this.typeDeclaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 120;
                        this.actionDeclaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 121;
                        this.nameDeclaration();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 122;
                        this.qualifiedNameDeclaration();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 123;
                        this.call();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 124;
                        this.correction();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    module() {
        let _localctx = new ModuleContext(this._ctx, this.state);
        this.enterRule(_localctx, 4, ACDLParser.RULE_module);
        let _la;
        try {
            this.state = 139;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 2, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 127;
                        this.namespaceDeclaration();
                        this.state = 129;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            {
                                {
                                    this.state = 128;
                                    this.moduleExpression();
                                }
                            }
                            this.state = 131;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ACDLParser.IMPORT) | (1 << ACDLParser.DIALOG) | (1 << ACDLParser.SAMPLE) | (1 << ACDLParser.INTERACTION) | (1 << ACDLParser.ACTION) | (1 << ACDLParser.TYPE) | (1 << ACDLParser.OPTIONAL) | (1 << ACDLParser.IF) | (1 << ACDLParser.ELSE) | (1 << ACDLParser.ACTUAL) | (1 << ACDLParser.EXPECTED) | (1 << ACDLParser.NULL) | (1 << ACDLParser.NOTHING) | (1 << ACDLParser.VOID) | (1 << ACDLParser.ENUM) | (1 << ACDLParser.AT) | (1 << ACDLParser.IS) | (1 << ACDLParser.IN) | (1 << ACDLParser.NUMBER) | (1 << ACDLParser.BOOL) | (1 << ACDLParser.LPAREN) | (1 << ACDLParser.LBRACE) | (1 << ACDLParser.LBRACK))) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (ACDLParser.NOT - 42)) | (1 << (ACDLParser.IDENTIFIER - 42)) | (1 << (ACDLParser.STRING_START - 42)))) !== 0));
                        this.state = 133;
                        this.match(ACDLParser.EOF);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 135;
                        this.namespaceDeclaration();
                        this.state = 136;
                        this.match(ACDLParser.EOF);
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 138;
                        this.match(ACDLParser.EOF);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    moduleExpression() {
        let _localctx = new ModuleExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 6, ACDLParser.RULE_moduleExpression);
        try {
            this.state = 149;
            this._errHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this._input, 3, this._ctx)) {
                case 1:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 141;
                        this.importDeclaration();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 142;
                        this.actionDeclaration();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 143;
                        this.typeDeclaration();
                    }
                    break;
                case 4:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 144;
                        this.dialogDeclaration();
                    }
                    break;
                case 5:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 145;
                        this.interactionDeclaration();
                    }
                    break;
                case 6:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 146;
                        this.enumDeclaration();
                    }
                    break;
                case 7:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 147;
                        this.qualifiedNameDeclaration();
                    }
                    break;
                case 8:
                    this.enterOuterAlt(_localctx, 8);
                    {
                        this.state = 148;
                        this.expression(0);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    keyword() {
        let _localctx = new KeywordContext(this._ctx, this.state);
        this.enterRule(_localctx, 8, ACDLParser.RULE_keyword);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 151;
                _la = this._input.LA(1);
                if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ACDLParser.DIALOG) | (1 << ACDLParser.INTERACTION) | (1 << ACDLParser.ACTION) | (1 << ACDLParser.TYPE) | (1 << ACDLParser.OPTIONAL) | (1 << ACDLParser.IF) | (1 << ACDLParser.ELSE) | (1 << ACDLParser.ACTUAL) | (1 << ACDLParser.EXPECTED) | (1 << ACDLParser.VOID) | (1 << ACDLParser.ENUM) | (1 << ACDLParser.IS) | (1 << ACDLParser.IN))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    identifier() {
        let _localctx = new IdentifierContext(this._ctx, this.state);
        this.enterRule(_localctx, 10, ACDLParser.RULE_identifier);
        try {
            this.state = 155;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case ACDLParser.IDENTIFIER:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 153;
                        this.match(ACDLParser.IDENTIFIER);
                    }
                    break;
                case ACDLParser.DIALOG:
                case ACDLParser.INTERACTION:
                case ACDLParser.ACTION:
                case ACDLParser.TYPE:
                case ACDLParser.OPTIONAL:
                case ACDLParser.IF:
                case ACDLParser.ELSE:
                case ACDLParser.ACTUAL:
                case ACDLParser.EXPECTED:
                case ACDLParser.VOID:
                case ACDLParser.ENUM:
                case ACDLParser.IS:
                case ACDLParser.IN:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 154;
                        this.keyword();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    qualifiedName() {
        let _localctx = new QualifiedNameContext(this._ctx, this.state);
        this.enterRule(_localctx, 12, ACDLParser.RULE_qualifiedName);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 157;
                this.identifier();
                this.state = 162;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 5, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 158;
                                this.match(ACDLParser.DOT);
                                this.state = 159;
                                this.identifier();
                            }
                        }
                    }
                    this.state = 164;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 5, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    namespaceDeclaration() {
        let _localctx = new NamespaceDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 14, ACDLParser.RULE_namespaceDeclaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 165;
                this.match(ACDLParser.NAMESPACE);
                this.state = 166;
                this.qualifiedName();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    importDeclaration() {
        let _localctx = new ImportDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 16, ACDLParser.RULE_importDeclaration);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 168;
                this.match(ACDLParser.IMPORT);
                this.state = 169;
                this.qualifiedName();
                this.state = 172;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ACDLParser.DOT) {
                    {
                        this.state = 170;
                        this.match(ACDLParser.DOT);
                        this.state = 171;
                        this.match(ACDLParser.ASTERISK);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    enumDeclaration() {
        let _localctx = new EnumDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 18, ACDLParser.RULE_enumDeclaration);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 175;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 7, this._ctx)) {
                    case 1:
                        {
                            this.state = 174;
                            this.annotationList();
                        }
                        break;
                }
                this.state = 177;
                this.match(ACDLParser.ENUM);
                this.state = 178;
                this.qualifiedName();
                this.state = 179;
                this.match(ACDLParser.LBRACE);
                this.state = 183;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ACDLParser.DIALOG) | (1 << ACDLParser.SAMPLE) | (1 << ACDLParser.INTERACTION) | (1 << ACDLParser.ACTION) | (1 << ACDLParser.TYPE) | (1 << ACDLParser.OPTIONAL) | (1 << ACDLParser.IF) | (1 << ACDLParser.ELSE) | (1 << ACDLParser.ACTUAL) | (1 << ACDLParser.EXPECTED) | (1 << ACDLParser.VOID) | (1 << ACDLParser.ENUM) | (1 << ACDLParser.AT) | (1 << ACDLParser.IS) | (1 << ACDLParser.IN))) !== 0) || _la === ACDLParser.IDENTIFIER) {
                    {
                        {
                            this.state = 180;
                            this.enumItem();
                        }
                    }
                    this.state = 185;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 186;
                this.match(ACDLParser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    enumItem() {
        let _localctx = new EnumItemContext(this._ctx, this.state);
        this.enterRule(_localctx, 20, ACDLParser.RULE_enumItem);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 189;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 9, this._ctx)) {
                    case 1:
                        {
                            this.state = 188;
                            this.annotationList();
                        }
                        break;
                }
                this.state = 191;
                this.identifier();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    typeReference() {
        let _localctx = new TypeReferenceContext(this._ctx, this.state);
        this.enterRule(_localctx, 22, ACDLParser.RULE_typeReference);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 194;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 10, this._ctx)) {
                    case 1:
                        {
                            this.state = 193;
                            this.annotationList();
                        }
                        break;
                }
                this.state = 196;
                this.qualifiedName();
                this.state = 198;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 11, this._ctx)) {
                    case 1:
                        {
                            this.state = 197;
                            this.typeArguments();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    typeArguments() {
        let _localctx = new TypeArgumentsContext(this._ctx, this.state);
        this.enterRule(_localctx, 24, ACDLParser.RULE_typeArguments);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 200;
                this.match(ACDLParser.LT);
                this.state = 201;
                this.typeReference();
                this.state = 206;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ACDLParser.COMMA) {
                    {
                        {
                            this.state = 202;
                            this.match(ACDLParser.COMMA);
                            this.state = 203;
                            this.typeReference();
                        }
                    }
                    this.state = 208;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 209;
                this.match(ACDLParser.GT);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    typeDeclaration() {
        let _localctx = new TypeDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 26, ACDLParser.RULE_typeDeclaration);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 212;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 13, this._ctx)) {
                    case 1:
                        {
                            this.state = 211;
                            this.annotationList();
                        }
                        break;
                }
                this.state = 214;
                this.match(ACDLParser.TYPE);
                this.state = 215;
                this.qualifiedName();
                this.state = 217;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ACDLParser.LT) {
                    {
                        this.state = 216;
                        this.typeArgumentDeclarations();
                    }
                }
                this.state = 222;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ACDLParser.COLON) {
                    {
                        {
                            this.state = 219;
                            this.typeConstraint();
                        }
                    }
                    this.state = 224;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 226;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 16, this._ctx)) {
                    case 1:
                        {
                            this.state = 225;
                            this.typeProperties();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    typeArgumentDeclarations() {
        let _localctx = new TypeArgumentDeclarationsContext(this._ctx, this.state);
        this.enterRule(_localctx, 28, ACDLParser.RULE_typeArgumentDeclarations);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 228;
                this.match(ACDLParser.LT);
                this.state = 229;
                this.typeArgumentDeclaration();
                this.state = 234;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ACDLParser.COMMA) {
                    {
                        {
                            this.state = 230;
                            this.match(ACDLParser.COMMA);
                            this.state = 231;
                            this.typeArgumentDeclaration();
                        }
                    }
                    this.state = 236;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 237;
                this.match(ACDLParser.GT);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    typeArgumentDeclaration() {
        let _localctx = new TypeArgumentDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 30, ACDLParser.RULE_typeArgumentDeclaration);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 239;
                this.identifier();
                this.state = 243;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ACDLParser.COLON) {
                    {
                        {
                            this.state = 240;
                            this.typeConstraint();
                        }
                    }
                    this.state = 245;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    typeConstraint() {
        let _localctx = new TypeConstraintContext(this._ctx, this.state);
        this.enterRule(_localctx, 32, ACDLParser.RULE_typeConstraint);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 246;
                this.match(ACDLParser.COLON);
                this.state = 247;
                this.typeReference();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    typeProperties() {
        let _localctx = new TypePropertiesContext(this._ctx, this.state);
        this.enterRule(_localctx, 34, ACDLParser.RULE_typeProperties);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 249;
                this.match(ACDLParser.LBRACE);
                this.state = 253;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ACDLParser.DIALOG) | (1 << ACDLParser.SAMPLE) | (1 << ACDLParser.INTERACTION) | (1 << ACDLParser.ACTION) | (1 << ACDLParser.TYPE) | (1 << ACDLParser.OPTIONAL) | (1 << ACDLParser.IF) | (1 << ACDLParser.ELSE) | (1 << ACDLParser.ACTUAL) | (1 << ACDLParser.EXPECTED) | (1 << ACDLParser.VOID) | (1 << ACDLParser.ENUM) | (1 << ACDLParser.AT) | (1 << ACDLParser.IS) | (1 << ACDLParser.IN))) !== 0) || _la === ACDLParser.IDENTIFIER) {
                    {
                        {
                            this.state = 250;
                            this.typeProperty();
                        }
                    }
                    this.state = 255;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 256;
                this.match(ACDLParser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    typeProperty() {
        let _localctx = new TypePropertyContext(this._ctx, this.state);
        this.enterRule(_localctx, 36, ACDLParser.RULE_typeProperty);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 259;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 20, this._ctx)) {
                    case 1:
                        {
                            this.state = 258;
                            this.annotationList();
                        }
                        break;
                }
                this.state = 262;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 21, this._ctx)) {
                    case 1:
                        {
                            this.state = 261;
                            this.match(ACDLParser.OPTIONAL);
                        }
                        break;
                }
                this.state = 264;
                this.typeReference();
                this.state = 266;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 22, this._ctx)) {
                    case 1:
                        {
                            this.state = 265;
                            this.identifier();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    argumentDeclarations() {
        let _localctx = new ArgumentDeclarationsContext(this._ctx, this.state);
        this.enterRule(_localctx, 38, ACDLParser.RULE_argumentDeclarations);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 268;
                this.match(ACDLParser.LPAREN);
                this.state = 284;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 27, this._ctx)) {
                    case 1:
                        {
                            this.state = 270;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ACDLParser.DIALOG) | (1 << ACDLParser.SAMPLE) | (1 << ACDLParser.INTERACTION) | (1 << ACDLParser.ACTION) | (1 << ACDLParser.TYPE) | (1 << ACDLParser.OPTIONAL) | (1 << ACDLParser.IF) | (1 << ACDLParser.ELSE) | (1 << ACDLParser.ACTUAL) | (1 << ACDLParser.EXPECTED) | (1 << ACDLParser.VOID) | (1 << ACDLParser.ENUM) | (1 << ACDLParser.AT) | (1 << ACDLParser.IS) | (1 << ACDLParser.IN))) !== 0) || _la === ACDLParser.IDENTIFIER) {
                                {
                                    this.state = 269;
                                    this.argumentDeclaration();
                                }
                            }
                            this.state = 278;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 25, this._ctx);
                            while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    {
                                        {
                                            this.state = 272;
                                            this.match(ACDLParser.COMMA);
                                            this.state = 274;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ACDLParser.DIALOG) | (1 << ACDLParser.SAMPLE) | (1 << ACDLParser.INTERACTION) | (1 << ACDLParser.ACTION) | (1 << ACDLParser.TYPE) | (1 << ACDLParser.OPTIONAL) | (1 << ACDLParser.IF) | (1 << ACDLParser.ELSE) | (1 << ACDLParser.ACTUAL) | (1 << ACDLParser.EXPECTED) | (1 << ACDLParser.VOID) | (1 << ACDLParser.ENUM) | (1 << ACDLParser.AT) | (1 << ACDLParser.IS) | (1 << ACDLParser.IN))) !== 0) || _la === ACDLParser.IDENTIFIER) {
                                                {
                                                    this.state = 273;
                                                    this.argumentDeclaration();
                                                }
                                            }
                                        }
                                    }
                                }
                                this.state = 280;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 25, this._ctx);
                            }
                            this.state = 282;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === ACDLParser.COMMA) {
                                {
                                    this.state = 281;
                                    this.match(ACDLParser.COMMA);
                                }
                            }
                        }
                        break;
                }
                this.state = 286;
                this.match(ACDLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    argumentDeclaration() {
        let _localctx = new ArgumentDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 40, ACDLParser.RULE_argumentDeclaration);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 289;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 28, this._ctx)) {
                    case 1:
                        {
                            this.state = 288;
                            this.annotationList();
                        }
                        break;
                }
                this.state = 292;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 29, this._ctx)) {
                    case 1:
                        {
                            this.state = 291;
                            this.match(ACDLParser.OPTIONAL);
                        }
                        break;
                }
                this.state = 296;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 30, this._ctx)) {
                    case 1:
                        {
                            this.state = 294;
                            this.standardArgumentDeclaration();
                        }
                        break;
                    case 2:
                        {
                            this.state = 295;
                            this.functionArgumentDeclaration();
                        }
                        break;
                }
                this.state = 300;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ACDLParser.ASSIGN) {
                    {
                        this.state = 298;
                        this.match(ACDLParser.ASSIGN);
                        this.state = 299;
                        this.argumentDefault();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    standardArgumentDeclaration() {
        let _localctx = new StandardArgumentDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 42, ACDLParser.RULE_standardArgumentDeclaration);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 302;
                this.typeReference();
                this.state = 304;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ACDLParser.DIALOG) | (1 << ACDLParser.INTERACTION) | (1 << ACDLParser.ACTION) | (1 << ACDLParser.TYPE) | (1 << ACDLParser.OPTIONAL) | (1 << ACDLParser.IF) | (1 << ACDLParser.ELSE) | (1 << ACDLParser.ACTUAL) | (1 << ACDLParser.EXPECTED) | (1 << ACDLParser.VOID) | (1 << ACDLParser.ENUM) | (1 << ACDLParser.IS) | (1 << ACDLParser.IN))) !== 0) || _la === ACDLParser.IDENTIFIER) {
                    {
                        this.state = 303;
                        this.identifier();
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    functionArgumentDeclaration() {
        let _localctx = new FunctionArgumentDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 44, ACDLParser.RULE_functionArgumentDeclaration);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 307;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 33, this._ctx)) {
                    case 1:
                        {
                            this.state = 306;
                            _la = this._input.LA(1);
                            if (!(_la === ACDLParser.DIALOG || _la === ACDLParser.ACTION)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                        break;
                }
                this.state = 309;
                this.functionSignature();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    argumentDefault() {
        let _localctx = new ArgumentDefaultContext(this._ctx, this.state);
        this.enterRule(_localctx, 46, ACDLParser.RULE_argumentDefault);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 311;
                this.expression(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    actionDeclaration() {
        let _localctx = new ActionDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 48, ACDLParser.RULE_actionDeclaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 314;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 34, this._ctx)) {
                    case 1:
                        {
                            this.state = 313;
                            this.annotationList();
                        }
                        break;
                }
                this.state = 316;
                this.match(ACDLParser.ACTION);
                this.state = 317;
                this.functionSignature();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    interactionDeclaration() {
        let _localctx = new InteractionDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 50, ACDLParser.RULE_interactionDeclaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 320;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 35, this._ctx)) {
                    case 1:
                        {
                            this.state = 319;
                            this.annotationList();
                        }
                        break;
                }
                this.state = 322;
                this.match(ACDLParser.INTERACTION);
                this.state = 323;
                this.block();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dialogDeclaration() {
        let _localctx = new DialogDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 52, ACDLParser.RULE_dialogDeclaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 326;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 36, this._ctx)) {
                    case 1:
                        {
                            this.state = 325;
                            this.annotationList();
                        }
                        break;
                }
                this.state = 328;
                this.match(ACDLParser.DIALOG);
                this.state = 329;
                this.functionSignature();
                this.state = 330;
                this.dialogScope();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    dialogScope() {
        let _localctx = new DialogScopeContext(this._ctx, this.state);
        this.enterRule(_localctx, 54, ACDLParser.RULE_dialogScope);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 332;
                this.match(ACDLParser.LBRACE);
                this.state = 336;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ACDLParser.DIALOG) | (1 << ACDLParser.SAMPLE) | (1 << ACDLParser.INTERACTION) | (1 << ACDLParser.ACTION) | (1 << ACDLParser.TYPE) | (1 << ACDLParser.OPTIONAL) | (1 << ACDLParser.IF) | (1 << ACDLParser.ELSE) | (1 << ACDLParser.ACTUAL) | (1 << ACDLParser.EXPECTED) | (1 << ACDLParser.VOID) | (1 << ACDLParser.ENUM) | (1 << ACDLParser.AT) | (1 << ACDLParser.IS) | (1 << ACDLParser.IN))) !== 0) || _la === ACDLParser.IDENTIFIER) {
                    {
                        {
                            this.state = 333;
                            this.sampleDeclaration();
                        }
                    }
                    this.state = 338;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 339;
                this.match(ACDLParser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    functionSignature() {
        let _localctx = new FunctionSignatureContext(this._ctx, this.state);
        this.enterRule(_localctx, 56, ACDLParser.RULE_functionSignature);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 343;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 38, this._ctx)) {
                    case 1:
                        {
                            this.state = 341;
                            this.void();
                        }
                        break;
                    case 2:
                        {
                            this.state = 342;
                            this.typeReference();
                        }
                        break;
                }
                this.state = 347;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 39, this._ctx)) {
                    case 1:
                        {
                            this.state = 345;
                            this.qualifiedName();
                        }
                        break;
                    case 2:
                        {
                            this.state = 346;
                            this.identifier();
                        }
                        break;
                }
                this.state = 350;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ACDLParser.LT) {
                    {
                        this.state = 349;
                        this.typeArgumentDeclarations();
                    }
                }
                this.state = 353;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 41, this._ctx)) {
                    case 1:
                        {
                            this.state = 352;
                            this.argumentDeclarations();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    sampleDeclaration() {
        let _localctx = new SampleDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 58, ACDLParser.RULE_sampleDeclaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 356;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 42, this._ctx)) {
                    case 1:
                        {
                            this.state = 355;
                            this.annotationList();
                        }
                        break;
                }
                this.state = 358;
                this.match(ACDLParser.SAMPLE);
                this.state = 359;
                this.block();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    block() {
        let _localctx = new BlockContext(this._ctx, this.state);
        this.enterRule(_localctx, 60, ACDLParser.RULE_block);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 361;
                this.match(ACDLParser.LBRACE);
                this.state = 365;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ACDLParser.DIALOG) | (1 << ACDLParser.SAMPLE) | (1 << ACDLParser.INTERACTION) | (1 << ACDLParser.ACTION) | (1 << ACDLParser.TYPE) | (1 << ACDLParser.OPTIONAL) | (1 << ACDLParser.IF) | (1 << ACDLParser.ELSE) | (1 << ACDLParser.ACTUAL) | (1 << ACDLParser.EXPECTED) | (1 << ACDLParser.NULL) | (1 << ACDLParser.NOTHING) | (1 << ACDLParser.VOID) | (1 << ACDLParser.ENUM) | (1 << ACDLParser.AT) | (1 << ACDLParser.IS) | (1 << ACDLParser.IN) | (1 << ACDLParser.NUMBER) | (1 << ACDLParser.BOOL) | (1 << ACDLParser.LPAREN) | (1 << ACDLParser.LBRACE) | (1 << ACDLParser.LBRACK))) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (ACDLParser.NOT - 42)) | (1 << (ACDLParser.IDENTIFIER - 42)) | (1 << (ACDLParser.STRING_START - 42)))) !== 0)) {
                    {
                        {
                            this.state = 362;
                            this.blockExpression();
                        }
                    }
                    this.state = 367;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 368;
                this.match(ACDLParser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    blockExpression() {
        let _localctx = new BlockExpressionContext(this._ctx, this.state);
        this.enterRule(_localctx, 62, ACDLParser.RULE_blockExpression);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 372;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 44, this._ctx)) {
                    case 1:
                        {
                            this.state = 370;
                            this.nameDeclaration();
                        }
                        break;
                    case 2:
                        {
                            this.state = 371;
                            this.expression(0);
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    qualifiedNameDeclaration() {
        let _localctx = new QualifiedNameDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 64, ACDLParser.RULE_qualifiedNameDeclaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 375;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 45, this._ctx)) {
                    case 1:
                        {
                            this.state = 374;
                            this.annotationList();
                        }
                        break;
                }
                this.state = 378;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 46, this._ctx)) {
                    case 1:
                        {
                            this.state = 377;
                            this.typeReference();
                        }
                        break;
                }
                this.state = 380;
                this.qualifiedName();
                this.state = 381;
                this.match(ACDLParser.ASSIGN);
                this.state = 382;
                this.expression(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    nameDeclaration() {
        let _localctx = new NameDeclarationContext(this._ctx, this.state);
        this.enterRule(_localctx, 66, ACDLParser.RULE_nameDeclaration);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 385;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 47, this._ctx)) {
                    case 1:
                        {
                            this.state = 384;
                            this.typeReference();
                        }
                        break;
                }
                this.state = 387;
                this.identifier();
                this.state = 388;
                this.match(ACDLParser.ASSIGN);
                this.state = 389;
                this.expression(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    expression(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        let _parentctx = this._ctx;
        let _parentState = this.state;
        let _localctx = new ExpressionContext(this._ctx, _parentState);
        let _prevctx = _localctx;
        let _startState = 68;
        this.enterRecursionRule(_localctx, 68, ACDLParser.RULE_expression, _p);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 409;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 48, this._ctx)) {
                    case 1:
                        {
                            _localctx = new ConditionExprContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 392;
                            this.condition();
                        }
                        break;
                    case 2:
                        {
                            _localctx = new CorrectionExprContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 393;
                            this.correction();
                        }
                        break;
                    case 3:
                        {
                            _localctx = new CallExprContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 394;
                            this.call();
                        }
                        break;
                    case 4:
                        {
                            _localctx = new LiteralExprContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 395;
                            this.list();
                        }
                        break;
                    case 5:
                        {
                            _localctx = new LiteralExprContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 396;
                            this.object();
                        }
                        break;
                    case 6:
                        {
                            _localctx = new BinaryExprContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 397;
                            this.match(ACDLParser.NOT);
                            this.state = 398;
                            _localctx._right = this.expression(12);
                        }
                        break;
                    case 7:
                        {
                            _localctx = new LiteralExprContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 399;
                            this.null();
                        }
                        break;
                    case 8:
                        {
                            _localctx = new LiteralExprContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 400;
                            this.nothing();
                        }
                        break;
                    case 9:
                        {
                            _localctx = new IdentifierExprContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 401;
                            this.identifier();
                        }
                        break;
                    case 10:
                        {
                            _localctx = new LiteralExprContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 402;
                            this.number();
                        }
                        break;
                    case 11:
                        {
                            _localctx = new LiteralExprContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 403;
                            this.string();
                        }
                        break;
                    case 12:
                        {
                            _localctx = new LiteralExprContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 404;
                            this.bool();
                        }
                        break;
                    case 13:
                        {
                            _localctx = new ParenthesizedExprContext(_localctx);
                            this._ctx = _localctx;
                            _prevctx = _localctx;
                            this.state = 405;
                            this.match(ACDLParser.LPAREN);
                            this.state = 406;
                            this.expression(0);
                            this.state = 407;
                            this.match(ACDLParser.RPAREN);
                        }
                        break;
                }
                this._ctx._stop = this._input.tryLT(-1);
                this.state = 441;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 50, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        if (this._parseListeners != null) {
                            this.triggerExitRuleEvent();
                        }
                        _prevctx = _localctx;
                        {
                            this.state = 439;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 49, this._ctx)) {
                                case 1:
                                    {
                                        _localctx = new InExprContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ACDLParser.RULE_expression);
                                        this.state = 411;
                                        if (!(this.precpred(this._ctx, 13))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 13)");
                                        }
                                        this.state = 412;
                                        this.match(ACDLParser.IN);
                                        this.state = 413;
                                        this.expression(14);
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, ACDLParser.RULE_expression);
                                        this.state = 414;
                                        if (!(this.precpred(this._ctx, 11))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 11)");
                                        }
                                        this.state = 415;
                                        this.relational();
                                        this.state = 416;
                                        _localctx._right = this.expression(12);
                                    }
                                    break;
                                case 3:
                                    {
                                        _localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, ACDLParser.RULE_expression);
                                        this.state = 418;
                                        if (!(this.precpred(this._ctx, 10))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 10)");
                                        }
                                        this.state = 419;
                                        this.equality();
                                        this.state = 420;
                                        _localctx._right = this.expression(11);
                                    }
                                    break;
                                case 4:
                                    {
                                        _localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, ACDLParser.RULE_expression);
                                        this.state = 422;
                                        if (!(this.precpred(this._ctx, 9))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 9)");
                                        }
                                        this.state = 423;
                                        this.match(ACDLParser.AND);
                                        this.state = 424;
                                        _localctx._right = this.expression(10);
                                    }
                                    break;
                                case 5:
                                    {
                                        _localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
                                        _localctx._left = _prevctx;
                                        this.pushNewRecursionContext(_localctx, _startState, ACDLParser.RULE_expression);
                                        this.state = 425;
                                        if (!(this.precpred(this._ctx, 8))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 8)");
                                        }
                                        this.state = 426;
                                        this.match(ACDLParser.OR);
                                        this.state = 427;
                                        _localctx._right = this.expression(9);
                                    }
                                    break;
                                case 6:
                                    {
                                        _localctx = new IsExprContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ACDLParser.RULE_expression);
                                        this.state = 428;
                                        if (!(this.precpred(this._ctx, 16))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 16)");
                                        }
                                        this.state = 429;
                                        this.match(ACDLParser.IS);
                                        this.state = 430;
                                        this.typeReference();
                                    }
                                    break;
                                case 7:
                                    {
                                        _localctx = new ListIndexContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ACDLParser.RULE_expression);
                                        this.state = 431;
                                        if (!(this.precpred(this._ctx, 15))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 15)");
                                        }
                                        this.state = 432;
                                        this.match(ACDLParser.LBRACK);
                                        this.state = 433;
                                        this.number();
                                        this.state = 434;
                                        this.match(ACDLParser.RBRACK);
                                    }
                                    break;
                                case 8:
                                    {
                                        _localctx = new PropertyReferenceContext(new ExpressionContext(_parentctx, _parentState));
                                        this.pushNewRecursionContext(_localctx, _startState, ACDLParser.RULE_expression);
                                        this.state = 436;
                                        if (!(this.precpred(this._ctx, 14))) {
                                            throw this.createFailedPredicateException("this.precpred(this._ctx, 14)");
                                        }
                                        this.state = 437;
                                        this.match(ACDLParser.DOT);
                                        this.state = 438;
                                        this.identifier();
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 443;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 50, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }
    // @RuleVersion(0)
    literal() {
        let _localctx = new LiteralContext(this._ctx, this.state);
        this.enterRule(_localctx, 70, ACDLParser.RULE_literal);
        try {
            this.state = 451;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case ACDLParser.NULL:
                    this.enterOuterAlt(_localctx, 1);
                    {
                        this.state = 444;
                        this.null();
                    }
                    break;
                case ACDLParser.NOTHING:
                    this.enterOuterAlt(_localctx, 2);
                    {
                        this.state = 445;
                        this.nothing();
                    }
                    break;
                case ACDLParser.NUMBER:
                    this.enterOuterAlt(_localctx, 3);
                    {
                        this.state = 446;
                        this.number();
                    }
                    break;
                case ACDLParser.STRING_START:
                    this.enterOuterAlt(_localctx, 4);
                    {
                        this.state = 447;
                        this.string();
                    }
                    break;
                case ACDLParser.BOOL:
                    this.enterOuterAlt(_localctx, 5);
                    {
                        this.state = 448;
                        this.bool();
                    }
                    break;
                case ACDLParser.LBRACK:
                    this.enterOuterAlt(_localctx, 6);
                    {
                        this.state = 449;
                        this.list();
                    }
                    break;
                case ACDLParser.DIALOG:
                case ACDLParser.SAMPLE:
                case ACDLParser.INTERACTION:
                case ACDLParser.ACTION:
                case ACDLParser.TYPE:
                case ACDLParser.OPTIONAL:
                case ACDLParser.IF:
                case ACDLParser.ELSE:
                case ACDLParser.ACTUAL:
                case ACDLParser.EXPECTED:
                case ACDLParser.VOID:
                case ACDLParser.ENUM:
                case ACDLParser.AT:
                case ACDLParser.IS:
                case ACDLParser.IN:
                case ACDLParser.LBRACE:
                case ACDLParser.IDENTIFIER:
                    this.enterOuterAlt(_localctx, 7);
                    {
                        this.state = 450;
                        this.object();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    null() {
        let _localctx = new NullContext(this._ctx, this.state);
        this.enterRule(_localctx, 72, ACDLParser.RULE_null);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 453;
                this.match(ACDLParser.NULL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    nothing() {
        let _localctx = new NothingContext(this._ctx, this.state);
        this.enterRule(_localctx, 74, ACDLParser.RULE_nothing);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 455;
                this.match(ACDLParser.NOTHING);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    void() {
        let _localctx = new VoidContext(this._ctx, this.state);
        this.enterRule(_localctx, 76, ACDLParser.RULE_void);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 458;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 52, this._ctx)) {
                    case 1:
                        {
                            this.state = 457;
                            this.annotationList();
                        }
                        break;
                }
                this.state = 460;
                this.match(ACDLParser.VOID);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    number() {
        let _localctx = new NumberContext(this._ctx, this.state);
        this.enterRule(_localctx, 78, ACDLParser.RULE_number);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 462;
                this.match(ACDLParser.NUMBER);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    string() {
        let _localctx = new StringContext(this._ctx, this.state);
        this.enterRule(_localctx, 80, ACDLParser.RULE_string);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 464;
                this.match(ACDLParser.STRING_START);
                this.state = 469;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === ACDLParser.INTERPOLATION_START || _la === ACDLParser.STRING_CONTENT) {
                    {
                        this.state = 467;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case ACDLParser.STRING_CONTENT:
                                {
                                    this.state = 465;
                                    this.string_content();
                                }
                                break;
                            case ACDLParser.INTERPOLATION_START:
                                {
                                    this.state = 466;
                                    this.var();
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    this.state = 471;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 472;
                this.match(ACDLParser.STRING_STOP);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    string_content() {
        let _localctx = new String_contentContext(this._ctx, this.state);
        this.enterRule(_localctx, 82, ACDLParser.RULE_string_content);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 474;
                this.match(ACDLParser.STRING_CONTENT);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    slot_value() {
        let _localctx = new Slot_valueContext(this._ctx, this.state);
        this.enterRule(_localctx, 84, ACDLParser.RULE_slot_value);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 476;
                this.match(ACDLParser.SLOT_VALUE_CONTENT);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    var() {
        let _localctx = new VarContext(this._ctx, this.state);
        this.enterRule(_localctx, 86, ACDLParser.RULE_var);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 478;
                this.match(ACDLParser.INTERPOLATION_START);
                this.state = 479;
                this.qualifiedName();
                this.state = 482;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ACDLParser.PIPE) {
                    {
                        this.state = 480;
                        this.match(ACDLParser.PIPE);
                        this.state = 481;
                        this.slot_value();
                    }
                }
                this.state = 484;
                this.match(ACDLParser.INTERPOLATION_END);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    bool() {
        let _localctx = new BoolContext(this._ctx, this.state);
        this.enterRule(_localctx, 88, ACDLParser.RULE_bool);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 486;
                this.match(ACDLParser.BOOL);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    annotation() {
        let _localctx = new AnnotationContext(this._ctx, this.state);
        this.enterRule(_localctx, 90, ACDLParser.RULE_annotation);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 488;
                this.match(ACDLParser.AT);
                this.state = 489;
                this.call();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    annotationList() {
        let _localctx = new AnnotationListContext(this._ctx, this.state);
        this.enterRule(_localctx, 92, ACDLParser.RULE_annotationList);
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 494;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 56, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 491;
                                this.annotation();
                            }
                        }
                    }
                    this.state = 496;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 56, this._ctx);
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    call() {
        let _localctx = new CallContext(this._ctx, this.state);
        this.enterRule(_localctx, 94, ACDLParser.RULE_call);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 497;
                this.qualifiedName();
                this.state = 499;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ACDLParser.LT) {
                    {
                        this.state = 498;
                        this.typeArguments();
                    }
                }
                this.state = 501;
                this.match(ACDLParser.LPAREN);
                this.state = 503;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ACDLParser.DIALOG) | (1 << ACDLParser.SAMPLE) | (1 << ACDLParser.INTERACTION) | (1 << ACDLParser.ACTION) | (1 << ACDLParser.TYPE) | (1 << ACDLParser.OPTIONAL) | (1 << ACDLParser.IF) | (1 << ACDLParser.ELSE) | (1 << ACDLParser.ACTUAL) | (1 << ACDLParser.EXPECTED) | (1 << ACDLParser.NULL) | (1 << ACDLParser.NOTHING) | (1 << ACDLParser.VOID) | (1 << ACDLParser.ENUM) | (1 << ACDLParser.AT) | (1 << ACDLParser.IS) | (1 << ACDLParser.IN) | (1 << ACDLParser.NUMBER) | (1 << ACDLParser.BOOL) | (1 << ACDLParser.LPAREN) | (1 << ACDLParser.LBRACE) | (1 << ACDLParser.LBRACK))) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (ACDLParser.NOT - 42)) | (1 << (ACDLParser.IDENTIFIER - 42)) | (1 << (ACDLParser.STRING_START - 42)))) !== 0)) {
                    {
                        this.state = 502;
                        this.callArguments();
                    }
                }
                this.state = 505;
                this.match(ACDLParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    callArguments() {
        let _localctx = new CallArgumentsContext(this._ctx, this.state);
        this.enterRule(_localctx, 96, ACDLParser.RULE_callArguments);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 507;
                this.callArgument();
                this.state = 512;
                this._errHandler.sync(this);
                _alt = this.interpreter.adaptivePredict(this._input, 59, this._ctx);
                while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        {
                            {
                                this.state = 508;
                                this.match(ACDLParser.COMMA);
                                this.state = 509;
                                this.callArgument();
                            }
                        }
                    }
                    this.state = 514;
                    this._errHandler.sync(this);
                    _alt = this.interpreter.adaptivePredict(this._input, 59, this._ctx);
                }
                this.state = 516;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ACDLParser.COMMA) {
                    {
                        this.state = 515;
                        this.match(ACDLParser.COMMA);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    callArgument() {
        let _localctx = new CallArgumentContext(this._ctx, this.state);
        this.enterRule(_localctx, 98, ACDLParser.RULE_callArgument);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 521;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 61, this._ctx)) {
                    case 1:
                        {
                            this.state = 518;
                            this.identifier();
                            this.state = 519;
                            this.match(ACDLParser.ASSIGN);
                        }
                        break;
                }
                this.state = 523;
                this.expression(0);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    object() {
        let _localctx = new ObjectContext(this._ctx, this.state);
        this.enterRule(_localctx, 100, ACDLParser.RULE_object);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 526;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ACDLParser.DIALOG) | (1 << ACDLParser.SAMPLE) | (1 << ACDLParser.INTERACTION) | (1 << ACDLParser.ACTION) | (1 << ACDLParser.TYPE) | (1 << ACDLParser.OPTIONAL) | (1 << ACDLParser.IF) | (1 << ACDLParser.ELSE) | (1 << ACDLParser.ACTUAL) | (1 << ACDLParser.EXPECTED) | (1 << ACDLParser.VOID) | (1 << ACDLParser.ENUM) | (1 << ACDLParser.AT) | (1 << ACDLParser.IS) | (1 << ACDLParser.IN))) !== 0) || _la === ACDLParser.IDENTIFIER) {
                    {
                        this.state = 525;
                        this.typeReference();
                    }
                }
                this.state = 528;
                this.match(ACDLParser.LBRACE);
                this.state = 540;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ACDLParser.DIALOG) | (1 << ACDLParser.INTERACTION) | (1 << ACDLParser.ACTION) | (1 << ACDLParser.TYPE) | (1 << ACDLParser.OPTIONAL) | (1 << ACDLParser.IF) | (1 << ACDLParser.ELSE) | (1 << ACDLParser.ACTUAL) | (1 << ACDLParser.EXPECTED) | (1 << ACDLParser.VOID) | (1 << ACDLParser.ENUM) | (1 << ACDLParser.IS) | (1 << ACDLParser.IN))) !== 0) || _la === ACDLParser.IDENTIFIER) {
                    {
                        this.state = 529;
                        this.objectKeyValue();
                        this.state = 534;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 63, this._ctx);
                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 530;
                                        this.match(ACDLParser.COMMA);
                                        this.state = 531;
                                        this.objectKeyValue();
                                    }
                                }
                            }
                            this.state = 536;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 63, this._ctx);
                        }
                        this.state = 538;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === ACDLParser.COMMA) {
                            {
                                this.state = 537;
                                this.match(ACDLParser.COMMA);
                            }
                        }
                    }
                }
                this.state = 542;
                this.match(ACDLParser.RBRACE);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    objectKeyValue() {
        let _localctx = new ObjectKeyValueContext(this._ctx, this.state);
        this.enterRule(_localctx, 102, ACDLParser.RULE_objectKeyValue);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 544;
                this.identifier();
                this.state = 547;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === ACDLParser.ASSIGN) {
                    {
                        this.state = 545;
                        this.match(ACDLParser.ASSIGN);
                        this.state = 546;
                        this.expression(0);
                    }
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    list() {
        let _localctx = new ListContext(this._ctx, this.state);
        this.enterRule(_localctx, 104, ACDLParser.RULE_list);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 549;
                this.match(ACDLParser.LBRACK);
                this.state = 561;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ACDLParser.DIALOG) | (1 << ACDLParser.SAMPLE) | (1 << ACDLParser.INTERACTION) | (1 << ACDLParser.ACTION) | (1 << ACDLParser.TYPE) | (1 << ACDLParser.OPTIONAL) | (1 << ACDLParser.IF) | (1 << ACDLParser.ELSE) | (1 << ACDLParser.ACTUAL) | (1 << ACDLParser.EXPECTED) | (1 << ACDLParser.NULL) | (1 << ACDLParser.NOTHING) | (1 << ACDLParser.VOID) | (1 << ACDLParser.ENUM) | (1 << ACDLParser.AT) | (1 << ACDLParser.IS) | (1 << ACDLParser.IN) | (1 << ACDLParser.NUMBER) | (1 << ACDLParser.BOOL) | (1 << ACDLParser.LPAREN) | (1 << ACDLParser.LBRACE) | (1 << ACDLParser.LBRACK))) !== 0) || ((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (ACDLParser.NOT - 42)) | (1 << (ACDLParser.IDENTIFIER - 42)) | (1 << (ACDLParser.STRING_START - 42)))) !== 0)) {
                    {
                        this.state = 550;
                        this.expression(0);
                        this.state = 555;
                        this._errHandler.sync(this);
                        _alt = this.interpreter.adaptivePredict(this._input, 67, this._ctx);
                        while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
                            if (_alt === 1) {
                                {
                                    {
                                        this.state = 551;
                                        this.match(ACDLParser.COMMA);
                                        this.state = 552;
                                        this.expression(0);
                                    }
                                }
                            }
                            this.state = 557;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 67, this._ctx);
                        }
                        this.state = 559;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === ACDLParser.COMMA) {
                            {
                                this.state = 558;
                                this.match(ACDLParser.COMMA);
                            }
                        }
                    }
                }
                this.state = 563;
                this.match(ACDLParser.RBRACK);
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    condition() {
        let _localctx = new ConditionContext(this._ctx, this.state);
        this.enterRule(_localctx, 106, ACDLParser.RULE_condition);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 565;
                this.match(ACDLParser.IF);
                this.state = 566;
                this.match(ACDLParser.LPAREN);
                this.state = 567;
                this.expression(0);
                this.state = 568;
                this.match(ACDLParser.RPAREN);
                this.state = 569;
                this.block();
                this.state = 571;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 70, this._ctx)) {
                    case 1:
                        {
                            this.state = 570;
                            this.otherwise();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    otherwise() {
        let _localctx = new OtherwiseContext(this._ctx, this.state);
        this.enterRule(_localctx, 108, ACDLParser.RULE_otherwise);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 577;
                this._errHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this._input, 71, this._ctx)) {
                    case 1:
                        {
                            this.state = 573;
                            this.match(ACDLParser.ELSE);
                            this.state = 574;
                            this.condition();
                        }
                        break;
                    case 2:
                        {
                            this.state = 575;
                            this.match(ACDLParser.ELSE);
                            this.state = 576;
                            this.block();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    correction() {
        let _localctx = new CorrectionContext(this._ctx, this.state);
        this.enterRule(_localctx, 110, ACDLParser.RULE_correction);
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 579;
                this.match(ACDLParser.ACTUAL);
                this.state = 580;
                this.block();
                this.state = 581;
                this.match(ACDLParser.EXPECTED);
                this.state = 582;
                this.block();
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    relational() {
        let _localctx = new RelationalContext(this._ctx, this.state);
        this.enterRule(_localctx, 112, ACDLParser.RULE_relational);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 584;
                _la = this._input.LA(1);
                if (!(((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (ACDLParser.GT - 36)) | (1 << (ACDLParser.LT - 36)) | (1 << (ACDLParser.GE - 36)) | (1 << (ACDLParser.LE - 36)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    // @RuleVersion(0)
    equality() {
        let _localctx = new EqualityContext(this._ctx, this.state);
        this.enterRule(_localctx, 114, ACDLParser.RULE_equality);
        let _la;
        try {
            this.enterOuterAlt(_localctx, 1);
            {
                this.state = 586;
                _la = this._input.LA(1);
                if (!(_la === ACDLParser.EQUAL || _la === ACDLParser.NOTEQUAL)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    if (this._input.LA(1) === Token.EOF) {
                        this.matchedEOF = true;
                    }
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof RecognitionException) {
                _localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return _localctx;
    }
    sempred(_localctx, ruleIndex, predIndex) {
        switch (ruleIndex) {
            case 34:
                return this.expression_sempred(_localctx, predIndex);
        }
        return true;
    }
    expression_sempred(_localctx, predIndex) {
        switch (predIndex) {
            case 0:
                return this.precpred(this._ctx, 13);
            case 1:
                return this.precpred(this._ctx, 11);
            case 2:
                return this.precpred(this._ctx, 10);
            case 3:
                return this.precpred(this._ctx, 9);
            case 4:
                return this.precpred(this._ctx, 8);
            case 5:
                return this.precpred(this._ctx, 16);
            case 6:
                return this.precpred(this._ctx, 15);
            case 7:
                return this.precpred(this._ctx, 14);
        }
        return true;
    }
    static get _ATN() {
        if (!ACDLParser.__ATN) {
            ACDLParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ACDLParser._serializedATN));
        }
        return ACDLParser.__ATN;
    }
}
Object.defineProperty(ACDLParser, "NAMESPACE", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 1
});
Object.defineProperty(ACDLParser, "IMPORT", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 2
});
Object.defineProperty(ACDLParser, "DIALOG", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 3
});
Object.defineProperty(ACDLParser, "SAMPLE", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 4
});
Object.defineProperty(ACDLParser, "INTERACTION", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 5
});
Object.defineProperty(ACDLParser, "ACTION", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 6
});
Object.defineProperty(ACDLParser, "TYPE", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 7
});
Object.defineProperty(ACDLParser, "OPTIONAL", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 8
});
Object.defineProperty(ACDLParser, "IF", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 9
});
Object.defineProperty(ACDLParser, "ELSE", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 10
});
Object.defineProperty(ACDLParser, "ACTUAL", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 11
});
Object.defineProperty(ACDLParser, "EXPECTED", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 12
});
Object.defineProperty(ACDLParser, "DEFAULT", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 13
});
Object.defineProperty(ACDLParser, "NULL", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 14
});
Object.defineProperty(ACDLParser, "NOTHING", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 15
});
Object.defineProperty(ACDLParser, "VOID", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 16
});
Object.defineProperty(ACDLParser, "ENUM", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 17
});
Object.defineProperty(ACDLParser, "AT", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 18
});
Object.defineProperty(ACDLParser, "IS", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 19
});
Object.defineProperty(ACDLParser, "IN", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 20
});
Object.defineProperty(ACDLParser, "DASH", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 21
});
Object.defineProperty(ACDLParser, "PIPE", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 22
});
Object.defineProperty(ACDLParser, "NUMBER", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 23
});
Object.defineProperty(ACDLParser, "BOOL", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 24
});
Object.defineProperty(ACDLParser, "LPAREN", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 25
});
Object.defineProperty(ACDLParser, "RPAREN", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 26
});
Object.defineProperty(ACDLParser, "LBRACE", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 27
});
Object.defineProperty(ACDLParser, "RBRACE", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 28
});
Object.defineProperty(ACDLParser, "LBRACK", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 29
});
Object.defineProperty(ACDLParser, "RBRACK", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 30
});
Object.defineProperty(ACDLParser, "SEMI", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 31
});
Object.defineProperty(ACDLParser, "COMMA", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 32
});
Object.defineProperty(ACDLParser, "DOT", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 33
});
Object.defineProperty(ACDLParser, "COLON", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 34
});
Object.defineProperty(ACDLParser, "ASSIGN", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 35
});
Object.defineProperty(ACDLParser, "GT", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 36
});
Object.defineProperty(ACDLParser, "LT", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 37
});
Object.defineProperty(ACDLParser, "GE", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 38
});
Object.defineProperty(ACDLParser, "LE", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 39
});
Object.defineProperty(ACDLParser, "EQUAL", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 40
});
Object.defineProperty(ACDLParser, "NOTEQUAL", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 41
});
Object.defineProperty(ACDLParser, "NOT", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 42
});
Object.defineProperty(ACDLParser, "AND", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 43
});
Object.defineProperty(ACDLParser, "OR", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 44
});
Object.defineProperty(ACDLParser, "WS", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 45
});
Object.defineProperty(ACDLParser, "COMMENT", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 46
});
Object.defineProperty(ACDLParser, "LINE_COMMENT", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 47
});
Object.defineProperty(ACDLParser, "IDENTIFIER", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 48
});
Object.defineProperty(ACDLParser, "ASTERISK", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 49
});
Object.defineProperty(ACDLParser, "STRING_START", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 50
});
Object.defineProperty(ACDLParser, "STRING_STOP", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 51
});
Object.defineProperty(ACDLParser, "INTERPOLATION_START", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 52
});
Object.defineProperty(ACDLParser, "STRING_CONTENT", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 53
});
Object.defineProperty(ACDLParser, "INCOMPLETE_STRING", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 54
});
Object.defineProperty(ACDLParser, "INTERPOLATION_END", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 55
});
Object.defineProperty(ACDLParser, "INCOMPLETE_INTERPOLATION", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 56
});
Object.defineProperty(ACDLParser, "SLOT_VALUE_CONTENT", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 57
});
Object.defineProperty(ACDLParser, "INCOMPLETE_SLOT", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 58
});
Object.defineProperty(ACDLParser, "RULE_line", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 0
});
Object.defineProperty(ACDLParser, "RULE_singleLineExpr", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 1
});
Object.defineProperty(ACDLParser, "RULE_module", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 2
});
Object.defineProperty(ACDLParser, "RULE_moduleExpression", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 3
});
Object.defineProperty(ACDLParser, "RULE_keyword", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 4
});
Object.defineProperty(ACDLParser, "RULE_identifier", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 5
});
Object.defineProperty(ACDLParser, "RULE_qualifiedName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 6
});
Object.defineProperty(ACDLParser, "RULE_namespaceDeclaration", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 7
});
Object.defineProperty(ACDLParser, "RULE_importDeclaration", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 8
});
Object.defineProperty(ACDLParser, "RULE_enumDeclaration", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 9
});
Object.defineProperty(ACDLParser, "RULE_enumItem", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 10
});
Object.defineProperty(ACDLParser, "RULE_typeReference", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 11
});
Object.defineProperty(ACDLParser, "RULE_typeArguments", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 12
});
Object.defineProperty(ACDLParser, "RULE_typeDeclaration", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 13
});
Object.defineProperty(ACDLParser, "RULE_typeArgumentDeclarations", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 14
});
Object.defineProperty(ACDLParser, "RULE_typeArgumentDeclaration", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 15
});
Object.defineProperty(ACDLParser, "RULE_typeConstraint", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 16
});
Object.defineProperty(ACDLParser, "RULE_typeProperties", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 17
});
Object.defineProperty(ACDLParser, "RULE_typeProperty", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 18
});
Object.defineProperty(ACDLParser, "RULE_argumentDeclarations", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 19
});
Object.defineProperty(ACDLParser, "RULE_argumentDeclaration", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 20
});
Object.defineProperty(ACDLParser, "RULE_standardArgumentDeclaration", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 21
});
Object.defineProperty(ACDLParser, "RULE_functionArgumentDeclaration", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 22
});
Object.defineProperty(ACDLParser, "RULE_argumentDefault", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 23
});
Object.defineProperty(ACDLParser, "RULE_actionDeclaration", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 24
});
Object.defineProperty(ACDLParser, "RULE_interactionDeclaration", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 25
});
Object.defineProperty(ACDLParser, "RULE_dialogDeclaration", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 26
});
Object.defineProperty(ACDLParser, "RULE_dialogScope", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 27
});
Object.defineProperty(ACDLParser, "RULE_functionSignature", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 28
});
Object.defineProperty(ACDLParser, "RULE_sampleDeclaration", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 29
});
Object.defineProperty(ACDLParser, "RULE_block", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 30
});
Object.defineProperty(ACDLParser, "RULE_blockExpression", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 31
});
Object.defineProperty(ACDLParser, "RULE_qualifiedNameDeclaration", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 32
});
Object.defineProperty(ACDLParser, "RULE_nameDeclaration", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 33
});
Object.defineProperty(ACDLParser, "RULE_expression", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 34
});
Object.defineProperty(ACDLParser, "RULE_literal", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 35
});
Object.defineProperty(ACDLParser, "RULE_null", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 36
});
Object.defineProperty(ACDLParser, "RULE_nothing", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 37
});
Object.defineProperty(ACDLParser, "RULE_void", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 38
});
Object.defineProperty(ACDLParser, "RULE_number", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 39
});
Object.defineProperty(ACDLParser, "RULE_string", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 40
});
Object.defineProperty(ACDLParser, "RULE_string_content", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 41
});
Object.defineProperty(ACDLParser, "RULE_slot_value", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 42
});
Object.defineProperty(ACDLParser, "RULE_var", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 43
});
Object.defineProperty(ACDLParser, "RULE_bool", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 44
});
Object.defineProperty(ACDLParser, "RULE_annotation", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 45
});
Object.defineProperty(ACDLParser, "RULE_annotationList", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 46
});
Object.defineProperty(ACDLParser, "RULE_call", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 47
});
Object.defineProperty(ACDLParser, "RULE_callArguments", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 48
});
Object.defineProperty(ACDLParser, "RULE_callArgument", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 49
});
Object.defineProperty(ACDLParser, "RULE_object", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 50
});
Object.defineProperty(ACDLParser, "RULE_objectKeyValue", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 51
});
Object.defineProperty(ACDLParser, "RULE_list", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 52
});
Object.defineProperty(ACDLParser, "RULE_condition", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 53
});
Object.defineProperty(ACDLParser, "RULE_otherwise", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 54
});
Object.defineProperty(ACDLParser, "RULE_correction", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 55
});
Object.defineProperty(ACDLParser, "RULE_relational", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 56
});
Object.defineProperty(ACDLParser, "RULE_equality", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 57
});
// tslint:disable:no-trailing-whitespace
Object.defineProperty(ACDLParser, "ruleNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: [
        "line", "singleLineExpr", "module", "moduleExpression", "keyword", "identifier",
        "qualifiedName", "namespaceDeclaration", "importDeclaration", "enumDeclaration",
        "enumItem", "typeReference", "typeArguments", "typeDeclaration", "typeArgumentDeclarations",
        "typeArgumentDeclaration", "typeConstraint", "typeProperties", "typeProperty",
        "argumentDeclarations", "argumentDeclaration", "standardArgumentDeclaration",
        "functionArgumentDeclaration", "argumentDefault", "actionDeclaration",
        "interactionDeclaration", "dialogDeclaration", "dialogScope", "functionSignature",
        "sampleDeclaration", "block", "blockExpression", "qualifiedNameDeclaration",
        "nameDeclaration", "expression", "literal", "null", "nothing", "void",
        "number", "string", "string_content", "slot_value", "var", "bool", "annotation",
        "annotationList", "call", "callArguments", "callArgument", "object", "objectKeyValue",
        "list", "condition", "otherwise", "correction", "relational", "equality",
    ]
});
Object.defineProperty(ACDLParser, "_LITERAL_NAMES", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: [
        undefined, "'namespace'", "'import'", "'dialog'", "'sample'", "'interaction'",
        "'action'", "'type'", "'optional'", "'if'", "'else'", "'actual'", "'expected'",
        "'default'", "'null'", "'nothing'", "'void'", "'enum'", "'@'", "'is'",
        "'in'", "'-'", "'|'", undefined, undefined, "'('", "')'", undefined, undefined,
        "'['", "']'", "';'", "','", "'.'", "':'", "'='", "'>'", "'<'", "'>='",
        "'<='", "'=='", "'!='", "'!'", "'&&'", "'||'", undefined, undefined, undefined,
        undefined, "'*'",
    ]
});
Object.defineProperty(ACDLParser, "_SYMBOLIC_NAMES", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: [
        undefined, "NAMESPACE", "IMPORT", "DIALOG", "SAMPLE", "INTERACTION", "ACTION",
        "TYPE", "OPTIONAL", "IF", "ELSE", "ACTUAL", "EXPECTED", "DEFAULT", "NULL",
        "NOTHING", "VOID", "ENUM", "AT", "IS", "IN", "DASH", "PIPE", "NUMBER",
        "BOOL", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI",
        "COMMA", "DOT", "COLON", "ASSIGN", "GT", "LT", "GE", "LE", "EQUAL", "NOTEQUAL",
        "NOT", "AND", "OR", "WS", "COMMENT", "LINE_COMMENT", "IDENTIFIER", "ASTERISK",
        "STRING_START", "STRING_STOP", "INTERPOLATION_START", "STRING_CONTENT",
        "INCOMPLETE_STRING", "INTERPOLATION_END", "INCOMPLETE_INTERPOLATION",
        "SLOT_VALUE_CONTENT", "INCOMPLETE_SLOT",
    ]
});
Object.defineProperty(ACDLParser, "VOCABULARY", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: new VocabularyImpl(ACDLParser._LITERAL_NAMES, ACDLParser._SYMBOLIC_NAMES, [])
});
Object.defineProperty(ACDLParser, "_serializedATNSegments", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 2
});
Object.defineProperty(ACDLParser, "_serializedATNSegment0", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03<\u024F\x04\x02" +
        "\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07" +
        "\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r\x04" +
        "\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04" +
        "\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17\x04" +
        "\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C\x04" +
        "\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04#" +
        "\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t+" +
        "\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x044" +
        "\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x03\x02\x03" +
        "\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x05\x03\x80" +
        "\n\x03\x03\x04\x03\x04\x06\x04\x84\n\x04\r\x04\x0E\x04\x85\x03\x04\x03" +
        "\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04\x8E\n\x04\x03\x05\x03\x05" +
        "\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x05\x05\x98\n\x05\x03" +
        "\x06\x03\x06\x03\x07\x03\x07\x05\x07\x9E\n\x07\x03\b\x03\b\x03\b\x07\b" +
        "\xA3\n\b\f\b\x0E\b\xA6\v\b\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x05" +
        "\n\xAF\n\n\x03\v\x05\v\xB2\n\v\x03\v\x03\v\x03\v\x03\v\x07\v\xB8\n\v\f" +
        "\v\x0E\v\xBB\v\v\x03\v\x03\v\x03\f\x05\f\xC0\n\f\x03\f\x03\f\x03\r\x05" +
        "\r\xC5\n\r\x03\r\x03\r\x05\r\xC9\n\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x07" +
        "\x0E\xCF\n\x0E\f\x0E\x0E\x0E\xD2\v\x0E\x03\x0E\x03\x0E\x03\x0F\x05\x0F" +
        "\xD7\n\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0F\xDC\n\x0F\x03\x0F\x07\x0F\xDF" +
        "\n\x0F\f\x0F\x0E\x0F\xE2\v\x0F\x03\x0F\x05\x0F\xE5\n\x0F\x03\x10\x03\x10" +
        "\x03\x10\x03\x10\x07\x10\xEB\n\x10\f\x10\x0E\x10\xEE\v\x10\x03\x10\x03" +
        "\x10\x03\x11\x03\x11\x07\x11\xF4\n\x11\f\x11\x0E\x11\xF7\v\x11\x03\x12" +
        "\x03\x12\x03\x12\x03\x13\x03\x13\x07\x13\xFE\n\x13\f\x13\x0E\x13\u0101" +
        "\v\x13\x03\x13\x03\x13\x03\x14\x05\x14\u0106\n\x14\x03\x14\x05\x14\u0109" +
        "\n\x14\x03\x14\x03\x14\x05\x14\u010D\n\x14\x03\x15\x03\x15\x05\x15\u0111" +
        "\n\x15\x03\x15\x03\x15\x05\x15\u0115\n\x15\x07\x15\u0117\n\x15\f\x15\x0E" +
        "\x15\u011A\v\x15\x03\x15\x05\x15\u011D\n\x15\x05\x15\u011F\n\x15\x03\x15" +
        "\x03\x15\x03\x16\x05\x16\u0124\n\x16\x03\x16\x05\x16\u0127\n\x16\x03\x16" +
        "\x03\x16\x05\x16\u012B\n\x16\x03\x16\x03\x16\x05\x16\u012F\n\x16\x03\x17" +
        "\x03\x17\x05\x17\u0133\n\x17\x03\x18\x05\x18\u0136\n\x18\x03\x18\x03\x18" +
        "\x03\x19\x03\x19\x03\x1A\x05\x1A\u013D\n\x1A\x03\x1A\x03\x1A\x03\x1A\x03" +
        "\x1B\x05\x1B\u0143\n\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1C\x05\x1C\u0149" +
        "\n\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x07\x1D\u0151\n" +
        "\x1D\f\x1D\x0E\x1D\u0154\v\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x05\x1E" +
        "\u015A\n\x1E\x03\x1E\x03\x1E\x05\x1E\u015E\n\x1E\x03\x1E\x05\x1E\u0161" +
        "\n\x1E\x03\x1E\x05\x1E\u0164\n\x1E\x03\x1F\x05\x1F\u0167\n\x1F\x03\x1F" +
        "\x03\x1F\x03\x1F\x03 \x03 \x07 \u016E\n \f \x0E \u0171\v \x03 \x03 \x03" +
        "!\x03!\x05!\u0177\n!\x03\"\x05\"\u017A\n\"\x03\"\x05\"\u017D\n\"\x03\"" +
        "\x03\"\x03\"\x03\"\x03#\x05#\u0184\n#\x03#\x03#\x03#\x03#\x03$\x03$\x03" +
        "$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03" +
        "$\x03$\x05$\u019C\n$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03" +
        "$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03" +
        "$\x03$\x03$\x03$\x03$\x07$\u01BA\n$\f$\x0E$\u01BD\v$\x03%\x03%\x03%\x03" +
        "%\x03%\x03%\x03%\x05%\u01C6\n%\x03&\x03&\x03\'\x03\'\x03(\x05(\u01CD\n" +
        "(\x03(\x03(\x03)\x03)\x03*\x03*\x03*\x07*\u01D6\n*\f*\x0E*\u01D9\v*\x03" +
        "*\x03*\x03+\x03+\x03,\x03,\x03-\x03-\x03-\x03-\x05-\u01E5\n-\x03-\x03" +
        "-\x03.\x03.\x03/\x03/\x03/\x030\x070\u01EF\n0\f0\x0E0\u01F2\v0\x031\x03" +
        "1\x051\u01F6\n1\x031\x031\x051\u01FA\n1\x031\x031\x032\x032\x032\x072" +
        "\u0201\n2\f2\x0E2\u0204\v2\x032\x052\u0207\n2\x033\x033\x033\x053\u020C" +
        "\n3\x033\x033\x034\x054\u0211\n4\x034\x034\x034\x034\x074\u0217\n4\f4" +
        "\x0E4\u021A\v4\x034\x054\u021D\n4\x054\u021F\n4\x034\x034\x035\x035\x03" +
        "5\x055\u0226\n5\x036\x036\x036\x036\x076\u022C\n6\f6\x0E6\u022F\v6\x03" +
        "6\x056\u0232\n6\x056\u0234\n6\x036\x036\x037\x037\x037\x037\x037\x037" +
        "\x057\u023E\n7\x038\x038\x038\x038\x058\u0244\n8\x039\x039\x039\x039\x03" +
        "9\x03:\x03:\x03;\x03;\x03;\x02\x02\x03F<\x02\x02\x04\x02\x06\x02\b\x02" +
        "\n\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C" +
        "\x02\x1E\x02 \x02\"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026" +
        "\x028\x02:\x02<\x02>\x02@\x02B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02" +
        "R\x02T\x02V\x02X\x02Z\x02\\\x02^\x02`\x02b\x02d\x02f\x02h\x02j\x02l\x02" +
        "n\x02p\x02r\x02t\x02\x02\x06\x06\x02\x05\x05\x07\x0E\x12\x13\x15\x16\x04" +
        "\x02\x05\x05\b\b\x03\x02&)\x03\x02*+\x02\u027E\x02v\x03\x02\x02\x02\x04" +
        "\x7F\x03\x02\x02\x02\x06\x8D\x03\x02\x02\x02\b\x97\x03\x02\x02\x02\n\x99" +
        "\x03\x02\x02\x02\f\x9D\x03\x02\x02\x02\x0E\x9F\x03\x02\x02\x02\x10\xA7" +
        "\x03\x02\x02\x02\x12\xAA\x03\x02\x02\x02\x14\xB1\x03\x02\x02\x02\x16\xBF" +
        "\x03\x02\x02\x02\x18\xC4\x03\x02\x02\x02\x1A\xCA\x03\x02\x02\x02\x1C\xD6" +
        "\x03\x02\x02\x02\x1E\xE6\x03\x02\x02\x02 \xF1\x03\x02\x02\x02\"\xF8\x03" +
        "\x02\x02\x02$\xFB\x03\x02\x02\x02&\u0105\x03\x02\x02\x02(\u010E\x03\x02" +
        "\x02\x02*\u0123\x03\x02\x02\x02,\u0130\x03\x02\x02\x02.\u0135\x03\x02" +
        "\x02\x020\u0139\x03\x02\x02\x022\u013C\x03\x02\x02\x024\u0142\x03\x02" +
        "\x02\x026\u0148\x03\x02\x02\x028\u014E\x03\x02\x02\x02:\u0159\x03\x02" +
        "\x02\x02<\u0166\x03\x02\x02\x02>\u016B\x03\x02\x02\x02@\u0176\x03\x02" +
        "\x02\x02B\u0179\x03\x02\x02\x02D\u0183\x03\x02\x02\x02F\u019B\x03\x02" +
        "\x02\x02H\u01C5\x03\x02\x02\x02J\u01C7\x03\x02\x02\x02L\u01C9\x03\x02" +
        "\x02\x02N\u01CC\x03\x02\x02\x02P\u01D0\x03\x02\x02\x02R\u01D2\x03\x02" +
        "\x02\x02T\u01DC\x03\x02\x02\x02V\u01DE\x03\x02\x02\x02X\u01E0\x03\x02" +
        "\x02\x02Z\u01E8\x03\x02\x02\x02\\\u01EA\x03\x02\x02\x02^\u01F0\x03\x02" +
        "\x02\x02`\u01F3\x03\x02\x02\x02b\u01FD\x03\x02\x02\x02d\u020B\x03\x02" +
        "\x02\x02f\u0210\x03\x02\x02\x02h\u0222\x03\x02\x02\x02j\u0227\x03\x02" +
        "\x02\x02l\u0237\x03\x02\x02\x02n\u0243\x03\x02\x02\x02p\u0245\x03\x02" +
        "\x02\x02r\u024A\x03\x02\x02\x02t\u024C\x03\x02\x02\x02vw\x05\x04\x03\x02" +
        "wx\x07\x02\x02\x03x\x03\x03\x02\x02\x02y\x80\x05\x1C\x0F\x02z\x80\x05" +
        "2\x1A\x02{\x80\x05D#\x02|\x80\x05B\"\x02}\x80\x05`1\x02~\x80\x05p9\x02" +
        "\x7Fy\x03\x02\x02\x02\x7Fz\x03\x02\x02\x02\x7F{\x03\x02\x02\x02\x7F|\x03" +
        "\x02\x02\x02\x7F}\x03\x02\x02\x02\x7F~\x03\x02\x02\x02\x80\x05\x03\x02" +
        "\x02\x02\x81\x83\x05\x10\t\x02\x82\x84\x05\b\x05\x02\x83\x82\x03\x02\x02" +
        "\x02\x84\x85\x03\x02\x02\x02\x85\x83\x03\x02\x02\x02\x85\x86\x03\x02\x02" +
        "\x02\x86\x87\x03\x02\x02\x02\x87\x88\x07\x02\x02\x03\x88\x8E\x03\x02\x02" +
        "\x02\x89\x8A\x05\x10\t\x02\x8A\x8B\x07\x02\x02\x03\x8B\x8E\x03\x02\x02" +
        "\x02\x8C\x8E\x07\x02\x02\x03\x8D\x81\x03\x02\x02\x02\x8D\x89\x03\x02\x02" +
        "\x02\x8D\x8C\x03\x02\x02\x02\x8E\x07\x03\x02\x02\x02\x8F\x98\x05\x12\n" +
        "\x02\x90\x98\x052\x1A\x02\x91\x98\x05\x1C\x0F\x02\x92\x98\x056\x1C\x02" +
        "\x93\x98\x054\x1B\x02\x94\x98\x05\x14\v\x02\x95\x98\x05B\"\x02\x96\x98" +
        "\x05F$\x02\x97\x8F\x03\x02\x02\x02\x97\x90\x03\x02\x02\x02\x97\x91\x03" +
        "\x02\x02\x02\x97\x92\x03\x02\x02\x02\x97\x93\x03\x02\x02\x02\x97\x94\x03" +
        "\x02\x02\x02\x97\x95\x03\x02\x02\x02\x97\x96\x03\x02\x02\x02\x98\t\x03" +
        "\x02\x02\x02\x99\x9A\t\x02\x02\x02\x9A\v\x03\x02\x02\x02\x9B\x9E\x072" +
        "\x02\x02\x9C\x9E\x05\n\x06\x02\x9D\x9B\x03\x02\x02\x02\x9D\x9C\x03\x02" +
        "\x02\x02\x9E\r\x03\x02\x02\x02\x9F\xA4\x05\f\x07\x02\xA0\xA1\x07#\x02" +
        "\x02\xA1\xA3\x05\f\x07\x02\xA2\xA0\x03\x02\x02\x02\xA3\xA6\x03\x02\x02" +
        "\x02\xA4\xA2\x03\x02\x02\x02\xA4\xA5\x03\x02\x02\x02\xA5\x0F\x03\x02\x02" +
        "\x02\xA6\xA4\x03\x02\x02\x02\xA7\xA8\x07\x03\x02\x02\xA8\xA9\x05\x0E\b" +
        "\x02\xA9\x11\x03\x02\x02\x02\xAA\xAB\x07\x04\x02\x02\xAB\xAE\x05\x0E\b" +
        "\x02\xAC\xAD\x07#\x02\x02\xAD\xAF\x073\x02\x02\xAE\xAC\x03\x02\x02\x02" +
        "\xAE\xAF\x03\x02\x02\x02\xAF\x13\x03\x02\x02\x02\xB0\xB2\x05^0\x02\xB1" +
        "\xB0\x03\x02\x02\x02\xB1\xB2\x03\x02\x02\x02\xB2\xB3\x03\x02\x02\x02\xB3" +
        "\xB4\x07\x13\x02\x02\xB4\xB5\x05\x0E\b\x02\xB5\xB9\x07\x1D\x02\x02\xB6" +
        "\xB8\x05\x16\f\x02\xB7\xB6\x03\x02\x02\x02\xB8\xBB\x03\x02\x02\x02\xB9" +
        "\xB7\x03\x02\x02\x02\xB9\xBA\x03\x02\x02\x02\xBA\xBC\x03\x02\x02\x02\xBB" +
        "\xB9\x03\x02\x02\x02\xBC\xBD\x07\x1E\x02\x02\xBD\x15\x03\x02\x02\x02\xBE" +
        "\xC0\x05^0\x02\xBF\xBE\x03\x02\x02\x02\xBF\xC0\x03\x02\x02\x02\xC0\xC1" +
        "\x03\x02\x02\x02\xC1\xC2\x05\f\x07\x02\xC2\x17\x03\x02\x02\x02\xC3\xC5" +
        "\x05^0\x02\xC4\xC3\x03\x02\x02\x02\xC4\xC5\x03\x02\x02\x02\xC5\xC6\x03" +
        "\x02\x02\x02\xC6\xC8\x05\x0E\b\x02\xC7\xC9\x05\x1A\x0E\x02\xC8\xC7\x03" +
        "\x02\x02\x02\xC8\xC9\x03\x02\x02\x02\xC9\x19\x03\x02\x02\x02\xCA\xCB\x07" +
        "\'\x02\x02\xCB\xD0\x05\x18\r\x02\xCC\xCD\x07\"\x02\x02\xCD\xCF\x05\x18" +
        "\r\x02\xCE\xCC\x03\x02\x02\x02\xCF\xD2\x03\x02\x02\x02\xD0\xCE\x03\x02" +
        "\x02\x02\xD0\xD1\x03\x02\x02\x02\xD1\xD3\x03\x02\x02\x02\xD2\xD0\x03\x02" +
        "\x02\x02\xD3\xD4\x07&\x02\x02\xD4\x1B\x03\x02\x02\x02\xD5\xD7\x05^0\x02" +
        "\xD6\xD5\x03\x02\x02\x02\xD6\xD7\x03\x02\x02\x02\xD7\xD8\x03\x02\x02\x02" +
        "\xD8\xD9\x07\t\x02\x02\xD9\xDB\x05\x0E\b\x02\xDA\xDC\x05\x1E\x10\x02\xDB" +
        "\xDA\x03\x02\x02\x02\xDB\xDC\x03\x02\x02\x02\xDC\xE0\x03\x02\x02\x02\xDD" +
        "\xDF\x05\"\x12\x02\xDE\xDD\x03\x02\x02\x02\xDF\xE2\x03\x02\x02\x02\xE0" +
        "\xDE\x03\x02\x02\x02\xE0\xE1\x03\x02\x02\x02\xE1\xE4\x03\x02\x02\x02\xE2" +
        "\xE0\x03\x02\x02\x02\xE3\xE5\x05$\x13\x02\xE4\xE3\x03\x02\x02\x02\xE4" +
        "\xE5\x03\x02\x02\x02\xE5\x1D\x03\x02\x02\x02\xE6\xE7\x07\'\x02\x02\xE7" +
        "\xEC\x05 \x11\x02\xE8\xE9\x07\"\x02\x02\xE9\xEB\x05 \x11\x02\xEA\xE8\x03" +
        "\x02\x02\x02\xEB\xEE\x03\x02\x02\x02\xEC\xEA\x03\x02\x02\x02\xEC\xED\x03" +
        "\x02\x02\x02\xED\xEF\x03\x02\x02\x02\xEE\xEC\x03\x02\x02\x02\xEF\xF0\x07" +
        "&\x02\x02\xF0\x1F\x03\x02\x02\x02\xF1\xF5\x05\f\x07\x02\xF2\xF4\x05\"" +
        "\x12\x02\xF3\xF2\x03\x02\x02\x02\xF4\xF7\x03\x02\x02\x02\xF5\xF3\x03\x02" +
        "\x02\x02\xF5\xF6\x03\x02\x02\x02\xF6!\x03\x02\x02\x02\xF7\xF5\x03\x02" +
        "\x02\x02\xF8\xF9\x07$\x02\x02\xF9\xFA\x05\x18\r\x02\xFA#\x03\x02\x02\x02" +
        "\xFB\xFF\x07\x1D\x02\x02\xFC\xFE\x05&\x14\x02\xFD\xFC\x03\x02\x02\x02" +
        "\xFE\u0101\x03\x02\x02\x02\xFF\xFD\x03\x02\x02\x02\xFF\u0100\x03\x02\x02" +
        "\x02\u0100\u0102\x03\x02\x02\x02\u0101\xFF\x03\x02\x02\x02\u0102\u0103" +
        "\x07\x1E\x02\x02\u0103%\x03\x02\x02\x02\u0104\u0106\x05^0\x02\u0105\u0104" +
        "\x03\x02\x02\x02\u0105\u0106\x03\x02\x02\x02\u0106\u0108\x03\x02\x02\x02" +
        "\u0107\u0109\x07\n\x02\x02\u0108\u0107\x03\x02\x02\x02\u0108\u0109\x03" +
        "\x02\x02\x02\u0109\u010A\x03\x02\x02\x02\u010A\u010C\x05\x18\r\x02\u010B" +
        "\u010D\x05\f\x07\x02\u010C\u010B\x03\x02\x02\x02\u010C\u010D\x03\x02\x02" +
        "\x02\u010D\'\x03\x02\x02\x02\u010E\u011E\x07\x1B\x02\x02\u010F\u0111\x05" +
        "*\x16\x02\u0110\u010F\x03\x02\x02\x02\u0110\u0111\x03\x02\x02\x02\u0111" +
        "\u0118\x03\x02\x02\x02\u0112\u0114\x07\"\x02\x02\u0113\u0115\x05*\x16" +
        "\x02\u0114\u0113\x03\x02\x02\x02\u0114\u0115\x03\x02\x02\x02\u0115\u0117" +
        "\x03\x02\x02\x02\u0116\u0112\x03\x02\x02\x02\u0117\u011A\x03\x02\x02\x02" +
        "\u0118\u0116\x03\x02\x02\x02\u0118\u0119\x03\x02\x02\x02\u0119\u011C\x03" +
        "\x02\x02\x02\u011A\u0118\x03\x02\x02\x02\u011B\u011D\x07\"\x02\x02\u011C" +
        "\u011B\x03\x02\x02\x02\u011C\u011D\x03\x02\x02\x02\u011D\u011F\x03\x02" +
        "\x02\x02\u011E\u0110\x03\x02\x02\x02\u011E\u011F\x03\x02\x02\x02\u011F" +
        "\u0120\x03\x02\x02\x02\u0120\u0121\x07\x1C\x02\x02\u0121)\x03\x02\x02" +
        "\x02\u0122\u0124\x05^0\x02\u0123\u0122\x03\x02\x02\x02\u0123\u0124\x03" +
        "\x02\x02\x02\u0124\u0126\x03\x02\x02\x02\u0125\u0127\x07\n\x02\x02\u0126" +
        "\u0125\x03\x02\x02\x02\u0126\u0127\x03\x02\x02\x02\u0127\u012A\x03\x02" +
        "\x02\x02\u0128\u012B\x05,\x17\x02\u0129\u012B\x05.\x18\x02\u012A\u0128" +
        "\x03\x02\x02\x02\u012A\u0129\x03\x02\x02\x02\u012B\u012E\x03\x02\x02\x02" +
        "\u012C\u012D\x07%\x02\x02\u012D\u012F\x050\x19\x02\u012E\u012C\x03\x02" +
        "\x02\x02\u012E\u012F\x03\x02\x02\x02\u012F+\x03\x02\x02\x02\u0130\u0132" +
        "\x05\x18\r\x02\u0131\u0133\x05\f\x07\x02\u0132\u0131\x03\x02\x02\x02\u0132" +
        "\u0133\x03\x02\x02\x02\u0133-\x03\x02\x02\x02\u0134\u0136\t\x03\x02\x02" +
        "\u0135\u0134\x03\x02\x02\x02\u0135\u0136\x03\x02\x02\x02\u0136\u0137\x03" +
        "\x02\x02\x02\u0137\u0138\x05:\x1E\x02\u0138/\x03\x02\x02\x02\u0139\u013A" +
        "\x05F$\x02\u013A1\x03\x02\x02\x02\u013B\u013D\x05^0\x02\u013C\u013B\x03" +
        "\x02\x02\x02\u013C\u013D\x03\x02\x02\x02\u013D\u013E\x03\x02\x02\x02\u013E" +
        "\u013F\x07\b\x02\x02\u013F\u0140\x05:\x1E\x02\u01403\x03\x02\x02\x02\u0141" +
        "\u0143\x05^0\x02\u0142\u0141\x03\x02\x02\x02\u0142\u0143\x03\x02\x02\x02" +
        "\u0143\u0144\x03\x02\x02\x02\u0144\u0145\x07\x07\x02\x02\u0145\u0146\x05" +
        "> \x02\u01465\x03\x02\x02\x02\u0147\u0149\x05^0\x02\u0148\u0147\x03\x02" +
        "\x02\x02\u0148\u0149\x03\x02\x02\x02\u0149\u014A\x03\x02\x02\x02\u014A" +
        "\u014B\x07\x05\x02\x02\u014B\u014C\x05:\x1E\x02\u014C\u014D\x058\x1D\x02" +
        "\u014D7\x03\x02\x02\x02\u014E\u0152\x07\x1D\x02\x02\u014F\u0151\x05<\x1F" +
        "\x02\u0150\u014F\x03\x02\x02\x02\u0151\u0154\x03\x02\x02\x02\u0152\u0150" +
        "\x03\x02\x02\x02\u0152\u0153\x03\x02\x02\x02\u0153\u0155\x03\x02\x02\x02" +
        "\u0154\u0152\x03\x02\x02\x02\u0155\u0156\x07\x1E\x02\x02\u01569\x03\x02" +
        "\x02\x02\u0157\u015A\x05N(\x02\u0158\u015A\x05\x18\r\x02\u0159\u0157\x03" +
        "\x02\x02\x02\u0159\u0158\x03\x02\x02\x02\u0159\u015A\x03\x02\x02\x02\u015A" +
        "\u015D\x03\x02\x02\x02\u015B\u015E\x05\x0E\b\x02\u015C\u015E\x05\f\x07" +
        "\x02\u015D\u015B\x03\x02\x02\x02\u015D\u015C\x03\x02\x02\x02\u015E\u0160" +
        "\x03\x02\x02\x02\u015F\u0161\x05\x1E\x10\x02\u0160\u015F\x03\x02\x02\x02" +
        "\u0160\u0161\x03\x02\x02\x02\u0161\u0163\x03\x02\x02\x02\u0162\u0164\x05" +
        "(\x15\x02\u0163\u0162\x03\x02\x02\x02\u0163\u0164\x03\x02\x02\x02\u0164" +
        ";\x03\x02\x02\x02\u0165\u0167\x05^0\x02\u0166\u0165\x03\x02\x02\x02\u0166" +
        "\u0167\x03\x02\x02\x02\u0167\u0168\x03\x02\x02\x02\u0168\u0169\x07\x06" +
        "\x02\x02\u0169\u016A\x05> \x02\u016A=\x03\x02\x02\x02\u016B\u016F\x07" +
        "\x1D\x02\x02\u016C\u016E\x05@!\x02\u016D\u016C\x03\x02\x02\x02\u016E\u0171" +
        "\x03\x02\x02\x02\u016F\u016D\x03\x02\x02\x02\u016F\u0170\x03\x02\x02\x02" +
        "\u0170\u0172\x03\x02\x02\x02\u0171\u016F\x03\x02\x02\x02\u0172\u0173\x07" +
        "\x1E\x02\x02\u0173?\x03\x02\x02\x02\u0174\u0177\x05D#\x02\u0175\u0177" +
        "\x05F$\x02\u0176\u0174\x03\x02\x02\x02\u0176\u0175\x03\x02\x02\x02\u0177" +
        "A\x03\x02\x02\x02\u0178\u017A\x05^0\x02\u0179\u0178\x03\x02\x02\x02\u0179" +
        "\u017A\x03\x02\x02\x02\u017A\u017C\x03\x02\x02\x02\u017B\u017D\x05\x18" +
        "\r\x02\u017C\u017B\x03\x02\x02\x02\u017C\u017D\x03\x02\x02\x02\u017D\u017E" +
        "\x03\x02\x02\x02\u017E\u017F\x05\x0E\b\x02\u017F\u0180\x07%\x02\x02\u0180" +
        "\u0181\x05F$\x02\u0181C\x03\x02\x02\x02\u0182\u0184\x05\x18\r\x02\u0183" +
        "\u0182\x03\x02\x02\x02\u0183\u0184\x03\x02\x02\x02\u0184\u0185\x03\x02" +
        "\x02\x02\u0185\u0186\x05\f\x07\x02\u0186\u0187\x07%\x02\x02\u0187\u0188" +
        "\x05F$\x02\u0188E\x03\x02\x02\x02\u0189\u018A\b$\x01\x02\u018A\u019C\x05" +
        "l7\x02\u018B\u019C\x05p9\x02\u018C\u019C\x05`1\x02\u018D\u019C\x05j6\x02" +
        "\u018E\u019C\x05f4\x02\u018F\u0190\x07,\x02\x02\u0190\u019C\x05F$\x0E" +
        "\u0191\u019C\x05J&\x02\u0192\u019C\x05L\'\x02\u0193\u019C\x05\f\x07\x02" +
        "\u0194\u019C\x05P)\x02\u0195\u019C\x05R*\x02\u0196\u019C\x05Z.\x02\u0197" +
        "\u0198\x07\x1B\x02\x02\u0198\u0199\x05F$\x02\u0199\u019A\x07\x1C\x02\x02" +
        "\u019A\u019C\x03\x02\x02\x02\u019B\u0189\x03\x02\x02\x02\u019B\u018B\x03" +
        "\x02\x02\x02\u019B\u018C\x03\x02\x02\x02\u019B\u018D\x03\x02\x02\x02\u019B" +
        "\u018E\x03\x02\x02\x02\u019B\u018F\x03\x02\x02\x02\u019B\u0191\x03\x02" +
        "\x02\x02\u019B\u0192\x03\x02\x02\x02\u019B\u0193\x03\x02\x02\x02\u019B" +
        "\u0194\x03\x02\x02\x02\u019B\u0195\x03\x02\x02\x02\u019B\u0196\x03\x02" +
        "\x02\x02\u019B\u0197\x03\x02\x02\x02\u019C\u01BB\x03\x02\x02\x02\u019D" +
        "\u019E\f\x0F\x02\x02\u019E\u019F\x07\x16\x02\x02\u019F\u01BA\x05F$\x10" +
        "\u01A0\u01A1\f\r\x02\x02\u01A1\u01A2\x05r:\x02\u01A2\u01A3\x05F$\x0E\u01A3" +
        "\u01BA\x03\x02\x02\x02\u01A4\u01A5\f\f\x02\x02\u01A5\u01A6\x05t;\x02\u01A6" +
        "\u01A7\x05F$\r\u01A7\u01BA\x03\x02\x02\x02\u01A8\u01A9\f\v\x02\x02\u01A9" +
        "\u01AA\x07-\x02\x02\u01AA\u01BA\x05F$\f\u01AB\u01AC\f\n\x02\x02\u01AC" +
        "\u01AD\x07.\x02\x02\u01AD\u01BA\x05F$\v\u01AE\u01AF\f\x12\x02\x02\u01AF" +
        "\u01B0\x07\x15\x02\x02\u01B0\u01BA\x05\x18\r\x02\u01B1\u01B2\f\x11\x02" +
        "\x02\u01B2\u01B3\x07\x1F\x02\x02\u01B3\u01B4\x05P)\x02\u01B4\u01B5\x07" +
        " \x02\x02\u01B5\u01BA\x03\x02\x02\x02\u01B6\u01B7\f\x10\x02\x02\u01B7" +
        "\u01B8\x07#\x02\x02\u01B8\u01BA\x05\f\x07\x02\u01B9\u019D\x03\x02\x02" +
        "\x02\u01B9\u01A0\x03\x02\x02\x02\u01B9\u01A4\x03\x02\x02\x02\u01B9\u01A8" +
        "\x03\x02\x02\x02\u01B9\u01AB\x03\x02\x02\x02\u01B9\u01AE\x03\x02\x02\x02" +
        "\u01B9\u01B1\x03\x02\x02\x02\u01B9\u01B6\x03\x02\x02\x02\u01BA\u01BD\x03" +
        "\x02\x02\x02\u01BB\u01B9\x03\x02\x02\x02\u01BB\u01BC\x03\x02\x02\x02\u01BC" +
        "G\x03\x02\x02\x02\u01BD\u01BB\x03\x02\x02\x02\u01BE\u01C6\x05J&\x02\u01BF" +
        "\u01C6\x05L\'\x02\u01C0\u01C6\x05P)\x02\u01C1\u01C6\x05R*\x02\u01C2\u01C6" +
        "\x05Z.\x02\u01C3\u01C6\x05j6\x02\u01C4\u01C6\x05f4\x02\u01C5\u01BE\x03" +
        "\x02\x02\x02\u01C5\u01BF\x03\x02\x02\x02\u01C5\u01C0\x03\x02\x02\x02\u01C5" +
        "\u01C1\x03\x02\x02\x02\u01C5\u01C2\x03\x02\x02\x02\u01C5\u01C3\x03\x02" +
        "\x02\x02\u01C5\u01C4\x03\x02\x02\x02\u01C6I\x03\x02\x02\x02\u01C7\u01C8" +
        "\x07\x10\x02\x02\u01C8K\x03\x02\x02\x02\u01C9\u01CA\x07\x11\x02\x02\u01CA" +
        "M\x03\x02\x02\x02\u01CB\u01CD\x05^0\x02\u01CC\u01CB\x03\x02\x02\x02\u01CC" +
        "\u01CD\x03\x02\x02\x02\u01CD\u01CE\x03\x02\x02\x02\u01CE\u01CF\x07\x12" +
        "\x02\x02\u01CFO\x03\x02\x02\x02\u01D0\u01D1\x07\x19\x02\x02\u01D1Q\x03" +
        "\x02\x02\x02\u01D2\u01D7\x074\x02\x02\u01D3\u01D6\x05T+\x02\u01D4\u01D6" +
        "\x05X-\x02\u01D5\u01D3\x03\x02\x02\x02\u01D5\u01D4\x03\x02\x02\x02\u01D6" +
        "\u01D9\x03\x02\x02\x02\u01D7\u01D5\x03\x02\x02\x02\u01D7\u01D8\x03\x02" +
        "\x02\x02\u01D8\u01DA\x03\x02\x02\x02\u01D9\u01D7\x03\x02\x02\x02\u01DA" +
        "\u01DB\x075\x02\x02\u01DBS\x03\x02\x02\x02\u01DC\u01DD\x077\x02\x02\u01DD" +
        "U\x03\x02\x02\x02\u01DE\u01DF\x07;\x02\x02\u01DFW\x03\x02\x02\x02\u01E0" +
        "\u01E1\x076\x02\x02\u01E1\u01E4\x05\x0E\b\x02\u01E2\u01E3\x07\x18\x02" +
        "\x02\u01E3\u01E5\x05V,\x02\u01E4\u01E2\x03\x02\x02\x02\u01E4\u01E5\x03" +
        "\x02\x02\x02\u01E5\u01E6\x03\x02\x02\x02\u01E6\u01E7\x079\x02\x02\u01E7" +
        "Y\x03\x02\x02\x02\u01E8\u01E9\x07\x1A\x02\x02\u01E9[\x03\x02\x02\x02\u01EA" +
        "\u01EB\x07\x14\x02\x02\u01EB\u01EC\x05`1\x02\u01EC]\x03\x02\x02\x02\u01ED" +
        "\u01EF\x05\\/\x02\u01EE\u01ED\x03\x02\x02\x02\u01EF\u01F2\x03\x02\x02" +
        "\x02\u01F0\u01EE\x03\x02\x02\x02\u01F0\u01F1\x03\x02\x02\x02\u01F1_\x03" +
        "\x02\x02\x02\u01F2\u01F0\x03\x02\x02\x02\u01F3\u01F5\x05\x0E\b\x02\u01F4" +
        "\u01F6\x05\x1A\x0E\x02\u01F5\u01F4\x03\x02\x02\x02\u01F5\u01F6\x03\x02" +
        "\x02\x02\u01F6\u01F7\x03\x02\x02\x02\u01F7\u01F9\x07\x1B\x02\x02\u01F8" +
        "\u01FA\x05b2\x02\u01F9\u01F8\x03\x02\x02\x02\u01F9\u01FA\x03\x02\x02\x02" +
        "\u01FA\u01FB\x03\x02\x02\x02\u01FB\u01FC\x07\x1C\x02\x02\u01FCa\x03\x02" +
        "\x02\x02\u01FD\u0202\x05d3\x02\u01FE\u01FF\x07\"\x02\x02\u01FF\u0201\x05" +
        "d3\x02\u0200\u01FE\x03\x02\x02\x02\u0201\u0204\x03\x02\x02\x02\u0202\u0200" +
        "\x03\x02\x02\x02\u0202\u0203\x03\x02\x02\x02\u0203\u0206\x03\x02\x02\x02" +
        "\u0204\u0202\x03\x02\x02\x02\u0205\u0207\x07\"\x02\x02\u0206\u0205\x03" +
        "\x02\x02\x02\u0206\u0207\x03\x02\x02\x02\u0207c\x03\x02\x02\x02\u0208" +
        "\u0209\x05\f\x07\x02\u0209\u020A\x07%\x02\x02\u020A\u020C\x03\x02\x02" +
        "\x02\u020B\u0208\x03\x02\x02\x02\u020B\u020C\x03\x02\x02\x02\u020C\u020D" +
        "\x03\x02\x02\x02\u020D\u020E\x05F$\x02\u020Ee\x03\x02\x02\x02\u020F\u0211" +
        "\x05\x18\r\x02\u0210\u020F\x03\x02\x02\x02\u0210\u0211\x03\x02\x02\x02" +
        "\u0211\u0212\x03\x02\x02\x02\u0212\u021E\x07\x1D\x02\x02\u0213\u0218\x05" +
        "h5\x02\u0214\u0215\x07\"\x02\x02\u0215\u0217\x05h5\x02\u0216\u0214\x03" +
        "\x02\x02\x02\u0217\u021A\x03\x02\x02\x02\u0218\u0216\x03\x02\x02\x02\u0218" +
        "\u0219\x03\x02\x02\x02\u0219\u021C\x03\x02\x02\x02\u021A\u0218\x03\x02" +
        "\x02\x02\u021B\u021D\x07\"\x02\x02\u021C\u021B\x03\x02\x02\x02\u021C\u021D" +
        "\x03\x02\x02\x02\u021D\u021F\x03\x02\x02\x02\u021E\u0213\x03\x02\x02\x02" +
        "\u021E\u021F\x03\x02\x02\x02\u021F\u0220\x03\x02\x02\x02\u0220\u0221\x07" +
        "\x1E\x02\x02\u0221g\x03\x02\x02\x02\u0222\u0225\x05\f\x07\x02\u0223\u0224" +
        "\x07%\x02\x02\u0224\u0226\x05F$\x02\u0225\u0223\x03\x02\x02\x02\u0225" +
        "\u0226\x03\x02\x02\x02\u0226i\x03\x02\x02\x02\u0227\u0233\x07\x1F\x02" +
        "\x02\u0228\u022D\x05F$\x02\u0229\u022A\x07\"\x02\x02\u022A\u022C\x05F"
});
Object.defineProperty(ACDLParser, "_serializedATNSegment1", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "$\x02\u022B\u0229\x03\x02\x02\x02\u022C\u022F\x03\x02\x02\x02\u022D\u022B" +
        "\x03\x02\x02\x02\u022D\u022E\x03\x02\x02\x02\u022E\u0231\x03\x02\x02\x02" +
        "\u022F\u022D\x03\x02\x02\x02\u0230\u0232\x07\"\x02\x02\u0231\u0230\x03" +
        "\x02\x02\x02\u0231\u0232\x03\x02\x02\x02\u0232\u0234\x03\x02\x02\x02\u0233" +
        "\u0228\x03\x02\x02\x02\u0233\u0234\x03\x02\x02\x02\u0234\u0235\x03\x02" +
        "\x02\x02\u0235\u0236\x07 \x02\x02\u0236k\x03\x02\x02\x02\u0237\u0238\x07" +
        "\v\x02\x02\u0238\u0239\x07\x1B\x02\x02\u0239\u023A\x05F$\x02\u023A\u023B" +
        "\x07\x1C\x02\x02\u023B\u023D\x05> \x02\u023C\u023E\x05n8\x02\u023D\u023C" +
        "\x03\x02\x02\x02\u023D\u023E\x03\x02\x02\x02\u023Em\x03\x02\x02\x02\u023F" +
        "\u0240\x07\f\x02\x02\u0240\u0244\x05l7\x02\u0241\u0242\x07\f\x02\x02\u0242" +
        "\u0244\x05> \x02\u0243\u023F\x03\x02\x02\x02\u0243\u0241\x03\x02\x02\x02" +
        "\u0244o\x03\x02\x02\x02\u0245\u0246\x07\r\x02\x02\u0246\u0247\x05> \x02" +
        "\u0247\u0248\x07\x0E\x02\x02\u0248\u0249\x05> \x02\u0249q\x03\x02\x02" +
        "\x02\u024A\u024B\t\x04\x02\x02\u024Bs\x03\x02\x02\x02\u024C\u024D\t\x05" +
        "\x02\x02\u024Du\x03\x02\x02\x02J\x7F\x85\x8D\x97\x9D\xA4\xAE\xB1\xB9\xBF" +
        "\xC4\xC8\xD0\xD6\xDB\xE0\xE4\xEC\xF5\xFF\u0105\u0108\u010C\u0110\u0114" +
        "\u0118\u011C\u011E\u0123\u0126\u012A\u012E\u0132\u0135\u013C\u0142\u0148" +
        "\u0152\u0159\u015D\u0160\u0163\u0166\u016F\u0176\u0179\u017C\u0183\u019B" +
        "\u01B9\u01BB\u01C5\u01CC\u01D5\u01D7\u01E4\u01F0\u01F5\u01F9\u0202\u0206" +
        "\u020B\u0210\u0218\u021C\u021E\u0225\u022D\u0231\u0233\u023D\u0243"
});
Object.defineProperty(ACDLParser, "_serializedATN", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Utils.join([
        ACDLParser._serializedATNSegment0,
        ACDLParser._serializedATNSegment1,
    ], "")
});
export class LineContext extends ParserRuleContext {
    singleLineExpr() {
        return this.getRuleContext(0, SingleLineExprContext);
    }
    EOF() { return this.getToken(ACDLParser.EOF, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_line; }
    // @Override
    enterRule(listener) {
        if (listener.enterLine) {
            listener.enterLine(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLine) {
            listener.exitLine(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLine) {
            return visitor.visitLine(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class SingleLineExprContext extends ParserRuleContext {
    typeDeclaration() {
        return this.tryGetRuleContext(0, TypeDeclarationContext);
    }
    actionDeclaration() {
        return this.tryGetRuleContext(0, ActionDeclarationContext);
    }
    nameDeclaration() {
        return this.tryGetRuleContext(0, NameDeclarationContext);
    }
    qualifiedNameDeclaration() {
        return this.tryGetRuleContext(0, QualifiedNameDeclarationContext);
    }
    call() {
        return this.tryGetRuleContext(0, CallContext);
    }
    correction() {
        return this.tryGetRuleContext(0, CorrectionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_singleLineExpr; }
    // @Override
    enterRule(listener) {
        if (listener.enterSingleLineExpr) {
            listener.enterSingleLineExpr(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSingleLineExpr) {
            listener.exitSingleLineExpr(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSingleLineExpr) {
            return visitor.visitSingleLineExpr(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ModuleContext extends ParserRuleContext {
    namespaceDeclaration() {
        return this.tryGetRuleContext(0, NamespaceDeclarationContext);
    }
    EOF() { return this.getToken(ACDLParser.EOF, 0); }
    moduleExpression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ModuleExpressionContext);
        }
        else {
            return this.getRuleContext(i, ModuleExpressionContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_module; }
    // @Override
    enterRule(listener) {
        if (listener.enterModule) {
            listener.enterModule(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitModule) {
            listener.exitModule(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitModule) {
            return visitor.visitModule(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ModuleExpressionContext extends ParserRuleContext {
    importDeclaration() {
        return this.tryGetRuleContext(0, ImportDeclarationContext);
    }
    actionDeclaration() {
        return this.tryGetRuleContext(0, ActionDeclarationContext);
    }
    typeDeclaration() {
        return this.tryGetRuleContext(0, TypeDeclarationContext);
    }
    dialogDeclaration() {
        return this.tryGetRuleContext(0, DialogDeclarationContext);
    }
    interactionDeclaration() {
        return this.tryGetRuleContext(0, InteractionDeclarationContext);
    }
    enumDeclaration() {
        return this.tryGetRuleContext(0, EnumDeclarationContext);
    }
    qualifiedNameDeclaration() {
        return this.tryGetRuleContext(0, QualifiedNameDeclarationContext);
    }
    expression() {
        return this.tryGetRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_moduleExpression; }
    // @Override
    enterRule(listener) {
        if (listener.enterModuleExpression) {
            listener.enterModuleExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitModuleExpression) {
            listener.exitModuleExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitModuleExpression) {
            return visitor.visitModuleExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class KeywordContext extends ParserRuleContext {
    ACTION() { return this.tryGetToken(ACDLParser.ACTION, 0); }
    TYPE() { return this.tryGetToken(ACDLParser.TYPE, 0); }
    DIALOG() { return this.tryGetToken(ACDLParser.DIALOG, 0); }
    INTERACTION() { return this.tryGetToken(ACDLParser.INTERACTION, 0); }
    ENUM() { return this.tryGetToken(ACDLParser.ENUM, 0); }
    IN() { return this.tryGetToken(ACDLParser.IN, 0); }
    IS() { return this.tryGetToken(ACDLParser.IS, 0); }
    IF() { return this.tryGetToken(ACDLParser.IF, 0); }
    ELSE() { return this.tryGetToken(ACDLParser.ELSE, 0); }
    ACTUAL() { return this.tryGetToken(ACDLParser.ACTUAL, 0); }
    EXPECTED() { return this.tryGetToken(ACDLParser.EXPECTED, 0); }
    VOID() { return this.tryGetToken(ACDLParser.VOID, 0); }
    OPTIONAL() { return this.tryGetToken(ACDLParser.OPTIONAL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_keyword; }
    // @Override
    enterRule(listener) {
        if (listener.enterKeyword) {
            listener.enterKeyword(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitKeyword) {
            listener.exitKeyword(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitKeyword) {
            return visitor.visitKeyword(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class IdentifierContext extends ParserRuleContext {
    IDENTIFIER() { return this.tryGetToken(ACDLParser.IDENTIFIER, 0); }
    keyword() {
        return this.tryGetRuleContext(0, KeywordContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_identifier; }
    // @Override
    enterRule(listener) {
        if (listener.enterIdentifier) {
            listener.enterIdentifier(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIdentifier) {
            listener.exitIdentifier(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class QualifiedNameContext extends ParserRuleContext {
    identifier(i) {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }
        else {
            return this.getRuleContext(i, IdentifierContext);
        }
    }
    DOT(i) {
        if (i === undefined) {
            return this.getTokens(ACDLParser.DOT);
        }
        else {
            return this.getToken(ACDLParser.DOT, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_qualifiedName; }
    // @Override
    enterRule(listener) {
        if (listener.enterQualifiedName) {
            listener.enterQualifiedName(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitQualifiedName) {
            listener.exitQualifiedName(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitQualifiedName) {
            return visitor.visitQualifiedName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class NamespaceDeclarationContext extends ParserRuleContext {
    NAMESPACE() { return this.getToken(ACDLParser.NAMESPACE, 0); }
    qualifiedName() {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_namespaceDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterNamespaceDeclaration) {
            listener.enterNamespaceDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNamespaceDeclaration) {
            listener.exitNamespaceDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitNamespaceDeclaration) {
            return visitor.visitNamespaceDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ImportDeclarationContext extends ParserRuleContext {
    IMPORT() { return this.getToken(ACDLParser.IMPORT, 0); }
    qualifiedName() {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    DOT() { return this.tryGetToken(ACDLParser.DOT, 0); }
    ASTERISK() { return this.tryGetToken(ACDLParser.ASTERISK, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_importDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterImportDeclaration) {
            listener.enterImportDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitImportDeclaration) {
            listener.exitImportDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitImportDeclaration) {
            return visitor.visitImportDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class EnumDeclarationContext extends ParserRuleContext {
    ENUM() { return this.getToken(ACDLParser.ENUM, 0); }
    qualifiedName() {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    LBRACE() { return this.getToken(ACDLParser.LBRACE, 0); }
    RBRACE() { return this.getToken(ACDLParser.RBRACE, 0); }
    annotationList() {
        return this.tryGetRuleContext(0, AnnotationListContext);
    }
    enumItem(i) {
        if (i === undefined) {
            return this.getRuleContexts(EnumItemContext);
        }
        else {
            return this.getRuleContext(i, EnumItemContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_enumDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterEnumDeclaration) {
            listener.enterEnumDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitEnumDeclaration) {
            listener.exitEnumDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitEnumDeclaration) {
            return visitor.visitEnumDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class EnumItemContext extends ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    annotationList() {
        return this.tryGetRuleContext(0, AnnotationListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_enumItem; }
    // @Override
    enterRule(listener) {
        if (listener.enterEnumItem) {
            listener.enterEnumItem(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitEnumItem) {
            listener.exitEnumItem(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitEnumItem) {
            return visitor.visitEnumItem(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class TypeReferenceContext extends ParserRuleContext {
    qualifiedName() {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    annotationList() {
        return this.tryGetRuleContext(0, AnnotationListContext);
    }
    typeArguments() {
        return this.tryGetRuleContext(0, TypeArgumentsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_typeReference; }
    // @Override
    enterRule(listener) {
        if (listener.enterTypeReference) {
            listener.enterTypeReference(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTypeReference) {
            listener.exitTypeReference(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTypeReference) {
            return visitor.visitTypeReference(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class TypeArgumentsContext extends ParserRuleContext {
    LT() { return this.getToken(ACDLParser.LT, 0); }
    typeReference(i) {
        if (i === undefined) {
            return this.getRuleContexts(TypeReferenceContext);
        }
        else {
            return this.getRuleContext(i, TypeReferenceContext);
        }
    }
    GT() { return this.getToken(ACDLParser.GT, 0); }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ACDLParser.COMMA);
        }
        else {
            return this.getToken(ACDLParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_typeArguments; }
    // @Override
    enterRule(listener) {
        if (listener.enterTypeArguments) {
            listener.enterTypeArguments(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTypeArguments) {
            listener.exitTypeArguments(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTypeArguments) {
            return visitor.visitTypeArguments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class TypeDeclarationContext extends ParserRuleContext {
    TYPE() { return this.getToken(ACDLParser.TYPE, 0); }
    qualifiedName() {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    annotationList() {
        return this.tryGetRuleContext(0, AnnotationListContext);
    }
    typeArgumentDeclarations() {
        return this.tryGetRuleContext(0, TypeArgumentDeclarationsContext);
    }
    typeConstraint(i) {
        if (i === undefined) {
            return this.getRuleContexts(TypeConstraintContext);
        }
        else {
            return this.getRuleContext(i, TypeConstraintContext);
        }
    }
    typeProperties() {
        return this.tryGetRuleContext(0, TypePropertiesContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_typeDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterTypeDeclaration) {
            listener.enterTypeDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTypeDeclaration) {
            listener.exitTypeDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTypeDeclaration) {
            return visitor.visitTypeDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class TypeArgumentDeclarationsContext extends ParserRuleContext {
    LT() { return this.getToken(ACDLParser.LT, 0); }
    typeArgumentDeclaration(i) {
        if (i === undefined) {
            return this.getRuleContexts(TypeArgumentDeclarationContext);
        }
        else {
            return this.getRuleContext(i, TypeArgumentDeclarationContext);
        }
    }
    GT() { return this.getToken(ACDLParser.GT, 0); }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ACDLParser.COMMA);
        }
        else {
            return this.getToken(ACDLParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_typeArgumentDeclarations; }
    // @Override
    enterRule(listener) {
        if (listener.enterTypeArgumentDeclarations) {
            listener.enterTypeArgumentDeclarations(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTypeArgumentDeclarations) {
            listener.exitTypeArgumentDeclarations(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTypeArgumentDeclarations) {
            return visitor.visitTypeArgumentDeclarations(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class TypeArgumentDeclarationContext extends ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    typeConstraint(i) {
        if (i === undefined) {
            return this.getRuleContexts(TypeConstraintContext);
        }
        else {
            return this.getRuleContext(i, TypeConstraintContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_typeArgumentDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterTypeArgumentDeclaration) {
            listener.enterTypeArgumentDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTypeArgumentDeclaration) {
            listener.exitTypeArgumentDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTypeArgumentDeclaration) {
            return visitor.visitTypeArgumentDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class TypeConstraintContext extends ParserRuleContext {
    COLON() { return this.getToken(ACDLParser.COLON, 0); }
    typeReference() {
        return this.getRuleContext(0, TypeReferenceContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_typeConstraint; }
    // @Override
    enterRule(listener) {
        if (listener.enterTypeConstraint) {
            listener.enterTypeConstraint(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTypeConstraint) {
            listener.exitTypeConstraint(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTypeConstraint) {
            return visitor.visitTypeConstraint(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class TypePropertiesContext extends ParserRuleContext {
    LBRACE() { return this.getToken(ACDLParser.LBRACE, 0); }
    RBRACE() { return this.getToken(ACDLParser.RBRACE, 0); }
    typeProperty(i) {
        if (i === undefined) {
            return this.getRuleContexts(TypePropertyContext);
        }
        else {
            return this.getRuleContext(i, TypePropertyContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_typeProperties; }
    // @Override
    enterRule(listener) {
        if (listener.enterTypeProperties) {
            listener.enterTypeProperties(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTypeProperties) {
            listener.exitTypeProperties(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTypeProperties) {
            return visitor.visitTypeProperties(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class TypePropertyContext extends ParserRuleContext {
    typeReference() {
        return this.getRuleContext(0, TypeReferenceContext);
    }
    annotationList() {
        return this.tryGetRuleContext(0, AnnotationListContext);
    }
    OPTIONAL() { return this.tryGetToken(ACDLParser.OPTIONAL, 0); }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_typeProperty; }
    // @Override
    enterRule(listener) {
        if (listener.enterTypeProperty) {
            listener.enterTypeProperty(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitTypeProperty) {
            listener.exitTypeProperty(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitTypeProperty) {
            return visitor.visitTypeProperty(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArgumentDeclarationsContext extends ParserRuleContext {
    LPAREN() { return this.getToken(ACDLParser.LPAREN, 0); }
    RPAREN() { return this.getToken(ACDLParser.RPAREN, 0); }
    argumentDeclaration(i) {
        if (i === undefined) {
            return this.getRuleContexts(ArgumentDeclarationContext);
        }
        else {
            return this.getRuleContext(i, ArgumentDeclarationContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ACDLParser.COMMA);
        }
        else {
            return this.getToken(ACDLParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_argumentDeclarations; }
    // @Override
    enterRule(listener) {
        if (listener.enterArgumentDeclarations) {
            listener.enterArgumentDeclarations(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArgumentDeclarations) {
            listener.exitArgumentDeclarations(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitArgumentDeclarations) {
            return visitor.visitArgumentDeclarations(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArgumentDeclarationContext extends ParserRuleContext {
    standardArgumentDeclaration() {
        return this.tryGetRuleContext(0, StandardArgumentDeclarationContext);
    }
    functionArgumentDeclaration() {
        return this.tryGetRuleContext(0, FunctionArgumentDeclarationContext);
    }
    annotationList() {
        return this.tryGetRuleContext(0, AnnotationListContext);
    }
    OPTIONAL() { return this.tryGetToken(ACDLParser.OPTIONAL, 0); }
    ASSIGN() { return this.tryGetToken(ACDLParser.ASSIGN, 0); }
    argumentDefault() {
        return this.tryGetRuleContext(0, ArgumentDefaultContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_argumentDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterArgumentDeclaration) {
            listener.enterArgumentDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArgumentDeclaration) {
            listener.exitArgumentDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitArgumentDeclaration) {
            return visitor.visitArgumentDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class StandardArgumentDeclarationContext extends ParserRuleContext {
    typeReference() {
        return this.getRuleContext(0, TypeReferenceContext);
    }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_standardArgumentDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterStandardArgumentDeclaration) {
            listener.enterStandardArgumentDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitStandardArgumentDeclaration) {
            listener.exitStandardArgumentDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitStandardArgumentDeclaration) {
            return visitor.visitStandardArgumentDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class FunctionArgumentDeclarationContext extends ParserRuleContext {
    functionSignature() {
        return this.getRuleContext(0, FunctionSignatureContext);
    }
    DIALOG() { return this.tryGetToken(ACDLParser.DIALOG, 0); }
    ACTION() { return this.tryGetToken(ACDLParser.ACTION, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_functionArgumentDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterFunctionArgumentDeclaration) {
            listener.enterFunctionArgumentDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFunctionArgumentDeclaration) {
            listener.exitFunctionArgumentDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFunctionArgumentDeclaration) {
            return visitor.visitFunctionArgumentDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArgumentDefaultContext extends ParserRuleContext {
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_argumentDefault; }
    // @Override
    enterRule(listener) {
        if (listener.enterArgumentDefault) {
            listener.enterArgumentDefault(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitArgumentDefault) {
            listener.exitArgumentDefault(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitArgumentDefault) {
            return visitor.visitArgumentDefault(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ActionDeclarationContext extends ParserRuleContext {
    ACTION() { return this.getToken(ACDLParser.ACTION, 0); }
    functionSignature() {
        return this.getRuleContext(0, FunctionSignatureContext);
    }
    annotationList() {
        return this.tryGetRuleContext(0, AnnotationListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_actionDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterActionDeclaration) {
            listener.enterActionDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitActionDeclaration) {
            listener.exitActionDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitActionDeclaration) {
            return visitor.visitActionDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class InteractionDeclarationContext extends ParserRuleContext {
    INTERACTION() { return this.getToken(ACDLParser.INTERACTION, 0); }
    block() {
        return this.getRuleContext(0, BlockContext);
    }
    annotationList() {
        return this.tryGetRuleContext(0, AnnotationListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_interactionDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterInteractionDeclaration) {
            listener.enterInteractionDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInteractionDeclaration) {
            listener.exitInteractionDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitInteractionDeclaration) {
            return visitor.visitInteractionDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class DialogDeclarationContext extends ParserRuleContext {
    DIALOG() { return this.getToken(ACDLParser.DIALOG, 0); }
    functionSignature() {
        return this.getRuleContext(0, FunctionSignatureContext);
    }
    dialogScope() {
        return this.getRuleContext(0, DialogScopeContext);
    }
    annotationList() {
        return this.tryGetRuleContext(0, AnnotationListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_dialogDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterDialogDeclaration) {
            listener.enterDialogDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDialogDeclaration) {
            listener.exitDialogDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDialogDeclaration) {
            return visitor.visitDialogDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class DialogScopeContext extends ParserRuleContext {
    LBRACE() { return this.getToken(ACDLParser.LBRACE, 0); }
    RBRACE() { return this.getToken(ACDLParser.RBRACE, 0); }
    sampleDeclaration(i) {
        if (i === undefined) {
            return this.getRuleContexts(SampleDeclarationContext);
        }
        else {
            return this.getRuleContext(i, SampleDeclarationContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_dialogScope; }
    // @Override
    enterRule(listener) {
        if (listener.enterDialogScope) {
            listener.enterDialogScope(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitDialogScope) {
            listener.exitDialogScope(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitDialogScope) {
            return visitor.visitDialogScope(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class FunctionSignatureContext extends ParserRuleContext {
    qualifiedName() {
        return this.tryGetRuleContext(0, QualifiedNameContext);
    }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    void() {
        return this.tryGetRuleContext(0, VoidContext);
    }
    typeReference() {
        return this.tryGetRuleContext(0, TypeReferenceContext);
    }
    typeArgumentDeclarations() {
        return this.tryGetRuleContext(0, TypeArgumentDeclarationsContext);
    }
    argumentDeclarations() {
        return this.tryGetRuleContext(0, ArgumentDeclarationsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_functionSignature; }
    // @Override
    enterRule(listener) {
        if (listener.enterFunctionSignature) {
            listener.enterFunctionSignature(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitFunctionSignature) {
            listener.exitFunctionSignature(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitFunctionSignature) {
            return visitor.visitFunctionSignature(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class SampleDeclarationContext extends ParserRuleContext {
    SAMPLE() { return this.getToken(ACDLParser.SAMPLE, 0); }
    block() {
        return this.getRuleContext(0, BlockContext);
    }
    annotationList() {
        return this.tryGetRuleContext(0, AnnotationListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_sampleDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterSampleDeclaration) {
            listener.enterSampleDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSampleDeclaration) {
            listener.exitSampleDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSampleDeclaration) {
            return visitor.visitSampleDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class BlockContext extends ParserRuleContext {
    LBRACE() { return this.getToken(ACDLParser.LBRACE, 0); }
    RBRACE() { return this.getToken(ACDLParser.RBRACE, 0); }
    blockExpression(i) {
        if (i === undefined) {
            return this.getRuleContexts(BlockExpressionContext);
        }
        else {
            return this.getRuleContext(i, BlockExpressionContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_block; }
    // @Override
    enterRule(listener) {
        if (listener.enterBlock) {
            listener.enterBlock(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBlock) {
            listener.exitBlock(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitBlock) {
            return visitor.visitBlock(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class BlockExpressionContext extends ParserRuleContext {
    nameDeclaration() {
        return this.tryGetRuleContext(0, NameDeclarationContext);
    }
    expression() {
        return this.tryGetRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_blockExpression; }
    // @Override
    enterRule(listener) {
        if (listener.enterBlockExpression) {
            listener.enterBlockExpression(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBlockExpression) {
            listener.exitBlockExpression(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitBlockExpression) {
            return visitor.visitBlockExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class QualifiedNameDeclarationContext extends ParserRuleContext {
    qualifiedName() {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    ASSIGN() { return this.getToken(ACDLParser.ASSIGN, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    annotationList() {
        return this.tryGetRuleContext(0, AnnotationListContext);
    }
    typeReference() {
        return this.tryGetRuleContext(0, TypeReferenceContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_qualifiedNameDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterQualifiedNameDeclaration) {
            listener.enterQualifiedNameDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitQualifiedNameDeclaration) {
            listener.exitQualifiedNameDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitQualifiedNameDeclaration) {
            return visitor.visitQualifiedNameDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class NameDeclarationContext extends ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    ASSIGN() { return this.getToken(ACDLParser.ASSIGN, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    typeReference() {
        return this.tryGetRuleContext(0, TypeReferenceContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_nameDeclaration; }
    // @Override
    enterRule(listener) {
        if (listener.enterNameDeclaration) {
            listener.enterNameDeclaration(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNameDeclaration) {
            listener.exitNameDeclaration(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitNameDeclaration) {
            return visitor.visitNameDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExpressionContext extends ParserRuleContext {
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_expression; }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
export class ConditionExprContext extends ExpressionContext {
    condition() {
        return this.getRuleContext(0, ConditionContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterConditionExpr) {
            listener.enterConditionExpr(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitConditionExpr) {
            listener.exitConditionExpr(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitConditionExpr) {
            return visitor.visitConditionExpr(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class CorrectionExprContext extends ExpressionContext {
    correction() {
        return this.getRuleContext(0, CorrectionContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterCorrectionExpr) {
            listener.enterCorrectionExpr(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCorrectionExpr) {
            listener.exitCorrectionExpr(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCorrectionExpr) {
            return visitor.visitCorrectionExpr(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class CallExprContext extends ExpressionContext {
    call() {
        return this.getRuleContext(0, CallContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterCallExpr) {
            listener.enterCallExpr(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCallExpr) {
            listener.exitCallExpr(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCallExpr) {
            return visitor.visitCallExpr(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class LiteralExprContext extends ExpressionContext {
    list() {
        return this.tryGetRuleContext(0, ListContext);
    }
    object() {
        return this.tryGetRuleContext(0, ObjectContext);
    }
    null() {
        return this.tryGetRuleContext(0, NullContext);
    }
    nothing() {
        return this.tryGetRuleContext(0, NothingContext);
    }
    number() {
        return this.tryGetRuleContext(0, NumberContext);
    }
    string() {
        return this.tryGetRuleContext(0, StringContext);
    }
    bool() {
        return this.tryGetRuleContext(0, BoolContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterLiteralExpr) {
            listener.enterLiteralExpr(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLiteralExpr) {
            listener.exitLiteralExpr(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLiteralExpr) {
            return visitor.visitLiteralExpr(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class IsExprContext extends ExpressionContext {
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    IS() { return this.getToken(ACDLParser.IS, 0); }
    typeReference() {
        return this.getRuleContext(0, TypeReferenceContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterIsExpr) {
            listener.enterIsExpr(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIsExpr) {
            listener.exitIsExpr(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIsExpr) {
            return visitor.visitIsExpr(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ListIndexContext extends ExpressionContext {
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    LBRACK() { return this.getToken(ACDLParser.LBRACK, 0); }
    number() {
        return this.getRuleContext(0, NumberContext);
    }
    RBRACK() { return this.getToken(ACDLParser.RBRACK, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterListIndex) {
            listener.enterListIndex(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitListIndex) {
            listener.exitListIndex(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitListIndex) {
            return visitor.visitListIndex(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class PropertyReferenceContext extends ExpressionContext {
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    DOT() { return this.getToken(ACDLParser.DOT, 0); }
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterPropertyReference) {
            listener.enterPropertyReference(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitPropertyReference) {
            listener.exitPropertyReference(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitPropertyReference) {
            return visitor.visitPropertyReference(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class InExprContext extends ExpressionContext {
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    IN() { return this.getToken(ACDLParser.IN, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterInExpr) {
            listener.enterInExpr(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitInExpr) {
            listener.exitInExpr(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitInExpr) {
            return visitor.visitInExpr(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class BinaryExprContext extends ExpressionContext {
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        Object.defineProperty(this, "_left", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_right", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.copyFrom(ctx);
    }
    NOT() { return this.tryGetToken(ACDLParser.NOT, 0); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    relational() {
        return this.tryGetRuleContext(0, RelationalContext);
    }
    equality() {
        return this.tryGetRuleContext(0, EqualityContext);
    }
    AND() { return this.tryGetToken(ACDLParser.AND, 0); }
    OR() { return this.tryGetToken(ACDLParser.OR, 0); }
    // @Override
    enterRule(listener) {
        if (listener.enterBinaryExpr) {
            listener.enterBinaryExpr(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBinaryExpr) {
            listener.exitBinaryExpr(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitBinaryExpr) {
            return visitor.visitBinaryExpr(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class IdentifierExprContext extends ExpressionContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterIdentifierExpr) {
            listener.enterIdentifierExpr(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitIdentifierExpr) {
            listener.exitIdentifierExpr(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitIdentifierExpr) {
            return visitor.visitIdentifierExpr(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ParenthesizedExprContext extends ExpressionContext {
    LPAREN() { return this.getToken(ACDLParser.LPAREN, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    RPAREN() { return this.getToken(ACDLParser.RPAREN, 0); }
    constructor(ctx) {
        super(ctx.parent, ctx.invokingState);
        this.copyFrom(ctx);
    }
    // @Override
    enterRule(listener) {
        if (listener.enterParenthesizedExpr) {
            listener.enterParenthesizedExpr(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitParenthesizedExpr) {
            listener.exitParenthesizedExpr(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitParenthesizedExpr) {
            return visitor.visitParenthesizedExpr(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class LiteralContext extends ParserRuleContext {
    null() {
        return this.tryGetRuleContext(0, NullContext);
    }
    nothing() {
        return this.tryGetRuleContext(0, NothingContext);
    }
    number() {
        return this.tryGetRuleContext(0, NumberContext);
    }
    string() {
        return this.tryGetRuleContext(0, StringContext);
    }
    bool() {
        return this.tryGetRuleContext(0, BoolContext);
    }
    list() {
        return this.tryGetRuleContext(0, ListContext);
    }
    object() {
        return this.tryGetRuleContext(0, ObjectContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_literal; }
    // @Override
    enterRule(listener) {
        if (listener.enterLiteral) {
            listener.enterLiteral(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitLiteral) {
            listener.exitLiteral(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitLiteral) {
            return visitor.visitLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class NullContext extends ParserRuleContext {
    NULL() { return this.getToken(ACDLParser.NULL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_null; }
    // @Override
    enterRule(listener) {
        if (listener.enterNull) {
            listener.enterNull(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNull) {
            listener.exitNull(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitNull) {
            return visitor.visitNull(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class NothingContext extends ParserRuleContext {
    NOTHING() { return this.getToken(ACDLParser.NOTHING, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_nothing; }
    // @Override
    enterRule(listener) {
        if (listener.enterNothing) {
            listener.enterNothing(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNothing) {
            listener.exitNothing(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitNothing) {
            return visitor.visitNothing(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class VoidContext extends ParserRuleContext {
    VOID() { return this.getToken(ACDLParser.VOID, 0); }
    annotationList() {
        return this.tryGetRuleContext(0, AnnotationListContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_void; }
    // @Override
    enterRule(listener) {
        if (listener.enterVoid) {
            listener.enterVoid(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVoid) {
            listener.exitVoid(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitVoid) {
            return visitor.visitVoid(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class NumberContext extends ParserRuleContext {
    NUMBER() { return this.getToken(ACDLParser.NUMBER, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_number; }
    // @Override
    enterRule(listener) {
        if (listener.enterNumber) {
            listener.enterNumber(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitNumber) {
            listener.exitNumber(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitNumber) {
            return visitor.visitNumber(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class StringContext extends ParserRuleContext {
    STRING_START() { return this.getToken(ACDLParser.STRING_START, 0); }
    STRING_STOP() { return this.getToken(ACDLParser.STRING_STOP, 0); }
    string_content(i) {
        if (i === undefined) {
            return this.getRuleContexts(String_contentContext);
        }
        else {
            return this.getRuleContext(i, String_contentContext);
        }
    }
    var(i) {
        if (i === undefined) {
            return this.getRuleContexts(VarContext);
        }
        else {
            return this.getRuleContext(i, VarContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_string; }
    // @Override
    enterRule(listener) {
        if (listener.enterString) {
            listener.enterString(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitString) {
            listener.exitString(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitString) {
            return visitor.visitString(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class String_contentContext extends ParserRuleContext {
    STRING_CONTENT() { return this.getToken(ACDLParser.STRING_CONTENT, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_string_content; }
    // @Override
    enterRule(listener) {
        if (listener.enterString_content) {
            listener.enterString_content(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitString_content) {
            listener.exitString_content(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitString_content) {
            return visitor.visitString_content(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class Slot_valueContext extends ParserRuleContext {
    SLOT_VALUE_CONTENT() { return this.getToken(ACDLParser.SLOT_VALUE_CONTENT, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_slot_value; }
    // @Override
    enterRule(listener) {
        if (listener.enterSlot_value) {
            listener.enterSlot_value(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitSlot_value) {
            listener.exitSlot_value(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitSlot_value) {
            return visitor.visitSlot_value(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class VarContext extends ParserRuleContext {
    INTERPOLATION_START() { return this.getToken(ACDLParser.INTERPOLATION_START, 0); }
    qualifiedName() {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    INTERPOLATION_END() { return this.getToken(ACDLParser.INTERPOLATION_END, 0); }
    PIPE() { return this.tryGetToken(ACDLParser.PIPE, 0); }
    slot_value() {
        return this.tryGetRuleContext(0, Slot_valueContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_var; }
    // @Override
    enterRule(listener) {
        if (listener.enterVar) {
            listener.enterVar(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitVar) {
            listener.exitVar(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitVar) {
            return visitor.visitVar(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class BoolContext extends ParserRuleContext {
    BOOL() { return this.getToken(ACDLParser.BOOL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_bool; }
    // @Override
    enterRule(listener) {
        if (listener.enterBool) {
            listener.enterBool(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitBool) {
            listener.exitBool(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitBool) {
            return visitor.visitBool(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class AnnotationContext extends ParserRuleContext {
    AT() { return this.getToken(ACDLParser.AT, 0); }
    call() {
        return this.getRuleContext(0, CallContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_annotation; }
    // @Override
    enterRule(listener) {
        if (listener.enterAnnotation) {
            listener.enterAnnotation(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAnnotation) {
            listener.exitAnnotation(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitAnnotation) {
            return visitor.visitAnnotation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class AnnotationListContext extends ParserRuleContext {
    annotation(i) {
        if (i === undefined) {
            return this.getRuleContexts(AnnotationContext);
        }
        else {
            return this.getRuleContext(i, AnnotationContext);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_annotationList; }
    // @Override
    enterRule(listener) {
        if (listener.enterAnnotationList) {
            listener.enterAnnotationList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitAnnotationList) {
            listener.exitAnnotationList(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitAnnotationList) {
            return visitor.visitAnnotationList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class CallContext extends ParserRuleContext {
    qualifiedName() {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    LPAREN() { return this.getToken(ACDLParser.LPAREN, 0); }
    RPAREN() { return this.getToken(ACDLParser.RPAREN, 0); }
    typeArguments() {
        return this.tryGetRuleContext(0, TypeArgumentsContext);
    }
    callArguments() {
        return this.tryGetRuleContext(0, CallArgumentsContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_call; }
    // @Override
    enterRule(listener) {
        if (listener.enterCall) {
            listener.enterCall(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCall) {
            listener.exitCall(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCall) {
            return visitor.visitCall(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class CallArgumentsContext extends ParserRuleContext {
    callArgument(i) {
        if (i === undefined) {
            return this.getRuleContexts(CallArgumentContext);
        }
        else {
            return this.getRuleContext(i, CallArgumentContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ACDLParser.COMMA);
        }
        else {
            return this.getToken(ACDLParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_callArguments; }
    // @Override
    enterRule(listener) {
        if (listener.enterCallArguments) {
            listener.enterCallArguments(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCallArguments) {
            listener.exitCallArguments(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCallArguments) {
            return visitor.visitCallArguments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class CallArgumentContext extends ParserRuleContext {
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    identifier() {
        return this.tryGetRuleContext(0, IdentifierContext);
    }
    ASSIGN() { return this.tryGetToken(ACDLParser.ASSIGN, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_callArgument; }
    // @Override
    enterRule(listener) {
        if (listener.enterCallArgument) {
            listener.enterCallArgument(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCallArgument) {
            listener.exitCallArgument(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCallArgument) {
            return visitor.visitCallArgument(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ObjectContext extends ParserRuleContext {
    LBRACE() { return this.getToken(ACDLParser.LBRACE, 0); }
    RBRACE() { return this.getToken(ACDLParser.RBRACE, 0); }
    typeReference() {
        return this.tryGetRuleContext(0, TypeReferenceContext);
    }
    objectKeyValue(i) {
        if (i === undefined) {
            return this.getRuleContexts(ObjectKeyValueContext);
        }
        else {
            return this.getRuleContext(i, ObjectKeyValueContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ACDLParser.COMMA);
        }
        else {
            return this.getToken(ACDLParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_object; }
    // @Override
    enterRule(listener) {
        if (listener.enterObject) {
            listener.enterObject(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitObject) {
            listener.exitObject(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitObject) {
            return visitor.visitObject(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ObjectKeyValueContext extends ParserRuleContext {
    identifier() {
        return this.getRuleContext(0, IdentifierContext);
    }
    ASSIGN() { return this.tryGetToken(ACDLParser.ASSIGN, 0); }
    expression() {
        return this.tryGetRuleContext(0, ExpressionContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_objectKeyValue; }
    // @Override
    enterRule(listener) {
        if (listener.enterObjectKeyValue) {
            listener.enterObjectKeyValue(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitObjectKeyValue) {
            listener.exitObjectKeyValue(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitObjectKeyValue) {
            return visitor.visitObjectKeyValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ListContext extends ParserRuleContext {
    LBRACK() { return this.getToken(ACDLParser.LBRACK, 0); }
    RBRACK() { return this.getToken(ACDLParser.RBRACK, 0); }
    expression(i) {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }
        else {
            return this.getRuleContext(i, ExpressionContext);
        }
    }
    COMMA(i) {
        if (i === undefined) {
            return this.getTokens(ACDLParser.COMMA);
        }
        else {
            return this.getToken(ACDLParser.COMMA, i);
        }
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_list; }
    // @Override
    enterRule(listener) {
        if (listener.enterList) {
            listener.enterList(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitList) {
            listener.exitList(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitList) {
            return visitor.visitList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class ConditionContext extends ParserRuleContext {
    IF() { return this.getToken(ACDLParser.IF, 0); }
    LPAREN() { return this.getToken(ACDLParser.LPAREN, 0); }
    expression() {
        return this.getRuleContext(0, ExpressionContext);
    }
    RPAREN() { return this.getToken(ACDLParser.RPAREN, 0); }
    block() {
        return this.getRuleContext(0, BlockContext);
    }
    otherwise() {
        return this.tryGetRuleContext(0, OtherwiseContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_condition; }
    // @Override
    enterRule(listener) {
        if (listener.enterCondition) {
            listener.enterCondition(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCondition) {
            listener.exitCondition(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCondition) {
            return visitor.visitCondition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class OtherwiseContext extends ParserRuleContext {
    ELSE() { return this.tryGetToken(ACDLParser.ELSE, 0); }
    condition() {
        return this.tryGetRuleContext(0, ConditionContext);
    }
    block() {
        return this.tryGetRuleContext(0, BlockContext);
    }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_otherwise; }
    // @Override
    enterRule(listener) {
        if (listener.enterOtherwise) {
            listener.enterOtherwise(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitOtherwise) {
            listener.exitOtherwise(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitOtherwise) {
            return visitor.visitOtherwise(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class CorrectionContext extends ParserRuleContext {
    ACTUAL() { return this.getToken(ACDLParser.ACTUAL, 0); }
    block(i) {
        if (i === undefined) {
            return this.getRuleContexts(BlockContext);
        }
        else {
            return this.getRuleContext(i, BlockContext);
        }
    }
    EXPECTED() { return this.getToken(ACDLParser.EXPECTED, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_correction; }
    // @Override
    enterRule(listener) {
        if (listener.enterCorrection) {
            listener.enterCorrection(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitCorrection) {
            listener.exitCorrection(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitCorrection) {
            return visitor.visitCorrection(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class RelationalContext extends ParserRuleContext {
    GT() { return this.tryGetToken(ACDLParser.GT, 0); }
    GE() { return this.tryGetToken(ACDLParser.GE, 0); }
    LT() { return this.tryGetToken(ACDLParser.LT, 0); }
    LE() { return this.tryGetToken(ACDLParser.LE, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_relational; }
    // @Override
    enterRule(listener) {
        if (listener.enterRelational) {
            listener.enterRelational(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitRelational) {
            listener.exitRelational(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitRelational) {
            return visitor.visitRelational(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
export class EqualityContext extends ParserRuleContext {
    EQUAL() { return this.tryGetToken(ACDLParser.EQUAL, 0); }
    NOTEQUAL() { return this.tryGetToken(ACDLParser.NOTEQUAL, 0); }
    constructor(parent, invokingState) {
        super(parent, invokingState);
    }
    // @Override
    get ruleIndex() { return ACDLParser.RULE_equality; }
    // @Override
    enterRule(listener) {
        if (listener.enterEquality) {
            listener.enterEquality(this);
        }
    }
    // @Override
    exitRule(listener) {
        if (listener.exitEquality) {
            listener.exitEquality(this);
        }
    }
    // @Override
    accept(visitor) {
        if (visitor.visitEquality) {
            return visitor.visitEquality(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,