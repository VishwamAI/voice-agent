import path from "path";
import { ValidationErrorFactory, getExpressionIfLocField } from "./error-factory";
export function logProjectErrors(errors) {
    errors.forEach(logProjectError);
}
export function logProjectWarnings(errors) {
    if (errors !== undefined) {
        errors.filter((error) => error.code.category === "Warning" /* ErrorCategory.Warning */).forEach(logProjectError);
    }
}
export function logProjectError(error) {
    console.error(stringifyProjectError(error));
}
export function stringifyProjectError(error) {
    const errorStringArray = [];
    if (error.code.category === "Warning" /* ErrorCategory.Warning */) {
        errorStringArray.push(error.code.category);
    }
    if (error.loc && error.uri) {
        errorStringArray.push(stringifyLocation(error.uri, error.loc));
        // return `${error.code.category}: ${stringifyLocation(error.uri, error.loc)}: ${error.message}`;
    }
    errorStringArray.push(error.message);
    return errorStringArray.join(": ");
}
export function stringifyLocation(errorUri, loc) {
    // print the error relative to the current working directory so that links in the terminal link directly to the file
    const uri = path.isAbsolute(errorUri) ? path.relative(process.cwd(), errorUri) : errorUri;
    if (loc) {
        return `${uri}(${loc.begin.line},${loc.begin.character})`;
    }
    return uri;
}
export function filterDuplicateErrors(errors) {
    const seen = new Set();
    const e = errors.filter((err) => {
        if (err === undefined) {
            return false;
        }
        const str = `${err.message}${JSON.stringify(err.loc)}`;
        if (seen.has(str)) {
            return false;
        }
        seen.add(str);
        return true;
    });
    return e;
}
/**
 * Sort error array based on uri and loc
 * error without uri directly compare the loc
 * error with uri first compare uri then compare the loc
 * when loc are identical, compare the error message
 * @param errors
 * @returns
 */
export function sortErrors(errors) {
    return errors.sort((a, b) => {
        if (a.uri === undefined && b.uri === undefined) {
            const result = compareLoc(a.loc, b.loc);
            return result === 0 ? compareMessage(a.message, b.message) : result;
        }
        if (a.uri === undefined) {
            return -1;
        }
        if (b.uri === undefined) {
            return 1;
        }
        if (a.uri > b.uri) {
            return 1;
        }
        if (a.uri < b.uri) {
            return -1;
        }
        const result = compareLoc(a.loc, b.loc);
        return result === 0 ? compareMessage(a.message, b.message) : result;
    });
    /**
     * compare two location
     * error without loc is placed before other errors
     * when loc is exist, compare the start and then end
     * @param firstLoc
     * @param secondLoc
     * @returns
     */
    function compareLoc(firstLoc, secondLoc) {
        if (firstLoc === undefined && secondLoc === undefined) {
            return -1;
        }
        if (firstLoc === undefined) {
            return -1;
        }
        if (secondLoc === undefined) {
            return 1;
        }
        return firstLoc.begin.line !== secondLoc.begin.line
            ? firstLoc.begin.line - secondLoc.begin.line
            : firstLoc.begin.character !== secondLoc.begin.character
                ? firstLoc.begin.character - secondLoc.begin.character
                : firstLoc.end.line !== secondLoc.end.line
                    ? firstLoc.end.line - secondLoc.end.line
                    : firstLoc.end.character - secondLoc.end.character;
    }
    function compareMessage(firstMessage, secondMessage) {
        if (firstMessage <= secondMessage) {
            return -1;
        }
        return 1;
    }
}
export function typeError(actual, expected, scope, errorExpr) {
    return ValidationErrorFactory.TypeError({
        expr: getExpressionIfLocField(errorExpr, scope),
        attributes: {
            actualType: actual.toString(scope),
            expectedType: typeof expected === "string" ? expected : expected.toString(scope),
        },
    });
}
export function nameNotFound(name) {
    return ValidationErrorFactory.NameNotFound({
        expr: name,
        attributes: {
            name: typeof name === "string" ? name : name.name,
        },
    });
}
export function hasTerminalErrors(errors) {
    return errors.some((error) => isTerminalError(error));
}
function isTerminalError(error) {
    return error.code.category !== "Warning" /* ErrorCategory.Warning */;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBRXhCLE9BQU8sRUFBUSxzQkFBc0IsRUFBRSx1QkFBdUIsRUFBZ0MsTUFBTSxpQkFBaUIsQ0FBQztBQWV0SCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsTUFBc0I7SUFDckQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUNsQyxDQUFDO0FBRUQsTUFBTSxVQUFVLGtCQUFrQixDQUFDLE1BQXVCO0lBQ3hELElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtRQUN4QixNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsMENBQTBCLENBQUMsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7S0FDbEc7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxLQUFtQjtJQUNqRCxPQUFPLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQUVELE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxLQUFtQjtJQUN2RCxNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztJQUM1QixJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSwwQ0FBMEIsRUFBRTtRQUNqRCxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUM1QztJQUNELElBQUksS0FBSyxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsR0FBRyxFQUFFO1FBQzFCLGdCQUFnQixDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FB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