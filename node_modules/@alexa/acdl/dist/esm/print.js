import * as ask from "./ast";
import { AlexaSchema } from "./ast";
import { getName, getNamespace } from "./util";
const doubleSpace = "  ";
export function printModule(mod, checker) {
    var _a, _b, _c;
    if (mod.expressions === undefined || mod.expressions.length === 0) {
        return "";
    }
    const importedShortNames = new Set();
    const importedQualifiedNames = new Set();
    let namespace = mod.namespace ? mod.namespace.name : "default";
    if (mod.namespace === undefined) {
        const namespaces = {};
        for (const expr of mod.expressions) {
            if (expr.kind !== "Call" && expr.kind !== "InteractionDeclaration") {
                if (((_a = expr.name) === null || _a === void 0 ? void 0 : _a.name) !== undefined) {
                    const shortName = getName(expr.name.name);
                    // by default, treat expressions in this module as imported so that we don't conflict with them by importing names from dependencies
                    importedShortNames.add(shortName);
                    importedQualifiedNames.add(expr.name.name);
                    const ns = getNamespace(expr.name.name);
                    if (!namespaces[ns]) {
                        namespaces[ns] = 1;
                    }
                    else {
                        namespaces[ns] += 1;
                    }
                }
            }
        }
        namespace =
            Object.entries(namespaces).length === 0 ? "default" : Object.entries(namespaces).reduce((a, b) => (a[1] >= b[1] ? a : b))[0];
    }
    const imports = (_c = (_b = mod.imports) === null || _b === void 0 ? void 0 : _b.map((_import) => (_import.kind === "ImportNamespace" ? `${_import.name}.*` : _import.name))) !== null && _c !== void 0 ? _c : [];
    const lines = [];
    const moduleContext = {
        importedShortNames,
        importedQualifiedNames,
        checker,
        namespace,
        imports,
    };
    for (const expr of mod.expressions) {
        lines.push(printNode(expr, 0, moduleContext, false));
    }
    return `namespace ${namespace}${imports.length > 0 ? "\n\n" : ""}${[...new Set(imports)]
        .sort()
        .map((i) => `import ${i}`)
        .join("\n")}\n\n${`${lines.join("\n\n")}\n`}`;
}
export function printNode(expr, depth, moduleContext, inferFqn) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
    const oneIndent = doubleSpace.repeat(depth);
    const twoIndent = doubleSpace.repeat(depth + 1);
    if (expr === undefined) {
        return "";
    }
    if (expr.kind === "ActionDeclaration") {
        return `${printAnnotations(expr.annotations)}action ${printActionReturnType(expr.returnType)} ${printTopLevelQualifiedName(expr.name)}${printTypeParameterDeclarations(expr.genericArguments)}(${printArgumentDeclarations(expr.arguments)})`;
    }
    if (expr.kind === "Annotation") {
        return `@${printNode(expr.call, depth, moduleContext, inferFqn)}`;
    }
    if (expr.kind === "Argument") {
        if (((_a = expr.value) === null || _a === void 0 ? void 0 : _a.kind) === "Call") {
            const apply = moduleContext.checker.getApply(expr.value);
            if ((apply === null || apply === void 0 ? void 0 : apply.isVarArgs()) && ask.isListLiteral(expr.value.arguments)) {
                return `${expr.value.arguments.items.map((item) => printNode(item, depth + 1, moduleContext, inferFqn)).join(`,\n${oneIndent}`)}`;
            }
        }
        if (expr.context.kind === "Call") {
            const apply = moduleContext.checker.getApply(expr.context);
            if (apply === null || apply === void 0 ? void 0 : apply.isAction()) {
                return `${printNode(expr.value, depth, moduleContext, inferFqn)}`;
            }
        }
        return `${((_b = expr.name) === null || _b === void 0 ? void 0 : _b.name) ? `${expr.name.name} = ` : ""}${printNode(expr.value, depth, moduleContext, inferFqn)}`;
    }
    if (expr.kind === "ArgumentDeclaration") {
        return `${printAnnotations(expr.annotations)}${printNode(expr.type, depth, moduleContext, inferFqn)} ${(_c = expr.name) === null || _c === void 0 ? void 0 : _c.name}${expr.defaultExpression ? ` = ${printNode(expr.defaultExpression, depth, moduleContext, inferFqn)}` : ""}`;
    }
    if (expr.kind === "Block") {
        return `{\n${twoIndent}${(_d = expr.expressions) === null || _d === void 0 ? void 0 : _d.map((node) => printNode(node, depth + 1, moduleContext, inferFqn)).join(`\n${twoIndent}`)}\n${oneIndent}}`;
    }
    if (expr.kind === "Call") {
        const apply = moduleContext.checker.getApply(expr);
        const isType = apply === null || apply === void 0 ? void 0 : apply.isType();
        if (typeof expr.arguments === "string" || typeof expr.arguments === "number" || typeof expr.arguments === "boolean") {
            const value = typeof expr.arguments === "string"
                ? `"${expr.arguments}"`
                : typeof expr.arguments === "number"
                    ? expr.arguments.toString(10)
                    : typeof expr.arguments === "boolean"
                        ? `${expr.arguments}`
                        : "";
            return value;
        }
        if (expr.arguments === null) {
            return "nothing";
        }
        if (ask.isListLiteral(expr.arguments) || ask.isUtterance(expr.arguments)) {
            return printNode(expr.arguments, depth, moduleContext, inferFqn);
        }
        if (apply === null || apply === void 0 ? void 0 : apply.isOperator()) {
            if (apply.isNot()) {
                return `!${printNode(apply.getArgumentValue("right"), depth, moduleContext, inferFqn)}`;
            }
            const op = apply.isEq()
                ? "=="
                : apply.isNeq()
                    ? "!="
                    : apply.isAnd()
                        ? "&&"
                        : apply.isOr()
                            ? "||"
                            : apply.isGt()
                                ? ">"
                                : apply.isGte()
                                    ? ">="
                                    : apply.isLt()
                                        ? "<"
                                        : apply.isLte()
                                            ? "<="
                                            : undefined;
            // always include () for && and || until we have logic to maintain precedence rules.
            const [open, close] = apply.isAnd() || apply.isOr() ? ["(", ")"] : ["", ""];
            return `${open}${printNode(apply.getArgumentValue("left"), depth, moduleContext, inferFqn)} ${op} ${printNode(apply.getArgumentValue("right"), depth, moduleContext, inferFqn)}${close}`;
        }
        const open = isType ? " {" : "(";
        const close = isType ? "}" : ")";
        // emit generic arguments for `is` operator and for literal types.
        const shouldHaveGenericArgs = (_g = ((apply === null || apply === void 0 ? void 0 : apply.isIs()) ||
            (apply === null || apply === void 0 ? void 0 : apply.isType()) ||
            (apply === null || apply === void 0 ? void 0 : apply.isUserDefinedApi()) ||
            (apply === null || apply === void 0 ? void 0 : apply.isReceived()) ||
            ((apply === null || apply === void 0 ? void 0 : apply.isUtterances()) && ((_f = (_e = apply.getGenericArguments()) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.isThing()) !== true))) !== null && _g !== void 0 ? _g : true;
        const callName = `${printQualifiedName((_h = expr.name) === null || _h === void 0 ? void 0 : _h.name)}${shouldHaveGenericArgs ? printTypeParameters(expr.genericArguments) : ""}${open}`;
        if (expr.arguments === undefined || expr.arguments.length === 0) {
            return `${printAnnotations(expr.annotations)}${callName}${close}`;
        }
        if ((apply === null || apply === void 0 ? void 0 : apply.decl.kind) === "ActionDeclaration") {
            const argumentDecls = (apply === null || apply === void 0 ? void 0 : apply.decl.kind) === "ActionDeclaration" ? apply === null || apply === void 0 ? void 0 : apply.decl.arguments : [];
            return `${printAnnotations(expr.annotations)}${callName}\n${twoIndent}${(_j = argumentDecls === null || argumentDecls === void 0 ? void 0 : argumentDecls.map((argDecl) => {
                const matchedArg = apply.getArgument(argDecl.name);
                if (matchedArg === undefined) {
                    return "nothing";
                }
                return printNode(matchedArg, depth + 1, moduleContext, inferFqn);
            }).join(`,\n${twoIndent}`)) !== null && _j !== void 0 ? _j : ""}\n${oneIndent}${close}`;
        }
        return `${printAnnotations(expr.annotations)}${callName}\n${twoIndent}${(_l = (_k = expr.arguments) === null || _k === void 0 ? void 0 : _k.map((arg) => {
            var _a;
            if (isType && ((_a = arg.name) === null || _a === void 0 ? void 0 : _a.name) === undefined) {
                throw new Error(`expected property in object literal to have a name`);
            }
            return printNode(arg, depth + 1, moduleContext, inferFqn);
        }).join(`,\n${twoIndent}`)) !== null && _l !== void 0 ? _l : ""}\n${oneIndent}${close}`;
    }
    if (expr.kind === "Correction") {
        return `actual ${printNode(expr.actual, depth, moduleContext, inferFqn)} expected ${printNode(expr.expected, depth, moduleContext, inferFqn)}`;
    }
    if (expr.kind === "ListLiteral") {
        return `[\n${twoIndent}${expr.items
            .map((item) => printNode(item, depth + 1, moduleContext, inferFqn))
            .join(`,\n${twoIndent}`)}\n${oneIndent}]`;
    }
    if (expr.kind === "ListItem") {
        return printNode(expr.item, depth, moduleContext, inferFqn);
    }
    if (expr.kind === "Utterance") {
        return `"${expr.text}"`;
    }
    if (expr.kind === "Condition") {
        return `${printAnnotations(expr.annotations)}if (${printNode(expr.when, depth, moduleContext, inferFqn)}) ${printNode(expr.then, depth, moduleContext, inferFqn)}${expr.else && expr.else.expressions && expr.else.expressions.length > 0
            ? ` else ${printNode(expr.else, depth, moduleContext, inferFqn)}`
            : ""}`;
    }
    if (expr.kind === "DialogDeclaration") {
        return `${printAnnotations(expr.annotations)}dialog${printDialogReturnType(expr.returnType)} ${printTopLevelQualifiedName(expr.name)}${printTypeParameterDeclarations(expr.genericArguments)}(${printArgumentDeclarations(expr.arguments)}) {\n${(_o = (_m = expr.samples) === null || _m === void 0 ? void 0 : _m.map((sample) => printNode(sample, depth + 1, moduleContext, inferFqn)).join(`\n`)) !== null && _o !== void 0 ? _o : ""}\n${oneIndent}}`;
    }
    if (expr.kind === "Sample") {
        return `${printAnnotations(expr.annotations)}${oneIndent}sample ${printNode(expr.scope, depth, moduleContext, inferFqn)}`;
    }
    if (expr.kind === "ImportName") {
    }
    else if (expr.kind === "ImportNamespace") {
    }
    else if (expr.kind === "InteractionDeclaration") {
        return `${printAnnotations(expr.annotations)}interaction ${printNode(expr.scope, depth, moduleContext, inferFqn)}`;
    }
    else if (expr.kind === "Module") {
        return printModule(expr, moduleContext.checker);
    }
    else if (expr.kind === "Name") {
        return expr.name;
    }
    else if (expr.kind === "NameDeclaration") {
        return `${printAnnotations(expr.annotations)}${printTopLevelQualifiedName(expr.name)} = ${printNode(expr.expression, depth, moduleContext, inferFqn)}`;
    }
    else if (expr.kind === "NameReference") {
        return `${printAnnotations(expr.annotations)}${printQualifiedName((_p = expr.name) === null || _p === void 0 ? void 0 : _p.name)}`;
    }
    else if (expr.kind === "ResponseTemplate") {
    }
    else if (expr.kind === "PropertyReference") {
        return `${printAnnotations(expr.annotations)}${printNode(expr.expression, depth, moduleContext, inferFqn)}.${printNode(expr.name, depth, moduleContext, inferFqn)}`;
    }
    else if (expr.kind === "SlotType") {
    }
    else if (expr.kind === "TypeDeclaration") {
        return `${printAnnotations(expr.annotations)}type ${printTopLevelQualifiedName(expr.name)}${printTypeParameterDeclarations(expr.genericArguments)}${expr.extensions ? ` : ${expr.extensions.map((e) => printNode(e, depth, moduleContext, inferFqn)).join(" : ")}` : ""}${expr.properties === undefined || expr.properties.length === 0
            ? ""
            : ` {\n${(_r = (_q = expr.properties) === null || _q === void 0 ? void 0 : _q.map((prop) => printNode(prop, depth + 1, moduleContext, inferFqn)).join("\n")) !== null && _r !== void 0 ? _r : ""}\n}`}`;
    }
    else if (expr.kind === "TypeParameter") {
        return `${printNode(expr.name, depth, moduleContext, inferFqn)}${expr.constraints ? ` : ${expr.constraints.map((c) => printNode(c, depth, moduleContext, inferFqn)).join(" : ")}` : ""}`;
    }
    else if (expr.kind === "TypeProperty") {
        return `${printAnnotations(expr.annotations)}${oneIndent}${expr.optional ? "optional " : ""}${printNode(expr.type, depth, moduleContext, inferFqn)} ${printNode(expr.name, depth, moduleContext, inferFqn)}`;
    }
    else if (expr.kind === "TypeReference") {
        return `${printAnnotations(expr.annotations)}${printQualifiedName((_s = expr.name) === null || _s === void 0 ? void 0 : _s.name)}${printTypeParameters(expr.arguments)}`;
    }
    else if (expr.kind === "When") {
        return printNode(expr.expression, depth, moduleContext, inferFqn);
    }
    // fall through, return empty
    return "";
    /**
     * Prints the return type of an action
     * @param returnType type reference for the return of an action
     * @returns a string representiong the return type of an action
     */
    function printActionReturnType(returnType) {
        var _a;
        return returnType === undefined || ((_a = returnType.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaSchema.Void
            ? "void"
            : printNode(returnType, depth, moduleContext, inferFqn);
    }
    /**
     * Prints the return type of a dialog ommiting void/nothing return value for simplicity
     * @param returnType type reference for the return of a dialog
     * @returns a string representiong the return type of a dialog
     */
    function printDialogReturnType(returnType) {
        var _a, _b;
        return returnType === undefined || ((_a = returnType.name) === null || _a === void 0 ? void 0 : _a.name) === AlexaSchema.Void || ((_b = returnType.name) === null || _b === void 0 ? void 0 : _b.name) === AlexaSchema.Nothing
            ? ""
            : " " + printNode(returnType, depth, moduleContext, inferFqn);
    }
    function printQualifiedName(name) {
        if (name === undefined) {
            return "";
        }
        if (!inferFqn && name.includes(".")) {
            const shortName = getName(name);
            if (moduleContext.importedQualifiedNames && moduleContext.importedQualifiedNames.has(name)) {
                return shortName;
            }
            if (moduleContext.importedShortNames &&
                moduleContext.importedQualifiedNames &&
                moduleContext.imports &&
                !moduleContext.importedShortNames.has(shortName)) {
                moduleContext.importedShortNames.add(shortName);
                moduleContext.importedQualifiedNames.add(name);
                moduleContext.imports.push(name);
                return shortName;
            }
            return name;
        }
        return name;
    }
    function printTopLevelQualifiedName(name) {
        if (name === null || name === void 0 ? void 0 : name.name) {
            const thisNs = getNamespace(name.name);
            if (!inferFqn && moduleContext.namespace === thisNs) {
                return getName(name.name);
            }
            return name.name;
        }
        return "";
    }
    function printArgumentDeclarations(args) {
        var _a;
        return (_a = args === null || args === void 0 ? void 0 : args.map((arg) => printNode(arg, depth, moduleContext, inferFqn)).join(", ")) !== null && _a !== void 0 ? _a : "";
    }
    function printTypeParameterDeclarations(genericArguments) {
        return genericArguments ? `<${genericArguments.map((t) => printNode(t, depth, moduleContext, inferFqn)).join(", ")}>` : "";
    }
    function printAnnotations(annotations) {
        if (annotations === undefined || annotations.length === 0) {
            return "";
        }
        return `${annotations.map((annotation) => `${oneIndent}${printNode(annotation, depth, moduleContext, inferFqn)}`).join("\n")}\n`;
    }
    function printTypeParameters(genericArguments) {
        return genericArguments ? `<${genericArguments.map((type) => printNode(type, depth, moduleContext, inferFqn)).join(", ")}>` : "";
    }
}
//# sourceMappingURL=data:application/json;base64,