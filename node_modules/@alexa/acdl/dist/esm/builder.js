import * as antlr from "antlr4ts";
import * as acdl from "./syntax";
import * as ask from "./ast";
import { ValidationErrorFactory } from "./error-factory";
import { Counter, parseActionDeclaration, parseCall, ParseContext, parseCorrection, parseNameDeclaration, parseTypeDeclaration, } from "./parse";
import { printModule } from "./print";
import { sourceFile } from "./source-file";
import { AlexaConversations, Locale } from "./ast";
import { compileExpression } from "./compile";
const BUILDER_FILE_URI = "building.interaction.acdl";
export var ACDLBuilderTemplate;
(function (ACDLBuilderTemplate) {
    ACDLBuilderTemplate["Interaction"] = "InteractionTemplate";
})(ACDLBuilderTemplate || (ACDLBuilderTemplate = {}));
export var ACDLBuilderTemplateWalker;
(function (ACDLBuilderTemplateWalker) {
    ACDLBuilderTemplateWalker["ModuleWalker"] = "MODULE_WALKER";
    ACDLBuilderTemplateWalker["InteractionWalker"] = "INTERACTION_WALKER";
    ACDLBuilderTemplateWalker["CorrectionActualWalker"] = "CORRECTION_ACTUAL_WALKER";
    ACDLBuilderTemplateWalker["CorrectionExpectedWalker"] = "CORRECTION_EXPECTED_WALKER";
})(ACDLBuilderTemplateWalker || (ACDLBuilderTemplateWalker = {}));
/**
 * Builder for a single ask.Module for a single ACDL file
 */
export class ACDLBuilder {
    /**
     * Each ACDLBuilder is supposed to be constructed with the project information and the ACDL file information to be built.
     * It's required to set the ACDL file name and the namespace, optional with imports, to build the ACDL file.
     *
     * @param props ACDLBuilderProps
     */
    constructor(props) {
        /**
         * Builder should always be instantiated with a project context, with its checker always up to date.
         */
        Object.defineProperty(this, "project", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_checker", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Specify the virtual file for the Project instance to carry the AST over to the building process.
         */
        Object.defineProperty(this, "virtualFile", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Composer is an array of ask.Expression (or ask.ModuleExpression) writers which also walk through the expressions array.
         */
        Object.defineProperty(this, "composers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * AST will be tracked while the composers walking through their Block
         */
        Object.defineProperty(this, "_ast", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.project = props.project;
        const namespace = new ask.Name(props.namespace);
        const initialImports = props.initialImports.map((line) => line.endsWith(".*") ? new ask.Import("ImportNamespace", line.substr(0, line.length - 2)) : new ask.Import("ImportName", line));
        this._ast = new ask.Module(BUILDER_FILE_URI, ask.ModuleSchema, namespace, initialImports, [], []);
        this.virtualFile = sourceFile(this.project.config.rootDir, BUILDER_FILE_URI, this.ast);
        this.project.update(this.virtualFile);
        this._checker = this.project.getTypeChecker();
        this.composers = [];
    }
    get ast() {
        return this._ast;
    }
    get checker() {
        return this._checker;
    }
    /**
     * Factory method to produce ACDLBuilder with jump start.
     * Currently only ACDLBuilderTemplate.Interaction is supported.
     *
     * @param template ACDLBuilderTemplate
     * @param props ACDLBuilderProps
     * @returns ACDLBuilder
     */
    static startAs(template, props) {
        var _a;
        let builder;
        if (template === ACDLBuilderTemplate.Interaction) {
            builder = new ACDLBuilder({
                profile: props.profile,
                project: props.project,
                namespace: props.namespace,
                initialImports: (_a = props.initialImports) !== null && _a !== void 0 ? _a : [],
            });
            builder.registerComposer(new ACDLBlockWalker({
                context: builder.ast,
                id: ACDLBuilderTemplateWalker.ModuleWalker,
                namespace: props.namespace,
            }));
            const ibk = new ask.InteractionScope([]);
            builder.registerComposer(new ACDLBlockWalker({
                context: ibk,
                id: ACDLBuilderTemplateWalker.InteractionWalker,
                namespace: props.namespace,
            }));
            const localeAnnotation = new ask.Annotation(new ask.Call(new ask.Name(AlexaConversations.locale), [
                new ask.Argument(new ask.Name("locales"), 0, new ask.PropertyReference(new ask.Name(Locale.en_US), new ask.NameReference(new ask.Name(AlexaConversations.Locale)))),
            ]));
            const interaction = new ask.InteractionDeclaration(ibk, [localeAnnotation]);
            interaction.context = builder.ast;
            builder.ast.expressions.push(interaction);
        }
        else {
            throw new Error("InteractionTemplate is the only option to startAs for ACDLBuilder");
        }
        return builder;
    }
    getComposer(id) {
        return this.composers.find((composer) => composer.id === id);
    }
    registerComposer(walker) {
        this.composers.push(walker);
    }
    removeComposer(id) {
        const position = this.composers.findIndex((composer) => composer.id === id);
        if (position === -1) {
            throw new Error(`Composer not found given the id ${id}.`);
        }
        this.composers.splice(position, 1);
    }
    withLine(id, line) {
        const composer = this.getComposer(id);
        if (!composer) {
            throw new Error(`Composer ${id} not registered in the builder.`);
        }
        return composer.insert(line, this._checker);
    }
    withExpressionNode(id, expr) {
        const composer = this.getComposer(id);
        if (!composer) {
            throw new Error(`Composer ${id} not registered in the builder.`);
        }
        composer.insertNode(expr, this._checker);
    }
    build() {
        this.project.update(this.virtualFile);
        this._checker = this.project.getTypeChecker();
        // TODO: validates ast before printing https://github.com/alexa/ask-ac/issues/536
        return printModule(this.ast, this._checker);
    }
}
/**
 * Walkers of the ACDL file Blocks, to inser Node to AST as well as track the position.
 */
export class ACDLBlockWalker {
    constructor(props) {
        var _a;
        /**
         * Where the block walker works on
         */
        Object.defineProperty(this, "context", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Namespace from the builder
         */
        Object.defineProperty(this, "namespace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * ID is of enum of ACDLBuilderTemplateWalker, which makes sure there is only one type of walker in each building process.
         */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Tracks walker's position in the block
         */
        Object.defineProperty(this, "at", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = props.id;
        this.context = props.context;
        this.namespace = props.namespace;
        this.at = (_a = props.at) !== null && _a !== void 0 ? _a : -1;
    }
    /**
     * Insert one line of string into the Block as one Expression
     * @param line
     */
    insert(line, checker) {
        const lineExpr = this.parseLine(line);
        this.insertNode(lineExpr, checker);
        return lineExpr;
    }
    /**
     * Insert the AST Tree Node directly into the Block Expression list
     * @param expr
     */
    insertNode(expr, checker) {
        this.context.setAsParentOn(expr);
        if (this.at >= 0) {
            expr.previous = this.context.expressions[this.at];
            this.context.expressions[this.at].next = expr;
        }
        if (this.context.expressions[this.at + 1]) {
            expr.next = this.context.expressions[this.at + 1];
            this.context.expressions[this.at + 1].previous = expr;
        }
        this.context.expressions.splice(++this.at, 0, expr);
        compileExpression(expr, {
            checker,
            moduleUri: "",
        });
    }
    /**
     * Get the last added expression
     */
    peek() {
        if (this.context.expressions && this.at >= 0) {
            return this.context.expressions[this.at];
        }
        return undefined;
    }
    parseLine(line) {
        const lexer = new acdl.ACDLLexer(antlr.CharStreams.fromString(line));
        const tokenStream = new antlr.CommonTokenStream(lexer);
        const parser = new acdl.ACDLParser(tokenStream);
        const errors = [];
        parser.removeErrorListeners();
        parser.addErrorListener({
            syntaxError: (recognizer, offendingSymbol, line, charPositionInLine, msg) => {
                errors.push(ValidationErrorFactory.SyntaxError({
                    expr: {
                        uri: BUILDER_FILE_URI,
                        loc: {
                            begin: { line, character: charPositionInLine },
                            end: { line, character: charPositionInLine },
                        },
                    },
                    overrideMessage: msg,
                }));
            },
        });
        const parseContext = new ParseContext(BUILDER_FILE_URI, this.namespace, new Counter(), errors, [], []);
        const unit = parser.line();
        const builderExpr = unit.singleLineExpr();
        if (this.context instanceof ask.Module) {
            if (builderExpr.typeDeclaration()) {
                return parseTypeDeclaration(builderExpr.typeDeclaration(), parseContext);
            }
            if (builderExpr.actionDeclaration()) {
                return parseActionDeclaration(builderExpr.actionDeclaration(), parseContext);
            }
            if (builderExpr.qualifiedNameDeclaration()) {
                return parseNameDeclaration(builderExpr.qualifiedNameDeclaration(), parseContext);
            }
            if (builderExpr.nameDeclaration()) {
                return parseNameDeclaration(builderExpr.nameDeclaration(), parseContext);
            }
            throw new Error(`ask.Module can only parse NameDeclaration, ActionDeclaration and TypeDeclaration now`);
        }
        else {
            // this.context instanceof ask.Block
            if (builderExpr.nameDeclaration()) {
                return parseNameDeclaration(builderExpr.nameDeclaration(), parseContext);
            }
            if (builderExpr.qualifiedNameDeclaration()) {
                return parseNameDeclaration(builderExpr.qualifiedNameDeclaration(), parseContext);
            }
            if (builderExpr.call()) {
                return parseCall(builderExpr.call(), parseContext);
            }
            if (builderExpr.correction()) {
                return parseCorrection(builderExpr.correction(), parseContext);
            }
            throw new Error(`ask.Block only can parse Call, NameDeclaration and Correction now`);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,