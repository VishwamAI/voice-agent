import * as immutable from "immutable";
import * as ask from "./ast";
import { Apply } from "./apply";
import { AlexaConversations, AlexaSchema, ThenScope } from "./ast";
import { computeGlobal } from "./global";
import { computeLexicalScope, emptyLexicalScope, mergeLexicalScope } from "./lexical-scope";
import { getName, getNamespace, isQualifiedNamePattern, stringifyTypeParameter } from "./util";
import { Type } from "./type";
// TODO: decide whether we should implement our own immutable set instead of depending on `immutable-js`
import { memoize } from "./lazy";
import { visitEachChild, collectArray } from "./visit";
import { ActionThing, DialogThing, NothingThing, UnionThing, VoidThing } from "./thing";
import { tokens } from "./token";
let i = 0;
/**
 * API for querying a Module for error checking, type checking, descriptions and suggestions.
 */
export class TypeChecker {
    constructor(
    /**
     * Project context of the module being checked.
     */
    project, 
    /**
     * Previous TypeChecker environment.
     */
    prev, 
    /**
     * Map of Node to resolved Thing.
     */
    things, 
    /**
     * Map of TypeParameter to resolved Type.
     */
    types) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        Object.defineProperty(this, "project", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: project
        });
        Object.defineProperty(this, "prev", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: prev
        });
        Object.defineProperty(this, "types", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: types
        });
        Object.defineProperty(this, "ID", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (i += 1)
        });
        /**
         * Name bindings for expressions in the project.
         */
        Object.defineProperty(this, "global", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "nothing", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "nothingToken", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "thing", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "void", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "voidToken", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "boolean", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "number", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "string", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "enumeration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Global index of Node to its {@link LexicalScope}.
         *
         * i.e. the names available in its lexical environment and a map of the node they point to.
         */
        Object.defineProperty(this, "lexicalScopeIndex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Global index of a Module-scoped Node to its corresponding Thing value.
         *
         * This index is shared across all instances of a {@link TypeChecker} within a {@link Project}. I.e. it is a global index.
         */
        Object.defineProperty(this, "globalThingIndex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Global index of a Node to its corresponding Type.
         */
        Object.defineProperty(this, "globalTypeIndex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Local index of a Node to its corresponding Thing value within the lexical environment represented by this {@link TypeCehcker}.
         */
        Object.defineProperty(this, "localThingIndex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        /**
         * Local index of a Node to its corresponding Apply within the leixcal environment represented by this {@link TypeChecker}.
         */
        Object.defineProperty(this, "localApplyIndex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        Object.defineProperty(this, "tokens", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.globalTypeIndex = (_a = prev === null || prev === void 0 ? void 0 : prev.globalTypeIndex) !== null && _a !== void 0 ? _a : new WeakMap();
        this.tokens = (_b = prev === null || prev === void 0 ? void 0 : prev.tokens) !== null && _b !== void 0 ? _b : tokens();
        this.global = (_c = prev === null || prev === void 0 ? void 0 : prev.global) !== null && _c !== void 0 ? _c : computeGlobal(project);
        this.globalThingIndex = (_d = prev === null || prev === void 0 ? void 0 : prev.globalThingIndex) !== null && _d !== void 0 ? _d : new Map();
        this.lexicalScopeIndex = (_e = prev === null || prev === void 0 ? void 0 : prev.lexicalScopeIndex) !== null && _e !== void 0 ? _e : new WeakMap();
        this.thing = (_f = prev === null || prev === void 0 ? void 0 : prev.thing) !== null && _f !== void 0 ? _f : this.instantiateAlexaSchemaType(AlexaSchema.Thing);
        this.nothing = (_g = prev === null || prev === void 0 ? void 0 : prev.nothing) !== null && _g !== void 0 ? _g : this.instantiateAlexaSchemaType(AlexaSchema.Nothing);
        this.void = (_h = prev === null || prev === void 0 ? void 0 : prev.void) !== null && _h !== void 0 ? _h : this.instantiateAlexaSchemaType(AlexaSchema.Void);
        this.nothingToken = (_j = prev === null || prev === void 0 ? void 0 : prev.nothingToken) !== null && _j !== void 0 ? _j : this.nextToken();
        this.voidToken = (_k = prev === null || prev === void 0 ? void 0 : prev.voidToken) !== null && _k !== void 0 ? _k : this.nextToken();
        this.boolean = (_l = prev === null || prev === void 0 ? void 0 : prev.boolean) !== null && _l !== void 0 ? _l : this.instantiateAlexaSchemaType(AlexaSchema.Boolean);
        this.number = (_m = prev === null || prev === void 0 ? void 0 : prev.number) !== null && _m !== void 0 ? _m : this.instantiateAlexaSchemaType(AlexaSchema.Number);
        this.string = (_o = prev === null || prev === void 0 ? void 0 : prev.string) !== null && _o !== void 0 ? _o : this.instantiateAlexaSchemaType(AlexaSchema.String);
        this.enumeration = (_p = prev === null || prev === void 0 ? void 0 : prev.enumeration) !== null && _p !== void 0 ? _p : memoize(() => this.instantiateAlexaSchemaType(AlexaConversations.Enumeration));
        // this.apl = prev?.apl ?? memoize(() => this.instantiateAlexaSchemaType(AlexaConversations.APL));
        // this.apla = prev?.apla ?? memoize(() => this.instantiateAlexaSchemaType(AlexaConversations.APLA));
        if (prev === undefined) {
            const checker = this;
            for (const expr of this.global.scope.values()) {
                if (expr === undefined) {
                    // return;
                }
                else if (Array.isArray(expr)) {
                    expr.forEach((expr) => { var _a; return checker.globalThingIndex.set(expr, (_a = checker.getThing(expr)) !== null && _a !== void 0 ? _a : null); });
                }
                else {
                    checker.globalThingIndex.set(expr, (_q = checker.getThing(expr)) !== null && _q !== void 0 ? _q : null);
                }
            }
        }
        if (things) {
            for (const [node, thing] of things.entries()) {
                this.localThingIndex.set(node, thing);
            }
        }
    }
    /**
     * Returns a reference to the root TypeChecker instance. TypeCheckers form a chain as we descend into
     * Dialog Sample Blocks and Conditional Blocks. This `root` instance refers to the global TypeChecker.
     *
     * We use this, for example, to look at the raw type signature of an ArgumentDeclaration instead of
     * looking at the type of the value passed into that argument within a Dialog Flow:
     *
     * ```
     * action myAction(String string)
     *
     * Foo(MyAction)
     *
     * dialog Foo(
     *   action bar(String arg)
     * ) {
     *   sample {
     *     // TypeChecker.root.getThing(NameReference(bar)) will return `action bar(String arg)`
     *     // If the TypeChecker is for the scope of this sample when `Foo` was called, then it would refer to `myAction` instead since that was passed in.
     *     bar("hello")
     *   }
     * }
     * ```
     */
    get root() {
        let curr = this;
        while (curr.prev !== undefined) {
            curr = curr.prev;
        }
        return curr;
    }
    /**
     * Get the next unique token.
     */
    nextToken() {
        return this.tokens.next().value;
    }
    /**
     * Find the URI of the Module containing this node.
     *
     * @param node
     */
    getUri(node) {
        const mod = node.getModule();
        if (mod) {
            for (const file of this.project.sourceModules.concat(this.project.externalModules)) {
                if ((file === null || file === void 0 ? void 0 : file.content) === mod) {
                    return file.uri;
                }
            }
        }
        return undefined;
    }
    /**
     * Lookup an expression by its FQN.
     *
     * @param fqn fully qualified name of the expression.
     */
    lookupQualifiedName(fqn) {
        const found = fqn ? this.global.scope.get(fqn) : undefined;
        return Array.isArray(found) ? found[0] : found;
    }
    /**
     * List all known types in a namespace.
     * @param namespace
     */
    listNamespace(namespace) {
        return this.global.namespaces.get(namespace);
    }
    /**
     * Qualify a name within a scope.
     *
     * @param scope to qualify the name within
     * @param name name to qualify
     * @returns the qualified name
     */
    qualifyName(scope, query) {
        var _a, _b;
        const name = typeof query === "object" ? query === null || query === void 0 ? void 0 : query.name : query;
        if (name === undefined) {
            return undefined;
        }
        if (isQualifiedNamePattern(name)) {
            return name;
        }
        const found = this.lookupName(scope, name);
        if ((found === null || found === void 0 ? void 0 : found.kind) === "NameDeclaration") {
            return (_a = found.name) === null || _a === void 0 ? void 0 : _a.name;
        }
        if ((found === null || found === void 0 ? void 0 : found.kind) === "TypeParameter") {
            return name;
        }
        if ((found === null || found === void 0 ? void 0 : found.kind) === "TypeDeclaration" ||
            (found === null || found === void 0 ? void 0 : found.kind) === "ActionDeclaration" ||
            (found === null || found === void 0 ? void 0 : found.kind) === "DialogDeclaration" ||
            (found === null || found === void 0 ? void 0 : found.kind) === "EnumDeclaration") {
            return (_b = found.name) === null || _b === void 0 ? void 0 : _b.name;
        }
        if ((found === null || found === void 0 ? void 0 : found.kind) === "SlotType") {
            return found.name.name;
        }
        if ((found === null || found === void 0 ? void 0 : found.kind) === "ResponseTemplate") {
            if (found.isPrompt()) {
                return `${ask.PromptsNamespace}.${found.name}`;
            }
            if (found.isDisplay()) {
                return `${ask.DisplayNamespace}.${found.name}`;
            }
        }
        return name;
    }
    /**
     * Find where a name is declared in the stack.
     *
     * @param scope scope to trace back from
     * @param name name to find
     */
    lookupName(scope, name) {
        if (name === undefined) {
            return undefined;
        }
        const nameStr = typeof name === "string" ? name : name.name;
        if (this.global.scope.has(nameStr)) {
            const found = this.global.scope.get(nameStr);
            return Array.isArray(found) ? found[0] : found;
        }
        const lexicalScope = this.getVisibleNames(scope);
        if (lexicalScope) {
            const found = lexicalScope.get(nameStr);
            return Array.isArray(found) ? found[0] : found;
        }
        return undefined;
    }
    lookupNameReference(ref) {
        return this.lookupName(ref, ref.name);
    }
    /**
     * Recursively resolve the name reference when it's NameDeclaration
     * Stop when it's no longer a NameReference expression, or it's no longer a NameDeclaration
     *
     * @param ref nameReference to resolve
     * @returns the last resolved node
     */
    resolveNameReference(ref) {
        const decl = this.resolveNameReferenceToDecl(ref);
        if (ask.isNameDeclaration(decl)) {
            return decl.expression;
        }
        return decl;
    }
    /**
     * Recursively resolve the name reference to find the NameDeclaration
     * Stop when it's no longer a NameReference expression
     *
     * @param ref nameReference to resolve
     * @returns the last resolved NameDecl node
     */
    resolveNameReferenceToDecl(ref, seen = new Set()) {
        const found = ask.isPropRef(ref)
            ? this.lookupQualifiedName(ask.PropertyReference.tryResolveQualifiedName(ref))
            : this.lookupNameReference(ref);
        if (found === undefined) {
            return undefined;
        }
        if (seen.has(found)) {
            // circular reference
            return undefined;
        }
        seen.add(found);
        if (ask.isNameDeclaration(found)) {
            return this.isNameReference(found.expression)
                ? this.resolveNameReferenceToDecl(found.expression, seen)
                : found;
        }
        return found;
    }
    /**
     * Recursively resolve the name reference until find a call
     * If the name is not initialized by a call, return undefined
     *
     * @param ref nameReference to resolve
     */
    resolveNameReferenceToCall(ref) {
        const found = this.resolveNameReference(ref);
        return ask.isCall(found) ? found : undefined;
    }
    /**
     * Recursively resolve the name reference until find a propertyReference
     * If the name is not initialized by a call, return undefined
     *
     * @param ref nameReference to resolve
     */
    resolveNameReferenceToPropReference(ref) {
        const found = this.resolveNameReference(ref);
        return ask.isPropRef(found) ? found : undefined;
    }
    /**
     * Computes and caches the visible names at a Node.
     *
     * @param node the node in which we are looking for visible names
     * @param allowDescend a flag to set whether the code should descend into a Correction's `expected` block and include names in that block within this ${node}'s lexical scope.
     */
    getVisibleNames(node, allowDescend = true) {
        var _a, _b;
        if (node === undefined) {
            return immutable.Map();
        }
        // we skip caching the Correction block since its lexical scope varies on how it is approached (unfortunately)
        // 1. when the Correction Node is within a Block node, we consider the names in `expected` as a part of the lexical scope
        // 2. when we are in the Correction's `expected` or `actual` blocks, we do not consider the `expected` block as part of the lexical scope
        // we need this special behavior the Correction's expected block has abnormal lexical scope laws
        const useCache = node.kind !== "Correction";
        if (useCache && this.lexicalScopeIndex.has(node)) {
            return this.lexicalScopeIndex.get(node);
        }
        const inheritedNames = this.getVisibleNames((_a = node.previous) !== null && _a !== void 0 ? _a : node.context, ((_b = node.previous) === null || _b === void 0 ? void 0 : _b.kind) === "Correction");
        const producedNames = this.getProducedNames(node, allowDescend);
        const lexicalScope = inheritedNames !== undefined && producedNames !== undefined
            ? // TODO: check for conflicts or allow shadowing?
                inheritedNames.merge(producedNames)
            : inheritedNames === undefined
                ? producedNames
                : inheritedNames;
        if (useCache) {
            this.lexicalScopeIndex.set(node, lexicalScope);
        }
        return lexicalScope;
    }
    /**
     * Collect the names produced by a Node.
     */
    getProducedNames(node, allowDescend) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        if (node.kind === "Module") {
            const imports = (_b = (_a = node.imports) === null || _a === void 0 ? void 0 : _a.map((imprt) => {
                var _a;
                if (imprt.name) {
                    if (imprt.kind === "ImportName") {
                        const namespace = getNamespace(imprt.name);
                        const name = getName(imprt.name);
                        const expr = (_a = this.global.namespaces.get(namespace)) === null || _a === void 0 ? void 0 : _a.get(name);
                        if (expr) {
                            return immutable.Map({
                                [name]: expr,
                            });
                        }
                    }
                    else {
                        return this.global.namespaces.get(imprt.name);
                    }
                }
                return undefined;
            }).filter((scope) => scope !== undefined)) !== null && _b !== void 0 ? _b : [];
            // regard content in same namespace as import
            const thisNamespace = ((_c = node.namespace) === null || _c === void 0 ? void 0 : _c.name) ? this.global.namespaces.get(node.namespace.name) : undefined;
            const declared = (_e = (_d = node.expressions) === null || _d === void 0 ? void 0 : _d.map((expr) => {
                var _a;
                if (expr.kind !== "InteractionDeclaration" &&
                    ((_a = expr.name) === null || _a === void 0 ? void 0 : _a.name) &&
                    (expr.kind === "ActionDeclaration" ||
                        expr.kind === "DialogDeclaration" ||
                        expr.kind === "EnumDeclaration" ||
                        expr.kind === "NameDeclaration" ||
                        expr.kind === "TypeDeclaration")) {
                    if (node.namespace !== undefined) {
                        // we're in an ACDL module so import the short name into lexical scope
                        return immutable.Map({
                            [expr.name.name]: expr,
                            [getName(expr.name.name)]: expr,
                        });
                    }
                    return immutable.Map({
                        [expr.name.name]: expr,
                    });
                }
                return undefined;
            }).filter((scope) => scope !== undefined)) !== null && _e !== void 0 ? _e : [];
            return [...imports, thisNamespace, ...declared].reduce(mergeLexicalScope, emptyLexicalScope()).map((value) => {
                if (Array.isArray(value)) {
                    const set = new Set(value);
                    if (set.size === 1) {
                        return value[0];
                    }
                    return Array.from(set);
                }
                return value;
            });
        }
        if ((node.kind === "NameDeclaration" || node.kind === "EnumDeclaration") && ((_f = node.name) === null || _f === void 0 ? void 0 : _f.name) !== undefined) {
            return immutable.Map({
                [node.name.name]: node,
            });
        }
        if ((node === null || node === void 0 ? void 0 : node.kind) === "ActionDeclaration" || (node === null || node === void 0 ? void 0 : node.kind) === "DialogDeclaration" || (node === null || node === void 0 ? void 0 : node.kind) === "TypeDeclaration") {
            const genericArguments = computeLexicalScope(node.genericArguments);
            if (node.kind === "DialogDeclaration") {
                const argumentsScope = computeLexicalScope(node.arguments);
                return genericArguments.merge(argumentsScope);
            }
            return genericArguments;
        }
        if (node.kind === "Correction" && allowDescend) {
            if ((_h = (_g = node.expected) === null || _g === void 0 ? void 0 : _g.expressions) === null || _h === void 0 ? void 0 : _h.length) {
                return this.getVisibleNames(node.expected.expressions[node.expected.expressions.length - 1]);
            }
        }
        else if (node.kind === "Argument") {
            // special lexical scoping logic for validateArg, see https://github.com/alexa/ask-ac/issues/690
            const annotationName = this.lookupName(node.context, node.context.name);
            if ((annotationName === null || annotationName === void 0 ? void 0 : annotationName.kind) === "ActionDeclaration" && ((_j = annotationName.name) === null || _j === void 0 ? void 0 : _j.name) === AlexaConversations.validateArg) {
                if (((_k = node.name) === null || _k === void 0 ? void 0 : _k.name) === "condition" || (node.name === undefined && node.index === 0)) {
                    // we only want the argument names to be visible for the `condition` argument.
                    if (node.context.context.kind === "Annotation" && node.context.context.context.kind === "ActionDeclaration") {
                        return computeLexicalScope(node.context.context.context.arguments);
                    }
                }
            }
        }
        return undefined;
    }
    /**
     * Find the Expression located at a specific position in the file.
     *
     * @param uri module uri to search
     * @param position line and column number
     */
    findName(uri, position) {
        const module = this.project.getModule(uri);
        if (module === null || module === void 0 ? void 0 : module.content) {
            if (module.content.kind === "Module") {
                return (find(module.content.expressions, position) || find(module.content.imports, position) || find(module.content.namespace, position));
            }
            return find(module.content.expressions, position);
        }
        return undefined;
        function find(node, position) {
            if (node === undefined || node === null) {
                return undefined;
            }
            if (Array.isArray(node)) {
                for (const i of node) {
                    const found = find(i, position);
                    if (found !== undefined) {
                        return found;
                    }
                }
            }
            else if (typeof node === "object") {
                if ((node === null || node === void 0 ? void 0 : node.loc) !== undefined) {
                    if (ask.locationContains(node.loc, position, true)) {
                        if (node.kind === "Name") {
                            return node;
                        }
                    }
                }
                for (const [name, value] of Object.entries(node)) {
                    if (name === "context" || name === "previous") {
                        continue;
                    }
                    const found = find(value, position);
                    if (found !== undefined) {
                        return found;
                    }
                }
            }
            return undefined;
        }
    }
    /**
     * Finds the type referenced by a TypeReference.
     *
     * @param type type reference to lookup
     */
    lookupTypeReference(type) {
        var _a;
        const target = this.lookupName(type, (_a = type.name) === null || _a === void 0 ? void 0 : _a.name);
        if ((target === null || target === void 0 ? void 0 : target.kind) === "ActionDeclaration" ||
            (target === null || target === void 0 ? void 0 : target.kind) === "DialogDeclaration" ||
            (target === null || target === void 0 ? void 0 : target.kind) === "EnumDeclaration" ||
            (target === null || target === void 0 ? void 0 : target.kind) === "TypeDeclaration" ||
            (target === null || target === void 0 ? void 0 : target.kind) === "TypeParameter" ||
            (target === null || target === void 0 ? void 0 : target.kind) === "SlotType") {
            return target;
        }
        return undefined;
    }
    /**
     * Get the declaration of a call's target.
     *
     * @param call the call expression to find the target of
     * @returns the named Action or Dialog declaration if exists, undefined otherwise.
     */
    lookupCallDeclaration(call) {
        var _a;
        const target = this.lookupName(call, (_a = call.name) === null || _a === void 0 ? void 0 : _a.name);
        if (target !== undefined &&
            (target.kind === "ActionDeclaration" ||
                target.kind === "ArgumentDeclaration" ||
                target.kind === "DialogDeclaration" ||
                target.kind === "NameDeclaration" ||
                target.kind === "SlotType" ||
                target.kind === "TypeDeclaration")) {
            return target;
        }
        return undefined;
    }
    /**
     * Get the declaration of a call's target.
     *
     * @param call the call expression to find the target of
     * @returns the named Action or Dialog declaration if exists, undefined otherwise.
     */
    lookupTypeDeclaration(fqn) {
        const names = this.global.scope.get(fqn);
        const expr = Array.isArray(names) ? names[0] : names;
        if ((expr === null || expr === void 0 ? void 0 : expr.kind) === "TypeDeclaration") {
            return expr;
        }
        return undefined;
    }
    /**
     * Get auto-completion suggestions for the Node.
     */
    getCompletions(node) {
        var _a, _b, _c, _d, _e, _f;
        // TODO: type safe interface
        if (node.kind === "Name") {
            const { context } = node;
            if (context.kind === "Utterance") {
                const type = (_a = this.getType(context.context)) === null || _a === void 0 ? void 0 : _a.getUtteranceType();
                if (type !== undefined) {
                    const alreadyProvided = new Set((_b = context.names) === null || _b === void 0 ? void 0 : _b.map((n) => n.name).filter((n) => n !== undefined && n !== node.name));
                    return (_c = type.properties) === null || _c === void 0 ? void 0 : _c.map((prop) => prop.name).filter((n) => n !== undefined && !alreadyProvided.has(n)).map((label) => ({
                        label,
                    }));
                }
            }
            else if (context.kind === "Block") {
                return Object.keys(this.getVisibleNames(node) || {}).map((label) => ({ label }));
            }
            else {
                return this.getCompletions(node.context);
            }
        }
        else if (this.isNameReference(node)) {
            return Object.keys(this.getVisibleNames(node) || {})
                .filter((label) => !label.includes("."))
                .map((label) => ({
                label,
            }));
        }
        else if (node.kind === "PropertyReference") {
            const exprType = this === null || this === void 0 ? void 0 : this.getType(node.expression);
            if (exprType) {
                return (_d = exprType.properties) === null || _d === void 0 ? void 0 : _d.map((property) => ({
                    label: property.name,
                }));
            }
        }
        else if (node.kind === "Argument") {
            return (_f = (_e = this.getApply(node.context)) === null || _e === void 0 ? void 0 : _e.argumentDeclarations) === null || _f === void 0 ? void 0 : _f.map((arg) => {
                var _a;
                return ({
                    label: typeof arg.name === "string" ? arg.name : (_a = arg.name) === null || _a === void 0 ? void 0 : _a.name,
                });
            });
        }
        return undefined;
    }
    /**
     * Compute a detailed description of the expression.
     *
     * @param node expression to describe.
     */
    getDescription(node) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        if (node !== undefined) {
            if (node.kind === "Name") {
                const { context } = node;
                if (context.kind === "Utterance") {
                    const type = (_a = this.getType(context.context)) === null || _a === void 0 ? void 0 : _a.getUtteranceType();
                    if (type && node.name) {
                        return `(property) ${type.toString(node)} ${node.name}`;
                    }
                }
                return this.getDescription(context);
            }
            if (node.kind === "NameReference") {
                const type = this.getType(node);
                if (type && ((_b = node.name) === null || _b === void 0 ? void 0 : _b.name)) {
                    return `(name) ${type.toString(node)} ${node.name.name}`;
                }
            }
            else if (node.kind === "NameDeclaration") {
                if (((_c = node.name) === null || _c === void 0 ? void 0 : _c.name) && node.expression) {
                    const type = this.getType(node);
                    if (type) {
                        return `(name) ${type.toString(node)} ${node.name.name}`;
                    }
                }
            }
            else if (node.kind === "PropertyReference") {
                if (this.isNameReference(node)) {
                    const type = this.getType(node);
                    if (type && ((_d = node.name) === null || _d === void 0 ? void 0 : _d.name)) {
                        return `(name) ${type.toString(node)} ${node.name.name}`;
                    }
                }
                const propertyName = (_e = node.name) === null || _e === void 0 ? void 0 : _e.name;
                const returnType = this.getType(node);
                if (returnType && propertyName) {
                    return `(property) ${returnType.toString(node)} ${propertyName}`;
                }
            }
            else if (node.kind === "TypeReference") {
                const type = this.getType(node);
                if (((_f = node.name) === null || _f === void 0 ? void 0 : _f.name) && type) {
                    const label = ((_g = type === null || type === void 0 ? void 0 : type.declaration) === null || _g === void 0 ? void 0 : _g.kind) === "TypeParameter" ? "type parameter" : "type";
                    return `(${label}) ${type.toString(node)}`;
                }
            }
            else if (node.kind === "Type") {
                return node.toString(node.declaration);
            }
            else if (node.kind === "TypeParameter") {
                if ((_h = node.name) === null || _h === void 0 ? void 0 : _h.name) {
                    return `(type parameter) ${node.name.name}`;
                }
            }
            else if (node.kind === "TypeProperty") {
                const type = this.getType(node.type);
                if (type && ((_j = node.name) === null || _j === void 0 ? void 0 : _j.name)) {
                    return `(property) ${type.toString(node)} ${node.name.name}`;
                }
            }
            else if (node.kind === "TypeDeclaration") {
                return `(type declaration) ${(_k = node.name) === null || _k === void 0 ? void 0 : _k.name}${node.genericArguments ? `<${node.genericArguments.map((arg) => stringifyTypeParameter(arg))}>` : ""}`;
            }
            else if (node.kind === "EnumDeclaration") {
                return `(enum declaration) ${(_l = node.name) === null || _l === void 0 ? void 0 : _l.name}`;
            }
            else if (node.kind === "EnumItemDeclaration") {
                return `(enum item) ${(_m = node.name) === null || _m === void 0 ? void 0 : _m.name}`;
            }
            else if (node.kind === "DialogDeclaration" || node.kind === "ActionDeclaration") {
                const type = node.kind === "ActionDeclaration" ? "action" : "dialog";
                const returnType = this.getType(node.returnType);
                const argumentDeclarations = node.arguments && node.arguments.length > 0
                    ? `(\n  ${node.arguments.map((a) => { var _a, _b; return `${(_a = this.getType(a)) === null || _a === void 0 ? void 0 : _a.toString(node)} ${(_b = a.name) === null || _b === void 0 ? void 0 : _b.name}`; }).join(",\n  ")}\n)`
                    : "()";
                if (returnType && ((_o = node.name) === null || _o === void 0 ? void 0 : _o.name)) {
                    return `${type} ${returnType.toString(node)} ${node.name.name}${argumentDeclarations}`;
                }
            }
            else if (node.kind === "ArgumentDeclaration") {
                const type = this.getType(node.type);
                if (type && ((_p = node.name) === null || _p === void 0 ? void 0 : _p.name)) {
                    return `(argument) ${type.toString(node)} ${(_q = node.name) === null || _q === void 0 ? void 0 : _q.name}`;
                }
            }
            else if (node.kind === "Argument") {
                const type = this.getType(node.value);
                if (type && ((_r = node.name) === null || _r === void 0 ? void 0 : _r.name)) {
                    return `(argument) ${type.toString(node)} ${(_s = node.name) === null || _s === void 0 ? void 0 : _s.name}`;
                }
            }
            else if (node.kind === "Call") {
                return this.getDescription((_t = this.getApply(node)) === null || _t === void 0 ? void 0 : _t.decl);
            }
        }
        return undefined;
    }
    /**
     * Gets a `Thing` instance representing the value of some Node.
     *
     * @param node AST node to get a Thing to represent.
     * @param backtrack backtrack to control type interface
     * @param seen nodes seen so far in this traversal to detect infinite loops
     */
    getThing(node, token, origin = node, seen = immutable.Set()) {
        var _a, _b, _c;
        if (node === undefined) {
            return undefined;
        }
        if (seen.has(node)) {
            // circular reference
            return undefined;
        }
        const checker = this;
        seen = seen.add(node);
        if (this.globalThingIndex.has(node)) {
            return (_a = this.globalThingIndex.get(node)) !== null && _a !== void 0 ? _a : undefined;
        }
        if (!this.localThingIndex.has(node)) {
            this.localThingIndex.set(node, (_b = getThing(node, seen)) !== null && _b !== void 0 ? _b : null);
        }
        return (_c = this.localThingIndex.get(node)) !== null && _c !== void 0 ? _c : undefined;
        function getThing(node, seen) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
            if (node.kind === "NameReference" ||
                node.kind === "PropertyReference" ||
                (node.kind === "Call" && ((_a = checker.getApply(node, undefined, seen)) === null || _a === void 0 ? void 0 : _a.isGetListItem()))) {
                let rootThing = undefined;
                if (node.kind === "PropertyReference") {
                    const nameRef = checker.lookupName(node, ask.PropertyReference.tryResolveQualifiedName(node));
                    if (nameRef) {
                        rootThing = checker.getThing(nameRef, token, node, seen);
                    }
                    else {
                        rootThing = (_b = checker.getThing(node.expression, undefined, undefined, seen)) === null || _b === void 0 ? void 0 : _b.getProperty(node.name);
                    }
                }
                else if (node.kind === "Call") {
                    const apply = checker.getApply(node);
                    const index = (_c = checker.getThing(apply.getArgumentValue("index"))) === null || _c === void 0 ? void 0 : _c.asNumber();
                    let listThing = checker.getThing(apply.getArgumentValue("list"), undefined, undefined, seen);
                    // If listThing is Optional<List> then we need to unwrap the List from the generic
                    // argument and transform it from an AnyThing to a ListThing.
                    if (!(listThing === null || listThing === void 0 ? void 0 : listThing.isList()) && (listThing === null || listThing === void 0 ? void 0 : listThing.type.isOptional())) {
                        const genericType = (_e = (_d = listThing === null || listThing === void 0 ? void 0 : listThing.type) === null || _d === void 0 ? void 0 : _d.genericArguments) === null || _e === void 0 ? void 0 : _e[0];
                        if (genericType && genericType.isList()) {
                            listThing = genericType.getThing(checker.nextToken(), origin, listThing, apply);
                        }
                    }
                    if (index) {
                        rootThing = (_f = listThing === null || listThing === void 0 ? void 0 : listThing.asList()) === null || _f === void 0 ? void 0 : _f.getItem(index, node);
                    }
                }
                else {
                    rootThing = checker.getThing(checker.lookupNameReference(node), token, undefined, seen);
                }
                if (rootThing === undefined) {
                    return undefined;
                }
                return search(node.context);
                function search(context) {
                    if (context === undefined) {
                        return rootThing;
                    }
                    if (context.kind === "Block") {
                        if (context instanceof ThenScope) {
                            if (context.context.when) {
                                return descend(context.context.when.expression, search(context.context));
                            }
                            return search(context.context);
                        }
                        if (context.context.kind === "Sample") {
                            const sample = context.context;
                            if (sample.annotations) {
                                for (const annotation of sample.annotations) {
                                    const annotationApply = checker.getApply(annotation.call);
                                    if (annotationApply === null || annotationApply === void 0 ? void 0 : annotationApply.isWhen()) {
                                        const condition = annotationApply.getArgumentValue("condition");
                                        if (condition) {
                                            return descend(condition, search(context.context));
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    else if (context.kind === "Argument") {
                        const apply = checker.getApply(context.context);
                        if (apply === null || apply === void 0 ? void 0 : apply.isAnd()) {
                            const left = apply.getArgument("left");
                            const right = apply.getArgument("right");
                            if (left === context) {
                                return search(context.context);
                            }
                            if (right === context) {
                                return descend(left, search(context.context));
                            }
                        }
                    }
                    return search(context.context);
                }
                function descend(when, thing) {
                    var _a;
                    if (when === undefined) {
                        return thing;
                    }
                    if (when.kind === "Argument") {
                        return descend(when.value, thing);
                    }
                    if (when.kind === "Call") {
                        const apply = checker.getApply(when, true, seen);
                        if (apply) {
                            if (apply.isIs()) {
                                const isThing = apply.getArgumentValueThing("thing");
                                const type = (_a = apply.getGenericArguments()) === null || _a === void 0 ? void 0 : _a[0];
                                if (type && (isThing === null || isThing === void 0 ? void 0 : isThing.equals(thing))) {
                                    return thing.cast(thing.type.narrow(type));
                                }
                            }
                            else if (apply.isAnd()) {
                                const left = descend(apply.getArgumentValue("left"), thing);
                                const right = descend(apply.getArgumentValue("right"), left);
                                if (left === undefined && right === undefined) {
                                    return search(when.context);
                                }
                                if (left === undefined || right === undefined) {
                                    return left || right;
                                }
                                const intersection = left.type.narrow(right.type);
                                if (intersection) {
                                    return search(when.context).cast(intersection);
                                }
                            }
                            else if (apply.isOr()) {
                                const left = descend(apply.getArgumentValue("left"), thing);
                                const right = descend(apply.getArgumentValue("right"), thing);
                                const union = left.type.union(right.type);
                                if (union) {
                                    return thing.cast(union);
                                }
                            }
                            else if (apply.isEq() || apply.isNeq()) {
                                const left = apply.getArgumentValueThing("left");
                                const right = apply.getArgumentValueThing("right");
                                if ((left === null || left === void 0 ? void 0 : left.equals(thing)) || (right === null || right === void 0 ? void 0 : right.equals(thing))) {
                                    const operand = (left === null || left === void 0 ? void 0 : left.equals(thing)) ? right : left;
                                    if ((operand === null || operand === void 0 ? void 0 : operand.type.isVoid()) || (operand === null || operand === void 0 ? void 0 : operand.type.isNothing())) {
                                        if (apply.isEq()) {
                                            return new VoidThing(checker, thing.token, checker.void, thing.apply, thing.origin, thing.parent);
                                        }
                                        let { type } = thing;
                                        while (type === null || type === void 0 ? void 0 : type.isOptional()) {
                                            type = type.getOptionalType();
                                        }
                                        return type ? thing.cast(type) : thing;
                                    }
                                    return thing;
                                }
                            }
                        }
                    }
                    return thing;
                }
            }
            if (node.kind === "NameDeclaration") {
                const expr = checker.getThing(node.expression, token !== null && token !== void 0 ? token : checker.nextToken(), (_g = node.expression) !== null && _g !== void 0 ? _g : node, seen);
                if (node.type && (expr === null || expr === void 0 ? void 0 : expr.type.isNothing())) {
                    return (_h = checker.getType(node.type)) === null || _h === void 0 ? void 0 : _h.getThing(token !== null && token !== void 0 ? token : checker.nextToken(), (_j = node.expression) !== null && _j !== void 0 ? _j : node);
                }
                return expr;
            }
            if (node.kind === "Call") {
                const apply = checker.getApply(node, true, seen);
                if (apply !== undefined) {
                    if (apply.isType()) {
                        const returnType = apply.getReturnType(seen);
                        if (returnType === null || returnType === void 0 ? void 0 : returnType.isNothing()) {
                            return new NothingThing(checker, checker.nothingToken, checker.nothing, apply, origin !== null && origin !== void 0 ? origin : node, undefined);
                        }
                        if (returnType === null || returnType === void 0 ? void 0 : returnType.isVoid()) {
                            return new VoidThing(checker, checker.voidToken, checker.void, apply, origin !== null && origin !== void 0 ? origin : node, undefined);
                        }
                        return returnType === null || returnType === void 0 ? void 0 : returnType.getThing(token !== null && token !== void 0 ? token : checker.nextToken(), origin !== null && origin !== void 0 ? origin : node, undefined, apply);
                    }
                    if (apply.isAction()) {
                        return (_k = apply.getReturnType(seen)) === null || _k === void 0 ? void 0 : _k.getThing(token !== null && token !== void 0 ? token : checker.nextToken(), origin !== null && origin !== void 0 ? origin : node, undefined, apply);
                    }
                    if (apply.isDialog()) {
                        return (_l = apply.getReturnType(seen)) === null || _l === void 0 ? void 0 : _l.getThing(token !== null && token !== void 0 ? token : checker.nextToken(), origin !== null && origin !== void 0 ? origin : node);
                    }
                }
                return undefined;
            }
            if (node.kind === "Annotation") {
                return checker.getThing(node.call, token, undefined, seen);
            }
            if (node.kind === "Argument") {
                return checker.getThing(node.value, token, undefined, seen);
            }
            if (node.kind === "ListItem") {
                return checker.getThing(node.item, token, undefined, seen);
            }
            if (node.kind === "ListLiteral") {
                return checker.getThing(node.context, token, undefined, seen);
            }
            if (node.kind === "ResponseTemplate") {
                // TODO
            }
            else if (node.kind === "Sample") {
                return checker.getThing(node.scope, token !== null && token !== void 0 ? token : checker.nextToken(), node, seen);
            }
            else if (node.kind === "ActionDeclaration") {
                return new ActionThing(checker, checker.nextToken(), checker.getType(node), node);
            }
            else if (node.kind === "DialogDeclaration") {
                return new DialogThing(checker, checker.nextToken(), checker.getType(node), node);
            }
            else if (node.kind === "Condition") {
                const then = ((_o = (_m = node.then) === null || _m === void 0 ? void 0 : _m.expressions) === null || _o === void 0 ? void 0 : _o.length)
                    ? checker.getThing(node.then.expressions[node.then.expressions.length - 1], undefined, undefined, seen)
                    : checker.void.getThing(checker.nextToken(), node);
                const _else = ((_q = (_p = node.else) === null || _p === void 0 ? void 0 : _p.expressions) === null || _q === void 0 ? void 0 : _q.length)
                    ? checker.getThing(node.else.expressions[node.else.expressions.length - 1], undefined, undefined, seen)
                    : checker.void.getThing(checker.nextToken(), node);
                if (then && _else) {
                    return new UnionThing(checker, checker.nextToken(), checker.getType(node), node, [then, _else]);
                }
                if (then) {
                    return new UnionThing(checker, checker.nextToken(), checker.getType(node), node, [then]);
                }
                return undefined;
            }
            else if (node.kind === "Block" && node.expressions && node.expressions.length > 0) {
                return checker.getThing(node.expressions[node.expressions.length - 1]);
            }
            else if (node.kind === "When") {
                return checker.getThing(node.expression, token, origin, seen);
            }
            // recursion
            return ((_r = checker.getType(node)) !== null && _r !== void 0 ? _r : checker.thing).getThing(token !== null && token !== void 0 ? token : checker.nextToken(), origin !== null && origin !== void 0 ? origin : node);
        }
    }
    /**
     * Gets the type of a Node.
     *
     * @param node to determine the type of
     * @param backtrack backtrack to control the behavior of the get type search
     * @param seen a set of seen nodes for detecting circular references
     * @returns instantiate type of the node or undefined if it cannot be determined
     */
    getType(node, backtrack = true, seen = immutable.Set()) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        if (node === undefined || seen.has(node)) {
            return undefined;
        }
        if (node.kind === "Call") {
            const apply = this.getApply(node, backtrack);
            if (apply === null || apply === void 0 ? void 0 : apply.isGetListItem()) {
                return (_a = this.getThing(node, undefined, undefined, seen)) === null || _a === void 0 ? void 0 : _a.type;
            }
            return apply === null || apply === void 0 ? void 0 : apply.getReturnType(seen.add(node));
        }
        if (node.kind === "Annotation") {
            return this.getType(node.call, backtrack, seen);
        }
        if (node.kind === "Utterance") {
            return this.getType(node.context, backtrack);
        }
        if (node.kind === "NameDeclaration") {
            if (node.type) {
                return this.instantiateTypeReference(node.type);
            }
            // infer the type from the expression
            return (_b = this.getThing(node.expression, undefined, node, seen.add(node))) === null || _b === void 0 ? void 0 : _b.type;
        }
        if (node.kind === "NameReference") {
            return (_c = this.getThing(node, undefined, node, seen)) === null || _c === void 0 ? void 0 : _c.type;
        }
        if (node.kind === "PropertyReference") {
            return (_d = this.getThing(node, undefined, node, seen)) === null || _d === void 0 ? void 0 : _d.type;
        }
        if (node.kind === "ListLiteral") {
            // empty list defaults to List<Thing>, otherwise List<T> where T is the intersection of all Types in the List.
            // TODO: should it default to List<Nothing> so that it is a List compatible with all lists? Probably...
            const itemType = node.items.length === 0
                ? this.thing
                : node.items
                    .map((item) => this.getType(item.item, false, seen))
                    // reduce the list of types to a single type which is their shared sub type
                    // if two types have an `undefined` intersection, assume as `Thing`
                    // initial value of reduction is nothing (0, "zero") - nothing intersects with all types, so the first value in the list always takes precedence
                    .reduce((a, b) => { var _a; return (_a = a === null || a === void 0 ? void 0 : a.union(b)) !== null && _a !== void 0 ? _a : this.thing; }, this.nothing);
            if (itemType === undefined) {
                return undefined;
            }
            if (node.context.kind === "Call" && ((_e = node.context.name) === null || _e === void 0 ? void 0 : _e.name) === AlexaConversations.Args) {
                return this.instantiateAlexaSchemaType(AlexaConversations.Args, itemType);
            }
            return this.instantiateAlexaSchemaType(AlexaSchema.List, itemType);
        }
        if (node.kind === "ArgumentDeclaration") {
            return this.instantiateTypeReference(node.type);
        }
        if (node.kind === "TypeReference") {
            return this.instantiateTypeReference(node);
        }
        if (node.kind === "Condition") {
            const then = (_f = this.getType(node.then, backtrack, seen)) !== null && _f !== void 0 ? _f : this.nothing; // then as `undefined` is impossible
            const _else = node.else ? (_g = this.getType(node.else, backtrack, seen)) !== null && _g !== void 0 ? _g : this.nothing : this.void;
            return then === null || then === void 0 ? void 0 : then.union(_else);
        }
        if (node.kind === "Correction") {
            return this.void;
        }
        if (node.kind === "When") {
            return this.getType(node.expression);
        }
        if (node.kind === "Block") {
            if (node.expressions && node.expressions.length > 0) {
                return this.getType(node.expressions[node.expressions.length - 1], backtrack, seen);
            }
            return this.void;
        }
        if (node.kind === "ActionDeclaration" || node.kind === "DialogDeclaration") {
            return new Type(this, node, undefined);
        }
        if (node.kind === "TypeDeclaration") {
            // Type<T>
            const typeType = this.lookupTypeDeclaration(AlexaSchema.Type);
            const type = this.instantiateTypeDeclaration(node, undefined);
            if (type) {
                return new Type(this, typeType, [type]);
            }
        }
        else if (node.kind === "TypeParameter") {
            return this.instantiateTypeParameter(node);
        }
        else if (node.kind === "ResponseTemplate") {
            if (node.type === ask.ResponseTemplateType.Display) {
                return this.instantiateTypeDeclaration(this.lookupTypeDeclaration(AlexaConversations.APL), [this.thing]);
            }
            if (node.type === ask.ResponseTemplateType.Prompt) {
                return this.instantiateTypeDeclaration(this.lookupTypeDeclaration(AlexaConversations.APLA), [this.thing]);
            }
        }
        else if (node.kind === "SlotType") {
            return this.instantiateTypeDeclaration(node);
        }
        else if (node.kind === "Sample") {
            return this.getType(node.scope, backtrack, seen);
        }
        else if (node.kind === "ListItem") {
            return this.getType(node.item, backtrack, seen);
        }
        else if (node.kind === "Argument") {
            return this.getType(node.value, backtrack, seen);
        }
        else if (node.kind === "TypeProperty") {
            let propertyType = (_h = this.getType(node.type, backtrack, seen)) !== null && _h !== void 0 ? _h : this.nothing;
            if (node.optional === true && !propertyType.isOptional()) {
                propertyType = new Type(this, this.lookupTypeDeclaration(AlexaSchema.Optional), [propertyType]);
            }
            return new Type(this, this.lookupTypeDeclaration(AlexaSchema.Property), [propertyType]);
        }
        else if (node.kind === "EnumDeclaration") {
            const typeType = this.lookupTypeDeclaration(AlexaSchema.Type);
            const type = this.instantiateTypeDeclaration(node);
            if (type) {
                /**
                 * e.g.
                 * ```
                 * enum A {
                 *   a
                 * }
                 *
                 * A // type: `Type<A>`
                 * A.a // type: `A`
                 * ``
                 */
                return new Type(this, typeType, [type]);
            }
        }
        else if (node.kind === "EnumItemDeclaration") {
            return (_j = this.getType(node.context, backtrack, seen)) === null || _j === void 0 ? void 0 : _j.getTypeType();
        }
        return undefined;
    }
    /**
     * Get the type of a Call implied by its context.
     *
     * @param call
     */
    getImpliedType(call) {
        var _a, _b, _c;
        const callContext = call.context;
        if ((callContext.kind === "NameDeclaration" || callContext.kind === "ArgumentDeclaration") && callContext.type) {
            return this.instantiateTypeReference(callContext.type);
        }
        if (callContext.kind === "ListItem") {
            return (_b = (_a = this.getApply(callContext.context.context, true)) === null || _a === void 0 ? void 0 : _a.getReturnType()) === null || _b === void 0 ? void 0 : _b.getListItemType();
        }
        if (callContext.kind === "Argument") {
            return (_c = this.getApply(callContext.context, true)) === null || _c === void 0 ? void 0 : _c.getType(callContext);
        }
        return undefined;
    }
    /**
     * Get an Apply for this call.
     *
     * @param call to analyze
     * @param backtrack whether to look back up the tree to infer types
     */
    getApply(call, backtrack = true, seenNames = immutable.Set()) {
        var _a, _b;
        const checker = this;
        if (!backtrack) {
            return getApply();
        }
        if (!this.localApplyIndex.has(call)) {
            this.localApplyIndex.set(call, (_a = getApply()) !== null && _a !== void 0 ? _a : null);
        }
        return (_b = this.localApplyIndex.get(call)) !== null && _b !== void 0 ? _b : undefined;
        function getApply() {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            if (checker.prev) {
                return (_a = checker.root.getApply(call, backtrack, seenNames)) === null || _a === void 0 ? void 0 : _a.instantiate(checker);
            }
            if (((_b = call.name) === null || _b === void 0 ? void 0 : _b.name) === undefined) {
                if (backtrack) {
                    let impliedType = checker.getImpliedType(call);
                    while (impliedType === null || impliedType === void 0 ? void 0 : impliedType.isOptional()) {
                        // if the implied type is optional and we have a non-null call, then we know we are instantiating the Some type
                        impliedType = impliedType.getOptionalType();
                    }
                    if (ask.isListLiteral(call.arguments) && (impliedType === null || impliedType === void 0 ? void 0 : impliedType.isThing())) {
                        // if checker is a list literal in an argument that is of type, `Thing`, then infer the the type of the list from the literal items.
                        impliedType = checker.getType(call.arguments);
                    }
                    const implied = impliedType === null || impliedType === void 0 ? void 0 : impliedType.apply(call);
                    if (implied) {
                        return implied;
                    }
                }
                if (ask.isListLiteral(call.arguments)) {
                    return (_c = checker.getType(call.arguments, backtrack, seenNames)) === null || _c === void 0 ? void 0 : _c.apply(call);
                }
                return undefined;
            }
            if (((_d = call.name) === null || _d === void 0 ? void 0 : _d.name) === AlexaSchema.String && (typeof call.arguments === "string" || ask.isUtterance(call.arguments))) {
                // string literal, let's check if this string should be treated as an utterance or some other specialized string
                if (backtrack) {
                    const impliedType = checker.getImpliedType(call);
                    if (impliedType === null || impliedType === void 0 ? void 0 : impliedType.isStringLike()) {
                        return impliedType.apply(call);
                    }
                }
            }
            else if (call.name.name === AlexaSchema.Number && typeof call.arguments === "number") {
                // number literal, let's check if it should be up-casted to a specialized string based on context
                // e.g. Ordinal ord = 1
                // `1` should be interpreted as Ordinal(1), not Number(1)
                if (backtrack) {
                    const impliedType = checker.getImpliedType(call);
                    if (impliedType === null || impliedType === void 0 ? void 0 : impliedType.isNumber()) {
                        return impliedType.apply(call);
                    }
                }
            }
            const decl = checker.lookupCallDeclaration(call);
            if (decl === undefined) {
                return undefined;
            }
            if (decl.kind === "TypeDeclaration") {
                if (decl.genericArguments === undefined) {
                    // concrete type
                    return (_e = checker.instantiateTypeDeclaration(decl, undefined)) === null || _e === void 0 ? void 0 : _e.apply(call);
                }
                if (((_f = call.genericArguments) === null || _f === void 0 ? void 0 : _f.length) === decl.genericArguments.length) {
                    // generic with explicits
                    return (_g = checker
                        .instantiateTypeDeclaration(decl, call.genericArguments.map((a) => checker.instantiateTypeReference(a)))) === null || _g === void 0 ? void 0 : _g.apply(call);
                }
                return new Apply(checker, call, decl);
            }
            if (decl.kind === "SlotType") {
                return (_h = checker.instantiateTypeDeclaration(decl)) === null || _h === void 0 ? void 0 : _h.apply(call);
            }
            if (decl.kind === "ArgumentDeclaration" || decl.kind === "NameDeclaration") {
                // either a concrete reference to an action or an abstract action signature (argument declaration).
                const actionThing = checker.getThing(decl);
                if (!actionThing || !actionThing.type || ((_j = actionThing.origin) === null || _j === void 0 ? void 0 : _j.kind) === "ActionDeclaration") {
                    return undefined;
                }
                // actual type of the argument declaration
                const actualType = actionThing.type.isOptional() ? actionThing.type.getOptionalType() : actionThing.type;
                // abstract type of the argument declaration, e.g. FunctionN<..>
                const abstractType = checker.root.getType(decl);
                if (abstractType && (actualType === null || actualType === void 0 ? void 0 : actualType.isFunction())) {
                    return new Apply(checker, call, actualType);
                }
                return undefined;
            }
            return new Apply(checker, call, decl);
        }
    }
    /**
     * Find an Argument's TypeProperty based on its position or name in a Call to a TypeDeclaration.
     *
     * @param type type declaration called
     * @param argument argument value in the call
     */
    findArgumentTypeProperty(type, argument) {
        var _a;
        if (type.properties === undefined) {
            return undefined;
        }
        if ((_a = argument.name) === null || _a === void 0 ? void 0 : _a.name) {
            return type.getProperty(argument.name.name);
        }
        if (typeof argument.index === "number") {
            return type.getProperty(argument.index);
        }
        return undefined;
    }
    /**
     * Find an Argument's declaration based on its name or position
     *
     * @param action action or dialog declaration
     * @param argument argument value in the call
     */
    findArgumentDeclaration(action, argument) {
        var _a, _b;
        if (action.arguments === undefined) {
            return undefined;
        }
        if ((_a = argument.name) === null || _a === void 0 ? void 0 : _a.name) {
            // named argument
            return (_b = action.arguments) === null || _b === void 0 ? void 0 : _b.find((arg) => { var _a, _b; return ((_a = arg.name) === null || _a === void 0 ? void 0 : _a.name) === ((_b = argument.name) === null || _b === void 0 ? void 0 : _b.name); });
        }
        if (argument.index) {
            return action.arguments[argument.index];
        }
        return undefined;
    }
    instantiateActionDeclaration(decl, call) {
        return new Apply(this, call, decl);
    }
    /**
     * Instantiate a TypeDeclaration given some typeArgs and a type environment.
     *
     * @param type type declaration to instantiate
     * @param typeArgs known type arguments
     * @param env type environment
     */
    instantiateTypeDeclaration(type, typeArgs, functionArgumentNames, functionName) {
        var _a;
        if (typeArgs === undefined) {
            const cached = this.globalTypeIndex.get(type);
            if (cached !== undefined) {
                return cached;
            }
        }
        let newType = new Type(this, type, typeArgs, functionArgumentNames, functionName);
        if (newType.isReturnValue()) {
            // compute the intrinsic type alias `ReturnValue<A>`
            // we substitute this type with the type of the value returned by the action or dialog
            const returnValueType = newType.getReturnValueType();
            if ((returnValueType === null || returnValueType === void 0 ? void 0 : returnValueType.isAction()) || (returnValueType === null || returnValueType === void 0 ? void 0 : returnValueType.isDialog())) {
                const returnType = (_a = returnValueType.getPropertyType("returnType")) === null || _a === void 0 ? void 0 : _a.getTypeType();
                if (returnType) {
                    newType = returnType;
                }
            }
        }
        if (typeArgs === undefined) {
            // cache a forward-reference to the constructed type if there are no type arguments
            this.globalTypeIndex.set(type, newType);
        }
        return newType;
    }
    /**
     * Instantiate a type by substituting all type parameters and propagating the types to all super types.
     *
     * @param type type reference to instantiate
     * @param env optional lookup table of known names
     */
    instantiateTypeReference(type, env) {
        var _a, _b, _c, _d, _e;
        if (type === undefined) {
            return undefined;
        }
        if (env === null || env === void 0 ? void 0 : env[(_a = type.name) === null || _a === void 0 ? void 0 : _a.name]) {
            return env === null || env === void 0 ? void 0 : env[(_b = type.name) === null || _b === void 0 ? void 0 : _b.name];
        }
        const typeDecl = this.lookupTypeReference(type);
        if ((typeDecl === null || typeDecl === void 0 ? void 0 : typeDecl.kind) === "TypeParameter") {
            return this.instantiateTypeParameter(typeDecl);
        }
        if (typeDecl !== undefined) {
            let typeArgs;
            if (typeDecl.kind === "TypeDeclaration" || typeDecl.kind === "ActionDeclaration" || typeDecl.kind === "DialogDeclaration") {
                if (typeDecl.genericArguments) {
                    if (type.arguments === undefined || ((_c = type.arguments) === null || _c === void 0 ? void 0 : _c.length) === 0) {
                        typeArgs = typeDecl.genericArguments.map((arg) => {
                            const type = this.getType(arg);
                            if ((type === null || type === void 0 ? void 0 : type.extensions) === undefined || type.extensions.length === 0) {
                                return this.thing;
                            }
                            if (type.extensions.length === 1) {
                                return type.extensions[0];
                            }
                            // TODO: how should we handle a multiple-inheritance lower bound.
                            return this.thing;
                        });
                    }
                    else {
                        typeArgs = (_d = type.arguments) === null || _d === void 0 ? void 0 : _d.map((arg) => this.instantiateTypeReference(arg, env));
                    }
                    // infer the type arguments
                }
            }
            return this.instantiateTypeDeclaration(typeDecl, typeArgs, type.functionArgumentNames, type.functionArgumentNames !== undefined && type.context.kind === "ArgumentDeclaration" ? (_e = type.context.name) === null || _e === void 0 ? void 0 : _e.name : undefined);
        }
        return undefined;
    }
    /**
     * Instantiate a TypeParameter.
     *
     * @param param type parameter.
     */
    instantiateTypeParameter(param) {
        return new Type(this, param, undefined);
    }
    instantiateAlexaSchemaType(name, ...genericArguments) {
        const decl = this.lookupQualifiedName(name);
        if ((decl === null || decl === void 0 ? void 0 : decl.kind) === "TypeDeclaration") {
            const type = this.instantiateTypeDeclaration(decl, genericArguments.length > 0 ? genericArguments : undefined);
            if (type) {
                return type;
            }
        }
        throw new Error(`could not find alexa schema type: ${name}`);
    }
    /**
     * determine if the a propertyReference is a type used in an event
     *
     * E.G.
     * ```
     * type Person {
     *   String name
     * }
     *
     * u = utterances<Person>(["Hi {name}"])
     * personInfo = expect(Invoke, u)
     * a = personInfo.name
     * ```
     * `a` is a property reference and it's from the event expr, thus should return true
     *
     */
    isPropertyReferenceFromEvent(value) {
        const rootExpr = this.getPropertyChainRootExpression(value);
        if (this.isNameReference(rootExpr)) {
            const rootExprValue = this.resolveNameReferenceToCall(rootExpr);
            if (rootExprValue !== undefined) {
                const rootExprValueApply = this.getApply(rootExprValue);
                // TODO: don't use hard code once know how to determine the type is from event
                if ((rootExprValueApply === null || rootExprValueApply === void 0 ? void 0 : rootExprValueApply.isExpect()) || (rootExprValueApply === null || rootExprValueApply === void 0 ? void 0 : rootExprValueApply.isUserSays())) {
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * determine if the a propertyReference is refer to api result
     *
     * E.G.
     * ```
     * type Person {
     *   String name
     * }
     *
     * action Person getPerson()
     * person = getPerson()
     *
     *
     * a = person.name
     * ```
     * `a` is a property reference and it's refer to api result, thus should return true
     *
     */
    isPropertyReferenceFromApiInvocation(value) {
        const rootExpr = this.getPropertyChainRootExpression(value);
        if (this.isNameReference(rootExpr)) {
            const rootExprValue = this.resolveNameReferenceToCall(rootExpr);
            if (rootExprValue !== undefined) {
                const rootExprValueApply = this.getApply(rootExprValue);
                if (rootExprValueApply === null || rootExprValueApply === void 0 ? void 0 : rootExprValueApply.isUserDefinedApi()) {
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * Get all Nodes referenced by a source Node.
     *
     * @param source node to start the search from
     * @returns a set of all Nodes referenced by this
     */
    getReferences(source) {
        const checker = this;
        const references = new Set();
        visitEachChild(source, findReferences);
        return references;
        function findReferences(node) {
            var _a;
            const ref = (node === null || node === void 0 ? void 0 : node.kind) === "Type" ? node.declaration : node;
            if (node === undefined || ref === undefined || references.has(ref)) {
                return;
            }
            references.add(ref);
            if (node.kind === "Call") {
                const apply = checker.getApply(node);
                // findReferences(apply?.decl);
                const decl = (apply === null || apply === void 0 ? void 0 : apply.decl.kind) === "Type" ? apply.decl.declaration : apply === null || apply === void 0 ? void 0 : apply.decl;
                if (decl) {
                    findReferences(decl);
                }
                visitEachChild(node, findReferences);
            }
            else if (node.kind === "NameReference") {
                findReferences(checker.lookupNameReference(node));
            }
            else if (node.kind === "Type") {
                (_a = node.getReferences()) === null || _a === void 0 ? void 0 : _a.forEach((ref) => references.add(ref));
            }
            else {
                visitEachChild(node, findReferences);
            }
            return false;
        }
    }
    /**
     * Get all response call used in a module.
     *
     * @param module module where to retrieve the responses
     * @returns a set of all responses
     */
    getResponseInfosInModule(module) {
        if (module === undefined) {
            return [];
        }
        const checker = this;
        return collectArray(module, findResponses);
        function findResponses(node) {
            if (node === undefined) {
                return [];
            }
            if (node.kind === "Call") {
                const apply = checker.getApply(node);
                if ((apply === null || apply === void 0 ? void 0 : apply.isResponse()) || (apply === null || apply === void 0 ? void 0 : apply.isConfirmAction()) || (apply === null || apply === void 0 ? void 0 : apply.isConfirmArgs()) || (apply === null || apply === void 0 ? void 0 : apply.isEnsure())) {
                    return [...apply.getResponseInfo()];
                }
            }
            return collectArray(node, findResponses);
        }
    }
    /**
     * Find the very beginning expr of property chain
     *
     * ```
     * a.b.c => a
     * a().b.c => a()
     * com.api.a.b.c => com.api.a
     * ```
     */
    getPropertyChainRootExpression(propertyRef) {
        let temp = propertyRef;
        while ((temp === null || temp === void 0 ? void 0 : temp.kind) === "PropertyReference") {
            const fullName = ask.PropertyReference.tryResolveQualifiedName(temp);
            if (fullName !== undefined && this.lookupQualifiedName(fullName) !== undefined) {
                return temp;
            }
            temp = temp.expression;
        }
        return temp;
    }
    /**
     * check whether the node is a nameReference
     *
     * 1. if node is of "NameReference" Type, then it's a nameReference
     * 2. if node is of "PropertyReference", then check whether it's QFN point to a node. E.G. test.getPerson,
     *    "test" is a namespace, thus this should also be treated as nameReference
     */
    isNameReference(node) {
        if (node === undefined) {
            return false;
        }
        if (node.kind === "NameReference") {
            return true;
        }
        if (node.kind === "PropertyReference") {
            const fqn = ask.PropertyReference.tryResolveQualifiedName(node);
            if (this.lookupQualifiedName(fqn) !== undefined) {
                return true;
            }
        }
        return false;
    }
    /**
     * Get all NameDeclarations under module scope
     */
    getAllModuleScopeNameDeclarations() {
        const nameDecls = [];
        this.global.scope.forEach((value) => {
            if (value) {
                if (Array.isArray(value)) {
                    value.forEach((node) => {
                        if (node.kind === "NameDeclaration") {
                            nameDecls.push(node);
                        }
                    });
                }
                else if (value.kind === "NameDeclaration") {
                    nameDecls.push(value);
                }
            }
        });
        return nameDecls;
    }
    /**
     * collect locale info based on input
     *
     * E.G.
     * 1. when input is a nameDecl
     * ```
     * @locale(Locale.en_US)
     * myWelcome = apla("./apla/document.json")
     *
     * collectLocaleInfo(myWelcome) => ['en_US']
     * ```
     *
     * 2. when input is a nameReference
     * ```
     * @locale(Locale.en_US)
     * myWelcome = apla("./apla/document.json")
     * temp = myWelcome
     * collectLocaleInfo(temp) => ['en_US']
     * ```
     *
     * 3. when input is a propertyReference
     * ```
     * namespace test
     * @locale(Locale.en_US)
     * myWelcome = apla("./apla/document.json")
     * temp = myWelcome
     * collectLocaleInfo(test.temp) => ['en_US']
     *
     * 4. when input is variations call
     * ```
     * namespace test
     * @locale(Locale.en_US)
     * myWelcomeEN = apla("./apla/document.json")
     *
     * @locale(Locale.en_GB)
     * myWelcomeGB = apla("./apla/document.json")
     *
     * myWelcome = variations(myWelcomeEN, myWelcomeGB)
     *
     * collectLocaleInfo(test.myWelcome) => ['en_US', 'en_GB']
     *
     * 5. when input is nested variations call
     * ```
     * namespace test
     * @locale(Locale.en_US)
     * myWelcomeUS = apla("./apla/document.json")
     *
     * @locale(Locale.en_GB)
     * myWelcomeGB = apla("./apla/document.json")
     *
     * myWelcomeEN = variations(myWelcomeEN, myWelcomeGB)
     *
     * @locale(Locale.ja_JP)
     * myWelcomeJP = apla("./apla/document.json")
     *
     * myWelcome = variations(myWelcomeEN, myWelcomeJP)
     *
     * collectLocaleInfo(test.myWelcome) => ['en_US', 'en_GB', 'en_JP']
     */
    collectLocaleInfo(input) {
        var _a, _b, _c, _d, _e, _f, _g;
        const locales = [];
        // handle variations action call
        if (input.kind === "Call") {
            const apply = this.getApply(input);
            if (apply === null || apply === void 0 ? void 0 : apply.isVariations()) {
                const argumentValueThing = apply.getArgumentValueThing("variations");
                if (argumentValueThing === null || argumentValueThing === void 0 ? void 0 : argumentValueThing.isList()) {
                    const items = argumentValueThing.getListItems();
                    items === null || items === void 0 ? void 0 : items.forEach((item) => {
                        var _a, _b;
                        if (((_a = item === null || item === void 0 ? void 0 : item.item) === null || _a === void 0 ? void 0 : _a.kind) === "NameReference" || ((_b = item === null || item === void 0 ? void 0 : item.item) === null || _b === void 0 ? void 0 : _b.kind) === "PropertyReference") {
                            locales.push(...this.collectLocaleInfo(item.item));
                        }
                    });
                }
            }
            return locales;
        }
        // handle nameDecl
        if (ask.isNameDeclaration(input)) {
            if (((_a = input.expression) === null || _a === void 0 ? void 0 : _a.kind) === "Call") {
                const apply = this.getApply(input.expression);
                if (apply === null || apply === void 0 ? void 0 : apply.isVariations()) {
                    return this.collectLocaleInfo(input.expression);
                }
                else if (((_c = (_b = input.expression) === null || _b === void 0 ? void 0 : _b.name) === null || _c === void 0 ? void 0 : _c.name) === "MultiModalResponse") {
                    const apla = apply === null || apply === void 0 ? void 0 : apply.getArgumentValue("apla");
                    const apl = apply === null || apply === void 0 ? void 0 : apply.getArgumentValue("apl");
                    return [...getArgumentValueLocales(apla, this), ...getArgumentValueLocales(apl, this)];
                }
            }
            (_d = input.annotations) === null || _d === void 0 ? void 0 : _d.forEach((annotation) => {
                if (annotation.kind === "Annotation" && annotation.call && annotation.call.kind === "Call") {
                    const apply = this.getApply(annotation.call);
                    if (apply !== undefined && apply.isLocaleAction()) {
                        const localeValueThing = apply.getArgumentValueThing("locales");
                        if (localeValueThing === null || localeValueThing === void 0 ? void 0 : localeValueThing.isList()) {
                            const items = localeValueThing.getListItems();
                            items === null || items === void 0 ? void 0 : items.forEach((item) => {
                                var _a, _b, _c;
                                if (ask.isPropRef(item === null || item === void 0 ? void 0 : item.item) && ((_b = (_a = item === null || item === void 0 ? void 0 : item.item.expression) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.name) === "Locale" && ((_c = item.item.name) === null || _c === void 0 ? void 0 : _c.name)) {
                                    locales.push(item.item.name.name);
                                }
                            });
                        }
                    }
                }
            });
        }
        // handle nameReference and propertyReference
        if (input.kind === "NameReference" || input.kind === "PropertyReference") {
            const thing = this.getThing(input);
            if (ask.isNameDeclaration((_e = thing === null || thing === void 0 ? void 0 : thing.origin) === null || _e === void 0 ? void 0 : _e.context)) {
                return this.collectLocaleInfo((_f = thing === null || thing === void 0 ? void 0 : thing.origin) === null || _f === void 0 ? void 0 : _f.context);
            }
            if (thing === null || thing === void 0 ? void 0 : thing.isObject()) {
                return (_g = thing.getLocales()) !== null && _g !== void 0 ? _g : [];
            }
        }
        return locales;
        function getArgumentValueLocales(value, checker) {
            if ((value && checker.isNameReference(value)) || ask.isNameDeclaration(value)) {
                return checker.collectLocaleInfo(value);
            }
            return [];
        }
    }
}
//# sourceMappingURL=data:application/json;base64,