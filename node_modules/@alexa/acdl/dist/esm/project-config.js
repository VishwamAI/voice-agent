import path from "path";
import { loadPackageConfig, ProjectVersion, loadPackageConfigSync } from "./package";
import { exists, existsSync, readJsonFile, readJsonFileSync } from "./util";
/**
 * Load a project from a directory on disk.
 *
 * We first look for a `package.json` with an `ask` section or an `ask.json` file at the `rootDir` and use
 * it as configuration if it exists.
 *
 * Otherwise we then check if there an `ask-resources.json` file pointing to a `skill-package` folder. Failing that,
 * we then look for a `skill-package` folder at the `rootDir`. In all of these cases, we default to a `1.0.0-beta1`
 * project configuration.
 *
 * @param rootDir path of the project containing `package.json` or `ask.json` configuration file.
 * @param profile ASK CLI profile to use when inspecting `ask-resources.json`.
 */
export function loadProjectConfigSync(rootDir = process.cwd(), profile = "default") {
    var _a, _b, _c, _d;
    const pkgJson = loadPackageConfigSync(rootDir);
    if (pkgJson !== undefined) {
        return validateProjectConfig(rootDir, pkgJson);
    }
    const askResources = readJsonFileSync(path.join(rootDir, "ask-resources.json"));
    const skillPackagePath = path.join(rootDir, (_d = (_c = (_b = (_a = askResources === null || askResources === void 0 ? void 0 : askResources.profiles) === null || _a === void 0 ? void 0 : _a[profile]) === null || _b === void 0 ? void 0 : _b.skillMetadata) === null || _c === void 0 ? void 0 : _c.src) !== null && _d !== void 0 ? _d : "skill-package");
    if (existsSync(skillPackagePath)) {
        return {
            rootDir,
            srcDir: "conversations",
            outDir: "build",
            projectVersion: ProjectVersion.Beta1,
            sourceRootDir: skillPackagePath,
        };
    }
    throw new Error(`expected 'package.json', 'ask-resources.json' or 'skill-package/' to exist at location: '${rootDir}'`);
}
/**
 * Load a project from a directory on disk.
 *
 * We first look for a `package.json` with an `ask` section or an `ask.json` file at the `rootDir` and use
 * it as configuration if it exists.
 *
 * Otherwise we then check if there an `ask-resources.json` file pointing to a `skill-package` folder. Failing that,
 * we then look for a `skill-package` folder at the `rootDir`. In all of these cases, we default to a `1.0.0-beta1`
 * project configuration.
 *
 * @param rootDir path of the project containing `package.json` or `ask.json` configuration file.
 * @param profile ASK CLI profile to use when inspecting `ask-resources.json`.
 */
export async function loadProjectConfig(rootDir = process.cwd(), profile = "default") {
    var _a, _b, _c, _d;
    const pkgJson = await loadPackageConfig(rootDir);
    if (pkgJson !== undefined) {
        return validateProjectConfig(rootDir, pkgJson);
    }
    const askResources = await readJsonFile(path.join(rootDir, "ask-resources.json"));
    const skillPackagePath = path.join(rootDir, (_d = (_c = (_b = (_a = askResources === null || askResources === void 0 ? void 0 : askResources.profiles) === null || _a === void 0 ? void 0 : _a[profile]) === null || _b === void 0 ? void 0 : _b.skillMetadata) === null || _c === void 0 ? void 0 : _c.src) !== null && _d !== void 0 ? _d : "skill-package");
    if (await exists(skillPackagePath)) {
        return {
            rootDir,
            srcDir: "conversations",
            outDir: "build",
            projectVersion: ProjectVersion.Beta1,
            sourceRootDir: skillPackagePath,
        };
    }
    throw new Error(`expected 'package.json', 'ask-resources.json' or 'skill-package/' to exist at location: '${rootDir}'`);
}
function validateProjectConfig(rootDir, packageConfig) {
    if (packageConfig === undefined) {
        throw new Error(`missing ASK configuration, did you forget to add an 'ask' section in your 'package.json' or as a separate file: 'ask.json'?`);
    }
    return {
        ...packageConfig.ask,
        name: packageConfig.name,
        rootDir,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvamVjdC1jb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJvamVjdC1jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBRXhCLE9BQU8sRUFBbUMsaUJBQWlCLEVBQUUsY0FBYyxFQUFFLHFCQUFxQixFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3JILE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxnQkFBZ0IsRUFBQyxNQUFNLFFBQVEsQ0FBQztBQTBDMUU7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsTUFBTSxVQUFVLHFCQUFxQixDQUFDLFVBQWtCLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxVQUFrQixTQUFTOztJQUNoRyxNQUFNLE9BQU8sR0FBRyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUUvQyxJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUU7UUFDekIsT0FBTyxxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDaEQ7SUFDRCxNQUFNLFlBQVksR0FBRyxnQkFBZ0IsQ0FBd0IsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO0lBQ3ZHLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBQSxNQUFBLE1BQUEsTUFBQSxZQUFZLGFBQVosWUFBWSx1QkFBWixZQUFZLENBQUUsUUFBUSwwQ0FBRyxPQUFPLENBQUMsMENBQUUsYUFBYSwwQ0FBRSxHQUFHLG1DQUFJLGVBQWUsQ0FBQyxDQUFDO0lBQ3RILElBQUksVUFBVSxDQUFDLGdCQUFnQixDQUFDLEVBQUU7UUFDaEMsT0FBTztZQUNMLE9BQU87WUFDUCxNQUFNLEVBQUUsZUFBZTtZQUN2QixNQUFNLEVBQUUsT0FBTztZQUNmLGNBQWMsRUFBRSxjQUFjLENBQUMsS0FBSztZQUNwQyxhQUFhLEVBQUUsZ0JBQWdCO1NBQ2hDLENBQUM7S0FDSDtJQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsNEZBQTRGLE9BQU8sR0FBRyxDQUFDLENBQUM7QUFDMUgsQ0FBQztBQUVEOzs7Ozs7Ozs7Ozs7R0FZRztBQUNILE1BQU0sQ0FBQyxLQUFLLFVBQVUsaUJBQWlCLENBQUMsVUFBa0IsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLFVBQWtCLFNBQVM7O0lBQ2xHLE1BQU0sT0FBTyxHQUFHLE1BQU0saUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFakQsSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFO1FBQ3pCLE9BQU8scUJBQXFCLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ2hEO0lBQ0QsTUFBTSxZQUFZLEdBQUcsTUFBTSxZQUFZLENBQXdCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLG9CQUFvQixDQUFDLENBQUMsQ0FBQztJQUN6RyxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQUEsTUFBQSxNQUFBLE1BQUEsWUFBWSxhQUFaLFlBQVksdUJBQVosWUFBWSxDQUFFLFFBQVEsMENBQUcsT0FBTyxDQUFDLDBDQUFFLGFBQWEsMENBQUUsR0FBRyxtQ0FBSSxlQUFlLENBQUMsQ0FBQztJQUN0SCxJQUFJLE1BQU0sTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUU7UUFDbEMsT0FBTztZQUNMLE9BQU87WUFDUCxNQUFNLEVBQUUsZUFBZTtZQUN2QixNQUFNLEVBQUUsT0FBTztZQUNmLGNBQWMsRUFBRSxjQUFjLENBQUMsS0FBSztZQUNwQyxhQUFhLEVBQUUsZ0JBQWdCO1NBQ2hDLENBQUM7S0FDSDtJQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsNEZBQTRGLE9BQU8sR0FBRyxDQUFDLENBQUM7QUFDMUgsQ0FBQztBQUVELFNBQVMscUJBQXFCLENBQUMsT0FBZSxFQUFFLGFBQXlDO0lBQ3ZGLElBQUksYUFBYSxLQUFLLFNBQVMsRUFBRTtRQUMvQixNQUFNLElBQUksS0FBSyxDQUNiLDZIQUE2SCxDQUM5SCxDQUFDO0tBQ0g7SUFDRCxPQUFPO1FBQ0wsR0FBRyxhQUFhLENBQUMsR0FBSTtRQUNyQixJQUFJLEVBQUUsYUFBYSxDQUFDLElBQUk7UUFDeEIsT0FBTztLQUNSLENBQUM7QUFDSixDQUFDIn0=